
*
* 68k transcode by JOTD in 2023 using (https://github.com/jotd666/amiga68ktools)
  
* register conventions (imposed by z80268k mostly) are as follows:
*
* A: D0
* B: D1
* C: D2
* BC: manual
* D: D3
* E: D4
* DE: A1 or D3
* H: D5
* L: D6
* HL: A0 or D6 (video addresses)
* carry: manual, using D7 (push/pop af has no portable equivalent as SR is privileged on 68020+)
*
* depending on the context H/L/HL and D/E/DE require rework as the game
* constructs pointers from 0x100-page aligned pointers to avoid to handle
* lsb wrap and msb increase. Of course the 68000 can do that so easily. But
* it cannot split address registers :) 
*
* screen addresses (0x8000-0x8400) are usually pointed by HL but in the API
* I chose to store the value in D6 as it's not really an address now but rather
* an offset to video memory once you subtract 0x8000

*    0000-7fff ROM
*    8000-83ff Video RAM
*    8400-87ff Color RAM
*    8800-8fff RAM
*
*    memory mapped ports:
*
*    read:
*    9000      DSW1
*    9040      DSW0
*    9080      IN1
*    90c0      IN0
*
*    write:
*    8ff2-8ffd 6 pairs of two bytes:
*              the first byte contains the sprite image number (bits 2-7), Y flip (bit 0),
*              X flip (bit 1); the second byte the color
*    9005      sound voice 1 waveform (nibble)
*    9011-9013 sound voice 1 frequency (nibble)
*    9015      sound voice 1 volume (nibble)
*    900a      sound voice 2 waveform (nibble)
*    9016-9018 sound voice 2 frequency (nibble)
*    901a      sound voice 2 volume (nibble)
*    900f      sound voice 3 waveform (nibble)
*    901b-901d sound voice 3 frequency (nibble)
*    901f      sound voice 3 volume (nibble)
*    9022-902d Sprite coordinates, x/y pairs for 6 sprites
*    9040      interrupt enable
*    9041      sound enable
*    9042      palette bank selector
*    9043      flip screen
*    9044-9045 coin counters
*    9046      color lookup table bank selector
*    9047      character/sprite bank selector
*    9070      watchdog reset
*
*static INPUT_PORTS_START( pengo )
*	PORT_START("IN0")
*	PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_JOYSTICK_UP ) PORT_4WAY
*	PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_JOYSTICK_DOWN ) PORT_4WAY
*	PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_JOYSTICK_LEFT ) PORT_4WAY
*	PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_JOYSTICK_RIGHT ) PORT_4WAY
*	/* the coin input must stay low for no less than 2 frames and no more
*	   than 9 frames to pass the self test check.
*	   Moreover, this way we avoid the game freezing until the user releases
*	   the "coin" key. */
*	PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_COIN1 ) PORT_IMPULSE(2)
*	PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_COIN2 ) PORT_IMPULSE(2)
*	/* Coin Aux doesn't need IMPULSE to pass the test, but it still needs it
*	   to avoid the freeze. */
*	PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_COIN3 ) PORT_IMPULSE(2)
*	PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_BUTTON1 )
*
*	PORT_START("IN1")
*	PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_JOYSTICK_UP ) PORT_4WAY PORT_COCKTAIL
*	PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_JOYSTICK_DOWN ) PORT_4WAY PORT_COCKTAIL
*	PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_JOYSTICK_LEFT ) PORT_4WAY PORT_COCKTAIL
*	PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_JOYSTICK_RIGHT ) PORT_4WAY PORT_COCKTAIL
*	PORT_SERVICE_NO_TOGGLE(0x10, IP_ACTIVE_LOW)
*	PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_START1 )
*	PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_START2 )
*	PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_BUTTON1 ) PORT_COCKTAIL
*
*	PORT_START("DSW0")
*	PORT_DIPNAME( 0x01, 0x00, DEF_STR( Bonus_Life ) )       PORT_DIPLOCATION("SW1:1")
*	PORT_DIPSETTING(    0x00, "30000" )
*	PORT_DIPSETTING(    0x01, "50000" )
*	PORT_DIPNAME( 0x02, 0x00, DEF_STR( Demo_Sounds ) )      PORT_DIPLOCATION("SW1:2")
*	PORT_DIPSETTING(    0x02, DEF_STR( Off ) )
*	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
*	PORT_DIPNAME( 0x04, 0x00, DEF_STR( Cabinet ) )          PORT_DIPLOCATION("SW1:3")
*	PORT_DIPSETTING(    0x00, DEF_STR( Upright ) )
*	PORT_DIPSETTING(    0x04, DEF_STR( Cocktail ) )
*	PORT_DIPNAME( 0x18, 0x10, DEF_STR( Lives ) )            PORT_DIPLOCATION("SW1:4,5")
*	PORT_DIPSETTING(    0x18, "2" )
*	PORT_DIPSETTING(    0x10, "3" )
*	PORT_DIPSETTING(    0x08, "4" )
*	PORT_DIPSETTING(    0x00, "5" )
*	PORT_DIPNAME( 0x20, 0x20, "Rack Test (Cheat)" ) PORT_CODE(KEYCODE_F1)   PORT_DIPLOCATION("SW1:6")
*	PORT_DIPSETTING(    0x20, DEF_STR( Off ) )
*	PORT_DIPSETTING(    0x00, DEF_STR( On ) )
*	PORT_DIPNAME( 0xc0, 0x80, DEF_STR( Difficulty ) )       PORT_DIPLOCATION("SW1:7,8")
*	PORT_DIPSETTING(    0xc0, DEF_STR( Easy ) )
*	PORT_DIPSETTING(    0x80, DEF_STR( Medium ) )
*	PORT_DIPSETTING(    0x40, DEF_STR( Hard ) )
*	PORT_DIPSETTING(    0x00, DEF_STR( Hardest ) )
*
*	PORT_START("DSW1")
*	PORT_DIPNAME( 0x0f, 0x0c, DEF_STR( Coin_A ) )           PORT_DIPLOCATION("SW2:1,2,3,4")
*	PORT_DIPSETTING(    0x00, DEF_STR( 4C_1C ) )
*	PORT_DIPSETTING(    0x08, DEF_STR( 3C_1C ) )
*	PORT_DIPSETTING(    0x04, DEF_STR( 2C_1C ) )
*	PORT_DIPSETTING(    0x09, "2 Coins/1 Credit 5/3" )
*	PORT_DIPSETTING(    0x05, "2 Coins/1 Credit 4/3" )
*	PORT_DIPSETTING(    0x0c, DEF_STR( 1C_1C ) )
*	PORT_DIPSETTING(    0x0d, "1 Coin/1 Credit 5/6" )
*	PORT_DIPSETTING(    0x03, "1 Coin/1 Credit 4/5" )
*	PORT_DIPSETTING(    0x0b, "1 Coin/1 Credit 2/3" )
*	PORT_DIPSETTING(    0x02, DEF_STR( 1C_2C ) )
*	PORT_DIPSETTING(    0x07, "1 Coin/2 Credits 5/11" )
*	PORT_DIPSETTING(    0x0f, "1 Coin/2 Credits 4/9" )
*	PORT_DIPSETTING(    0x0a, DEF_STR( 1C_3C ) )
*	PORT_DIPSETTING(    0x06, DEF_STR( 1C_4C ) )
*	PORT_DIPSETTING(    0x0e, DEF_STR( 1C_5C ) )
*	PORT_DIPSETTING(    0x01, DEF_STR( 1C_6C ) )
*	PORT_DIPNAME( 0xf0, 0xc0, DEF_STR( Coin_B ) )           PORT_DIPLOCATION("SW2:5,6,7,8")
*	PORT_DIPSETTING(    0x00, DEF_STR( 4C_1C ) )
*	PORT_DIPSETTING(    0x80, DEF_STR( 3C_1C ) )
*	PORT_DIPSETTING(    0x40, DEF_STR( 2C_1C ) )
*	PORT_DIPSETTING(    0x90, "2 Coins/1 Credit 5/3" )
*	PORT_DIPSETTING(    0x50, "2 Coins/1 Credit 4/3" )
*	PORT_DIPSETTING(    0xc0, DEF_STR( 1C_1C ) )
*	PORT_DIPSETTING(    0xd0, "1 Coin/1 Credit 5/6" )
*	PORT_DIPSETTING(    0x30, "1 Coin/1 Credit 4/5" )
*	PORT_DIPSETTING(    0xb0, "1 Coin/1 Credit 2/3" )
*	PORT_DIPSETTING(    0x20, DEF_STR( 1C_2C ) )
*	PORT_DIPSETTING(    0x70, "1 Coin/2 Credits 5/11" )
*	PORT_DIPSETTING(    0xf0, "1 Coin/2 Credits 4/9" )
*	PORT_DIPSETTING(    0xa0, DEF_STR( 1C_3C ) )
*	PORT_DIPSETTING(    0x60, DEF_STR( 1C_4C ) )
*	PORT_DIPSETTING(    0xe0, DEF_STR( 1C_5C ) )
*	PORT_DIPSETTING(    0x10, DEF_STR( 1C_6C ) )
*INPUT_PORTS_END

*	;; pengo
*	;; 33E6:	main A.I. routine to decrypt
*
*	pengo_moving_direction_8CF4:
*   0x0: not moving
*   0x8: up
*   0x9: down
*   0xA: left
*   0xB: right
*   plus bit 2 set when breaking ice block/hitting wall (down+break = 0xD)

*	;; 8D00 -> 8D80 characters. snobees first then pengo & moving block
*
*	+ 00:	x min 19 max D8 1 block = 0x8  (coords = 0: invisible)
*	+ 01:	y min 11 max F0 1 block = 0x10
*	+ 03:	snobee color
*	+ 04:	facing direction (0 up, 1 down, 2 left, 3 right)
*   + 05:   snobee/character index
*	+ 06:	instant move period (can be different from the one in 1C)
*	+ 07:	current period counter (increased automatically)
*	+ 09:
*	+ 0A:	stunned counter (used for stun/blinking stun)
*	+ 1B:	 ?????
*	+ 1C:	move period for this level
*		pengo move period is 0A
*		easy level = 0C at act 1
*		medium level = 0B at act 1
*		hard = 0A (same speed as pengo at 1st level)
*		hardest = 09, 08 from act 5 (always faster than pengo)
*	+ 1D:	backup of 1E when block avoidance mode
*	+ 1E:	A.I. mode when 1F = 02
*		00 block avoidance mode (only active when a block is moving)
*	        01 roaming mode: wanders randomly, breaking no blocks, no hunt. But tries to avoid moving blocks
*	        02 block breaking mode:	wanders randomly, breaking all the blocks. Tries to avoid moving blocks that pengo throws
*		03 hunt mode 1:	X based (see description for details)
*		04 hunt mode 2:	exactly like 03 but y based
*		05 hunt mode 3:	combination of hunt modes 1 and 2: this is the most aggressive one, x & y based
*		06 roaming mode: same as 01
*		07 roaming mode: same as 01
*		08 hunt mode: same as 05
*		09 chicken mode: go up to reach upper border
*		0A chicken mode: go down to reach lower border
*		0B chicken mode: go left to reach left border
*		0C chicken mode: right to right border
*		0D chicken mode: on border, going up to corner
*		0E chicken mode: on border, going down to corner
*		0F chicken mode: on border, going left to corner
*		10 chicken mode: on border, going right to corner
*
*	+ 1F:	behaviour (state machine, next state is state+1)
*
*		00: dead, and no more eggs
*		01: alive and contemplating a move (static)
*		02: alive and moving
*		03: transition to stunned: keeps moving until aligned on grid
*		04: stunned (aligned on grid)
*		05: blinking stunned
*		06: stunned picked by pengo:	100 points
*		09  pushed by block (short transitions to 0A)
*		0A  pushed by block
*		0B  crushed by block
*		0C  crushed by block:	 gives 400/1600/... score
*		0D  about to hatch (short transitions to 0E)
*		0E  about to hatch (short transitions to 0F)
*		0F  hatching

* named offsets for character structure
x_pos = 0x0
y_pos = 0x01
animation_frame = 0x02
char_color = 0x03
facing_direction = 0x04
char_id = 0x05
instant_move_period = 0x06
current_period_counter = 0x07
unknown_09 = 0x09
* stunned counter for snobees, push block counter for pengo
stunned_push_block_counter = 0x0A
* maybe used for other misc snobees animations as well
intermission_dance_push_anim_counter = 0x0B
alive_walk_counter = 0x0C
path_address_pointer_or_misc_flags = 0x10
unknown_1A = 0x1A
unknown_1B = 0x1B
move_period = 0x1C
backup_ai_mode = 0x1D
ai_mode = 0x1E
char_state = 0x1F

 * snobee move routine is "02_snobee_moving_33A5"
 * the A.I. is done in handle_snobee_direction_change_33D8

 * A.I. is handled as follows:
 *
 * - when eggs hatch at startup, behaviour is random from 8 possibles (code at 0x3CAE)
 * - when stunned on a border/diamond align, if not killed, snobee
 *   switches to 02:	 block breaking
 * - when a snobee is killed and an egg hatches, game scans A.I. of
 *   all alive snobees and sets one in 02: block breaking mode
 *   if not already one in that state

 * pengo struct 8D80 (shares a lot of members with snoobees)

*	+ 00:	x (coords = 0: invisible)
*	+ 01:	y
*	+ 02:	animation frame / sprite tile code
*	+ 03:	pengo color (can be changed, very funny effect!!)
*	+ 04:	facing direction 0:up,1:down,2:	left,3:	right
*	+ 05:	fixed to 5:	character index (pengo, change to sno bee with 0!)
*	+ 06:	speed (fixed to 0A, make it super fast by decreasing value!!)
*	+ 08:	moving FF=true 0=false
*	+ 0F:	fire pressed FF=true 0=false
*	+ 12:	saved number of seconds
*	+ 13:	saved number of minutes
*	+ 1E:	000x: alive, 0xFF: dead
*	+ 1F:	state.
*        1 stand-by (get ready)
*        2 walking
*        3 invalid state that reboots the game !!
*        4 breaking block
*        5 shaking wall
*        6 dying
*
*	;; moving block struct 8DA0 (Pengo can only push 1 block at a time)
*	+ 00:	x (coords = 0: invisible)
*	+ 01:	y
*	+ 04:	direction (0,1,2,3)
*	+ 0F:	number of snobee hit by this block
*	+ 1F:	00: not moving, 02: moving
* exports

    * ROM

    .global pengo_irq
    .global pengo_reset

	
	.include "pengo.inc"
	.ifdef	__amiga__
	.include "pengo_ram.68k"
	.align	2
	.endif
	
* < A0: source (HL)
* < A1: destination (DE)
* < D1: length (16 bit)
ldir:
    subq.w    #1,d1
0:
    move.b    (a0)+,(a1)+
    dbf        d1,0b
    clr.w    d1
    rts

* < A0: source (HL)
* < D1: length to search
* > D0.B value searched for (A)
* > Z flag if found
cpir:
    subq.w    #1,d1
0:
    cmp.b    (a0)+,d0
    beq.b    1f
    dbf        d1,0b
    clr.w    d1
    * not found: unset Z
    cmp.b   #1,d1
1:
    rts

* pseudo macros for code repeating a lot


get_diamond_block_1_xy_8DB0_to_bc:
	move.b	diamond_block_1_xy_8DB0,d2
	move.b	diamond_block_1_xy_8DB0+1,d1
	rts
get_diamond_block_2_xy_8DB2_to_bc:
	move.b	diamond_block_2_xy_8DB2,d2
	move.b	diamond_block_2_xy_8DB2+1,d1
	rts
get_diamond_block_3_xy_8DB4_to_bc:
	move.b	diamond_block_3_xy_8DB4,d2
	move.b	diamond_block_3_xy_8DB4+1,d1
	rts
get_diamond_block_1_xy_8DB0_to_de:
	move.b	diamond_block_1_xy_8DB0,d4
	move.b	diamond_block_1_xy_8DB0+1,d3
	rts
get_diamond_block_2_xy_8DB2_to_de:
	move.b	diamond_block_2_xy_8DB2,d4
	move.b	diamond_block_2_xy_8DB2+1,d3
	rts
get_diamond_block_3_xy_8DB4_to_de:
	move.b	diamond_block_3_xy_8DB4,d4
	move.b	diamond_block_3_xy_8DB4+1,d3
	rts
	
load_maze_data:
	move.w	maze_data_8C20,d2           	| [ld   bc,(maze_data_8C20)]
	move.w	maze_data_8C20+1,d1           	| [ld   bc,(maze_data_8C20)]
	rts
	
set_current_cursor_from_bc:
	move.b	d2,cursor_x_8800                	| [ld   (cursor_x_8800),bc]
	move.b	d1,cursor_y_8801                	| [ld   (cursor_x_8800),bc]
	rts
set_current_cursor_from_hl:
	move.b	d6,cursor_x_8800                	| [ld   (cursor_x_8800),hl]
	move.b	d5,cursor_y_8801                	| [ld   (cursor_x_8800),hl]
	rts
	
pengo_reset:
	* default: 1 update/irq call
	* we need 60 updates / second so on amiga PAL
	* we need to set this variable to 2 once out of 5 calls
	move.b	#1,vb_ticks_count

	
	jra		INITIALISE_SYSTEM

	
	nop
INITIALISE_SYSTEM:
	                      	| [ld   hl,0x0000]
	clr.w	unknown_8830     | [ld   (unknown_8830),hl]
	jra	l_03d4             
	

pengo_irq:
	move.w	cursor_x_8800,-(sp)
	move.w	cursor_color_8802,-(sp)
	move.b	delay_timer_8820,d0             	| [ld   a,(delay_timer_8820)]
	jeq	l_0057                             	| if delay_timer_8820 == 0 goto 0x57 [jr   z,0x0057]
	subq.b	#1,d0                           	| else decrease it [dec  a]
	move.b	d0,delay_timer_8820             	| and write it back [ld   (delay_timer_8820),a]
l_0057:
	move.b	delay_timer_2_8821,d0           	| same for other timer [ld   a,(delay_timer_2_8821)]
	jeq	l_0061                             	| skip if 0 [jr   z,0x0061]
	subq.b	#1,d0                           	| decrease it [dec  a]
	move.b	d0,delay_timer_2_8821           	| and write it back [ld   (delay_timer_2_8821),a]
l_0061:
	move.b	unknown_87FF,d0                       	| [ld   a,(0x87FF)]
	jne	l_013f                             	| [jp   nz,0x013F]
	addq.w	#1,timer_16bit_8822         	| [ld   hl,(timer_16bit_8822)]
	jbsr	l_32bc                            	| [call 0x32BC]
	* temp coin shit disabled
	*jbsr	l_02a2   coin                         	| [call 0x02A2]
	*jbsr	l_02cd 	 coin                           	| [call 0x02CD]
	*jbsr	l_027f   coin                         	| [call 0x027F]
	*jbsr	l_03b2                            	| [call 0x03B2]
	*jbsr	l_03aa                            	| [call 0x03AA]
	
	lea	time_counter_8C5B,a0           	| [ld   hl,time_counter_8C5B]
	addq.b	#1,(a0)                         	| [inc  (hl)]
	move.b	#0x3D,d0                        	|  61 "microsecs" [ld   a,0x3D]
	cmp.b	(a0),d0                          	| [cp   (hl)]
	jcc	l_009e                             	| [jr   nc,0x009E]
	clr.b	(a0)                             	| [ld   (hl),0x00]
	addq.w	#1,a0                           	| [inc  hl]
	addq.b	#1,(a0)                         	|  1 more second [inc  (hl)]
	move.b	#0x3B,d0                        	|  59 seconds [ld   a,0x3B]
	cmp.b	(a0),d0                          	| [cp   (hl)]
	jcc	l_009e                             	| [jr   nc,0x009E]
	clr.b	(a0)                             	| [ld   (hl),0x00]
	addq.w	#1,a0                           	| [inc  hl]
	addq.b	#1,(a0)                         	|  1 more minute [inc  (hl)]
	cmp.b	(a0),d0                          	| [cp   (hl)]
	jcc	l_009e                             	| [jr   nc,0x009E]
* reset minute counter
	clr.b	(a0)                             	| [ld   (hl),0x00]
	addq.w	#1,a0                           	| [inc  hl]
* add hour, never called obviously as round "times out" before 2 minutes
* by monsters fleeing the scene
	addq.b	#1,(a0)                         	| [inc  (hl)]
l_009e:
	* skipped all sound update
l_013f:
	* restore cursor positions if used during interrupt
	move.w	(sp)+,cursor_color_8802            	| [ld   (cursor_color_8802),a]
	move.w	(sp)+,cursor_x_8800                	| [ld   (cursor_x_8800),hl]

	jbsr	l_015b                            	| [call 0x015B]
	**jbsr	l_0179                            	| [call 0x0179]
	rts
	

l_015b:
	move.b	currently_playing_8819,d0       	| [ld   a,(currently_playing_8819)]
	tst.b	d0                               	| [and  a]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	move.b	number_of_credits_8808,d0       	| [ld   a,(number_of_credits_8808)]
	tst.b	d0                               	| [and  a]
	bne.b	0f
	rts                                    	| [ret  z]
0:
 * start game (credits inserted)
	move.b	#0x01,d0                        	| [ld   a,$01]
	move.b	d0,currently_playing_8819       	| [ld   (currently_playing_8819),a]
*ld   sp,stack_pointer_8FF0
	lea	coin_has_been_inserted_0490(pc),a0                      	| [ld   hl,$0490]
	move.l	a0,-(sp)                        	| [push hl]
	**move.b	#0x01,d0                        	| [ld   a,$01]
	**move.b	d0,dip_switches_9040            	| [ld   (dip_switches_9040),a]
	rts
	
	* used a relative pointers table (why not ?)
table_032D:
	.word	l_034D-table_032D+0x85-0x4D
	.word	l_034D-table_032D+0x61-0x4D
	.word	l_034D-table_032D+0x71-0x4D
	.word	l_034D-table_032D+0x59-0x4D
	.word	l_034D-table_032D+0x7C-0x4D
	.word	l_034D-table_032D+0x5D-0x4D
	.word	l_034D-table_032D+0x65-0x4D
	.word	l_034D-table_032D+0x52-0x4D
	.word	l_034D-table_032D+0x7F-0x4D
	.word	l_034D-table_032D+0x5F-0x4D
	.word	l_034D-table_032D+0x6C-0x4D
	.word	l_034D-table_032D+0x56-0x4D
	.word	l_034D-table_032D+0x77-0x4D
	.word	l_034D-table_032D+0x5B-0x4D
	.word	l_034D-table_032D+0x63-0x4D
	.word	l_034D-table_032D
	
l_034D:
	.byte	0xFF,0x00,0x00,0x00,0x01,0xFF,0x00,0x00,0x01,0xFF,0x00,0x01,0xFF,0x01,0xFF,0x02
	.byte	0xFF,0x03,0xFF,0x04,0xFF,0x05,0xFF,0x06,0xFF,0x00,0x01,0x00,0x01,0x01,0x01,0xFF
	.byte	0x00,0x01,0x00,0x02,0xFF,0x01,0x01,0x01,0x01,0x02,0xFF,0x01,0x01,0x01,0x02,0xFF
	.byte	0x01,0x02,0xFF,0x02,0x02,0x02,0x02,0x03,0xFF,0x02,0x02,0x02,0x03,0xFF

l_03d4:
* zero a lot of hardware stuff
	jbsr	osd_sound_disable
	clr.b	d0                               	| [xor  a]
*	move.b	d0,dip_switches_9040            	| [ld   (dip_switches_9040),a]
*	move.b	d0,sound_enable_9041            	| [ld   (sound_enable_9041),a]
*	move.b	d0,flip_screen_9043             	| [ld   (flip_screen_9043),a]
*	move.b	d0,coin_counter_9044            	| [ld   (coin_counter_9044),a]
*	move.b	d0,coin_counter_9045            	| [ld   (coin_counter_9045),a]
*	move.b	d0,character_sprite_bank_selector_9047	| [ld   (character_sprite_bank_selector_9047),a]
*	move.b	d0,palette_bank_selector_9042   	| [ld   (palette_bank_selector_9042),a]
*	move.b	d0,color_lookup_table_bank_selector_9046	| [ld   (color_lookup_table_bank_selector_9046),a]
	clr.b	d0                               	| [xor  a]
* zero a lot of global counters
	move.b	d0,number_of_credits_8808       	| [ld   (number_of_credits_8808),a]
*	move.b	a0,unknown_8809                 	| [ld   (unknown_8809),hl]
*	move.b	d0,unknown_880B                 	| [ld   (unknown_880B),a]
*	move.b	a0,unknown_881C                 	| [ld   (unknown_881C),hl]
*	move.b	a0,unknown_881E                 	| [ld   (unknown_881E),hl]

	jbsr	enable_sound_18EC                 	| [call enable_sound_18EC]
	
	jbsr	osd_enable_vblank_interrupt
	
	clr.b	d0                               	| [xor  a]
	move.b	d0,unknown_8828                 	| [ld   (unknown_8828),a]
	move.b	d0,unknown_8829                 	| [ld   (unknown_8829),a]
	clr.w	player_1_score_880E          	| [ld   (player_1_score_880E),hl]
	clr.w	player_2_score_8810          	| [ld   (player_2_score_8810),hl]
	                      	| [ld   hl,0x07D0]
	move.w	#0x7D0,high_score_880C              	| [ld   (high_score_880C),hl]
	jbsr	init_highscore_table_2540         	| [call init_highscore_table_2540]

	* no cocktail mode support!
	clr.b	cocktail_mode_8818           	| [ld   (cocktail_mode_8818),a]
	clr.b	d0                               	| [ld   a,0x00]
	move.b	d0,game_playing_8817            	| [ld   (game_playing_8817),a]
 * initialize random number generator with 0x365A value
	                      	| [ld   hl,0x365A]
	move.w	#0x365A,random_seed_8826             	| [ld   (random_seed_8826),hl]
	
	* skip some strange memory check / protection
	move.b	#0xFC,weird_variable_882A          	| [ld   (weird_variable_882A),a]

loop_0478:
	                               	| [ld   a,0x00]
	clr.b	currently_playing_8819       	| [ld   (currently_playing_8819),a]
	jbsr	display_thanks_for_playing_04A0   	| [call display_thanks_for_playing_04A0]

 * loop

loop_0480:
	jbsr	display_title_screen_0521         	| [call display_title_screen_0521]
	jbsr	pack_ice_screen_22CB              	| [call pack_ice_screen_22CB]
	jbsr	display_demo_and_top_scores_6E1   	| [call display_demo_and_top_scores_6E1]
	move.b	#0x80,d0                        	| [ld   a,0x80]
	jbsr	delay_28D1                        	| [call delay_28D1]
	jeq	loop_0480                          	| [jr   z,loop_0480]
	
coin_has_been_inserted_0490:
	
	bsr		osd_break

display_thanks_for_playing_04A0:
	jbsr	clear_screen_and_colors_28E5      	| [call clear_screen_and_colors_28E5]
	jbsr	clear_sprites_31B7                	| [call clear_sprites_31B7]
	jbsr	update_all_scores_2B10            	| [call update_all_scores_2B10]

	lea	str_thanks_for_playing_try_once_more_4D0(pc),a0                      	| [ld   hl,0x04D0]
	jbsr	print_line_typewriter_style_29F4                   	| [call print_line_typewriter_style_29F4]
	jbsr	print_line_typewriter_style_29F4                   	| [call print_line_typewriter_style_29F4]
	move.b	#0x40,d0                        	| [ld   a,0x40]
	jbsr	delay_28D1                        	| [call delay_28D1]
	jbsr	print_line_typewriter_style_29F4                   	| [call print_line_typewriter_style_29F4]
	move.b	#0xC0,d0                        	| [ld   a,0xC0]
	jbsr	delay_28D1                        	| [call delay_28D1]
	rts   	| [ret]
str_thanks_for_playing_try_once_more_4D0:
     dc.b	0x02,0x0A,0x90,0x20,0x20,0x20,0x20,0x20,0xA0,0x02,0x0D,0x90,0x20,0x20,0x20,0x54   | ......   T
     dc.b	0x48,0x41,0x4E,0x4B,0x53,0x20,0x46,0x4F,0x52,0x20,0x50,0x4C,0x41,0x59,0x49,0x4E   | HANKS FOR PLAYIN
     dc.b	0x47,0x3A,0x20,0xA0,0x02,0x10,0x90,0x20,0x20,0x20,0x20,0x20,0x54,0x52,0x59,0x20   | G:...     TRY
     dc.b	0x4F,0x4E,0x43,0x45,0x20,0x4D,0x4F,0x52,0x45,0x20,0x3D,0x20,0x20,0x20,0x20,0xA0   | ONCE MORE =


display_title_screen_0521:
	clr.b	d0                               	| [ld   a,$00]
	move.b	d0,player_number_8816           	| [ld   (player_number_8816),a]
	jbsr	clear_screen_and_colors_28E5      	| [call clear_screen_and_colors_28E5]
	jbsr	clear_sprites_31B7                	| [call clear_sprites_31B7]
	jbsr	update_all_scores_2B10            	| [call update_all_scores_2B10]
	jbsr	draw_sega_logo_05BE               	| [call draw_sega_logo_05BE]
	lea	squash_snobee_msg_57A(pc),a0       	| [ld   hl,squash_snobee_msg_57A]
	jbsr	print_line_typewriter_style_29F4                   	| [call print_line_typewriter_style_29F4]
	lea	pengo_string_590(pc),a0            	| [ld   hl,pengo_string_590]
	jbsr	print_line_typewriter_style_29F4                   	| [call print_line_typewriter_style_29F4]
	lea	snoobee_string_0598(pc),a0         	| [ld   hl,snoobee_string_0598]
	jbsr	print_line_typewriter_style_29F4                   	| [call print_line_typewriter_style_29F4]
	*move.b	#0x12,d5                        	| [ld   h,$12]
	*move.b	#0x07,d6                        	| [ld   l,$07]
	move.w	#0x0712,cursor_x_8800                	| [ld   (cursor_x_8800),hl]
	move.b	#0x09,d0                        	| [ld   a,$09]
	move.b	d0,cursor_color_8802            	| [ld   (cursor_color_8802),a]
	jbsr	draw_ice_block_tile_2EFE          	| [call draw_ice_block_tile_2EFE]
	lea	iceblock_string_05A2(pc),a0        	| [ld   hl,iceblock_string_05A2]
	jbsr	print_line_typewriter_style_29F4                   	| [call print_line_typewriter_style_29F4]
	move.b	#0x16,d1                        	| [ld   b,$16]
	move.b	#0x07,d2                        	| [ld   c,$07]
	move.b	#0x09,d0                        	| [ld   a,$09]
	move.b	d0,cursor_color_8802            	| [ld   (cursor_color_8802),a]
	jbsr	set_diamond_position_2FA9         	| [call set_diamond_position_2FA9]
	lea	diamondblock_string_05AE(pc),a0    	| [ld   hl,diamondblock_string_05AE]
	jbsr	print_line_typewriter_style_29F4                   	| [call print_line_typewriter_style_29F4]
	jbsr	pengo_intermission_or_title_1D29  	| [call pengo_intermission_or_title_1D29]
	rts                                    	| [ret]
squash_snobee_msg_57A:
	.byte	0x05,0x06,0x91,0x53,0x51,0x55,0x41,0x53,0x48,0x20,0x54,0x48,0x45,0x20,0x53,0x4E  |  ...SQUASH THE SNOBEES
	.byte	0x4F,0x3F,0x42,0x45,0x45,0xD3
pengo_string_590:
	.byte	0x0C,0x0B,0x91,0x50,0x45,0x4E,0x47,0xCF   | ...PENG0
snoobee_string_0598:
	.byte	0x0C,0x0F,0x98,0x53,0x4E,0x4F,0x3F,0x42,0x45,0xC5   | .SNO BEE...ICE B
iceblock_string_05A2:
	.byte	0x0C,0x13,0x91,0x49,0x43,0x45,0x20,0x42,0x4C,0x4F,0x43,0xCB
diamondblock_string_05AE:
	.byte	0x0C,0x17,0x98,0x44,0x49,0x41,0x4D,0x4F,0x4E,0x44,0x20,0x42,0x4C,0x4F,0x43,0xCB   | ...DIAMOND BLOCK


draw_sega_logo_05BE:
	                        	| [ld   a,$09]
	move.b	#0x09,cursor_color_8802            	| [ld   (cursor_color_8802),a]
	move.b	#0xF0,d0                        	| [ld   a,$F0]
											| [ld   hl,$1B09]
	move.w	#0x091B,cursor_x_8800                	| [ld   (cursor_x_8800),hl]
	jbsr	set_2x2_tile_2F00                 	| [call set_2x2_tile_2F00]
											| [ld   hl,$1B0B]
	move.w	#0x0B1B,cursor_x_8800                	| [ld   (cursor_x_8800),hl]
	jbsr	set_2x2_tile_2F00                 	| [call set_2x2_tile_2F00]
											| [ld   hl,$1B0D]
	move.w	#0x0D1B,cursor_x_8800                	| [ld   (cursor_x_8800),hl]
	jbsr	set_2x2_tile_2F00                 	| [call set_2x2_tile_2F00]
											| [ld   hl,$1B0F]
	move.w	#0x0F1B,cursor_x_8800                	| [ld   (cursor_x_8800),hl]
	jbsr	set_2x2_tile_2F00                 	| [call set_2x2_tile_2F00]
	move.b	#0x9C,d0                        	| [ld   a,$9C]
											| [ld   hl,$1D09]
	move.w	#0x091D,cursor_x_8800                	| [ld   (cursor_x_8800),hl]
	jbsr	set_4_consecutive_tiles_in_a_row_060C	| [call set_4_consecutive_tiles_in_a_row_060C]
	move.b	#0x5C,d0                        	| [ld   a,$5C]
	jbsr	set_4_consecutive_tiles_in_a_row_060C	| [call set_4_consecutive_tiles_in_a_row_060C]
												| [ld   hl,$1B11]
	move.w	#0x111B,cursor_x_8800                	| [ld   (cursor_x_8800),hl]
	move.b	#0x22,d0                        	| (R) registered char [ld   a,$22]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	addq.b	#1,d0                           	| bottom of (R) char [inc  a]
	jbsr	move_cursor_1_2919        	| [call move_cursor_1_2919]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	rts                                    	| [ret]

set_4_consecutive_tiles_in_a_row_060C:
	move.b	#0x04,d1                        	| [ld   b,$04]
l_060e:
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	addq.b	#1,d0                           	| [inc  a]
	subq.b	#1,d1                           	| [...]
	jne	l_060e                             	| [djnz $060E]
	rts                                    	| [ret]

l_0615:
	clr.b	d0                               	| [ld   a,$00]
	move.b	d0,cursor_color_8802            	| [ld   (cursor_color_8802),a]
	lea	table_0670(pc),a0                  	| [ld   hl,table_0670]
	move.b	#0xA0,d3                        	| [ld   d,$A0]
	move.b	#0x08,d1                        	| [ld   b,$08]
l_0621:
	move.w	d1,-(sp)                        	| [push bc]
	move.b	#0x07,d0                        	| [ld   a,$07]
	sub.b	d1,d0                            	| [sub  b]
	addq.b	#0x02,d0                        	| [add  a,$02]
	move.b	d0,d1                           	| [ld   b,a]
	move.b	#0x05,d2                        	| [ld   c,$05]
	bsr		set_current_cursor_from_bc                	| [ld   (cursor_x_8800),bc]
l_062e:
	move.b	(a0)+,d0                         	| [ld   a,(hl)]
	                           	| [inc  hl]
	                               	| [and  a]
	jeq	l_066c                             	| [jr   z,$066C]
	move.b	d0,d1                           	| [ld   b,a]
	btst.b	#7,d0                           	| [bit  7,a]
	jne	l_0645                             	| [jr   nz,$0645]
	btst.b	#6,d0                           	| [bit  6,a]
	jne	l_0651                             	| [jr   nz,$0651]
l_063c:
	move.b	d3,d0                           	| [ld   a,d]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	addq.b	#1,d3                           	| [inc  d]
	subq.b	#1,d1                           	| [...]
	jne	l_063c                             	| [djnz $063C]
	jra	l_062e                             	| [jr   $062E]
l_0645:
	and.b	#0x0F,d0                         	| [and  $0F]
	move.b	d0,d1                           	| [ld   b,a]
	move.b	#0x20,d0                        	| [ld   a,$20]
l_064a:
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	subq.b	#1,d1                           	| [...]
	jne	l_064a                             	| [djnz $064A]
	jra	l_062e                             	| [jr   $062E]
l_0651:
	and.b	#0x0F,d0                         	| [and  $0F]
	move.l	a0,-(sp)                        	| [push hl]
	move.w	d3,-(sp)                        	| [push de]
	lea	table_0664(pc),a0                  	| [ld   hl,table_0664]
	clr.w	d3                               	| [ld   d,$00]
	move.b	d0,d3                           	| [ld   e,a]
	add.W	d3,a0								| [add hl,de]
	move.b	(a0),d0                         	| [ld   a,(hl)]
	move.w	(sp)+,d3                        	| [pop  de]
	move.l	(sp)+,a0                        	| [pop  hl]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	jra	l_062e                             	| [jr   $062E]
table_0664:
	.byte	0xA3,0xA8,0xC0,0xCD,0xD3,0xE4,0xE8,0xE9

l_066c:
	move.w	(sp)+,d1                        	| [pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_0621                             	| [djnz $0621]
	rts                                    	| [ret]

table_0670:
     .byte	0x06,0x00,0x04,0x41,0x01,0x88,0x03,0x00,0x02,0x41,0x0A,0x40,0x04,0x00,0x01,0x41
     .byte	0x03,0x41,0x03,0x41,0x41,0x02,0x41,0x04,0x00,0x01,0x41,0x41,0x01,0x41,0x01,0x41
     .byte	0x01,0x41,0x01,0x41,0x01,0x41,0x02,0x41,0x41,0x01,0x00,0x01,0x41,0x41,0x01,0x41
     .byte	0x03,0x41,0x03,0x41,0x41,0x02,0x41,0x01,0x00,0x01,0x41,0x02,0x41,0x41,0x06,0x43
     .byte	0x41,0x44,0x02,0x00,0x01,0x42,0x01,0x81,0x46,0x47,0x84,0x02,0x42,0x45,0x01,0x00

display_top_scores_6C0:
	clr.b	d0                               	| [ld  a,$00]
	*move.b	d0,flip_screen_9043             	| set normal mode (not cocktail) [ld   (flip_screen_9043),a]
	jbsr	clear_screen_and_colors_28E5      	| [call clear_screen_and_colors_28E5]
	jbsr	clear_sprites_31B7                	| [call clear_sprites_31B7]
	jbsr	update_all_scores_2B10            	| [call update_all_scores_2B10]
	jbsr	l_276c                            	| [call $276C]
	lea	0x057E(pc),a0  FUCK                    	| [ld   hl,$057E]
	move.b	(a0),d0                         	| [ld   a,(hl)]
	cmp.b	#0x51,d0                         	| [cp   $51]
	jne	l_06df                             	| [jr   nz,$06DF]
	st.b	d0                                	| [ld   a,$FF]
	jbsr	delay_28D1                        	| [call delay_28D1]
	rts                                    	| [ret]
l_06df:
	move.l	(sp)+,a0                        	| [pop  hl]
	rts                                    	| [ret]
 * demo mode
display_demo_and_top_scores_6E1:
	move.b	#0x05,d0                        	| [ld   a,$05]
	move.b	d0,level_number_player1_8812    	| [ld   (level_number_player1_8812),a]
	move.b	d0,level_number_player2_8813    	| [ld   (level_number_player2_8813),a]
 * set main counter to 0
											| [ld   hl,$0000]
	clr.w	counter_lsb_8824             	| [ld   (counter_lsb_8824),hl]
 * init number of lives
	**move.b	dip_switches_9040,d0            	| [ld   a,(dip_switches_9040)]
	clr.b	d0	| TEMP
	not.b	d0                               	| [cpl]
	and.b	#0x18,d0                         	| [and  $18]
	ror.b	#3,d0                            	| [rrca]
												| [rrca]
												| [rrca]
	addq.b	#0x02,d0                        	| [add  a,$02]
	move.b	d0,lives_counter_p1_8814        	| [ld   (lives_counter_p1_8814),a]
	move.b	d0,lives_counter_p2_8815        	| [ld   (lives_counter_p2_8815),a]
	clr.b	d0                               	| [xor  a]
	move.b	d0,player_number_8816           	| [ld   (player_number_8816),a]
	move.w	random_seed_8826,d6         	| [ld   hl,(random_seed_8826)]
	move.w	d6,random_seed_backup_8CF0      	| backup random seed? [ld   (random_seed_backup_8CF0),hl]
 * init random number generator to the same value so demo mode
 * works properly
	                      	| [ld   hl,$365A]
	move.w	#0x365A,random_seed_8826             	| [ld   (random_seed_8826),hl]
* choose demo sequence 1 or 2 depending on bit 0 of demo_run_counter_8CF6
 * demo sequence 1
	lea	move_table_6400(pc),a1             	| [ld   de,move_table_6400]
	lea	demo_run_counter_8CF6,a0       	| [ld   hl,demo_run_counter_8CF6]
	addq.b	#1,(a0)                         	| [inc  (hl)]
	btst.b	#0,(a0)                         	| [bit  0,(hl)]
	jeq	l_071e                             	| [jr   z,$071E]
 * demo sequence 2
	lea	move_table_6600(pc),a1             	| [ld   de,move_table_6600]
l_071e:
	move.l	a1,demo_move_table_pointer_8CF2 	| [ld   (demo_move_table_pointer_8CF2),de]
	clr.b	d0                               	| [xor  a]
	move.b	d0,demo_mode_var_8CF5           	| [ld   (demo_mode_var_8CF5),a]
	jbsr	run_one_life_092D                 	| [call run_one_life_092D]
	jbsr	display_top_scores_6C0            	| [call display_top_scores_6C0]
	rts                                    	| [ret]


wait_for_start_and_play_072D:
	move.b	number_of_credits_8808,d0       	| [ld   a,(number_of_credits_8808)]
	tst.b	d0                               	| [and  a]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	clr.b	d0                               	| [xor  a]
	move.b	d0,player_number_8816           	| [ld   (player_number_8816),a]
	jbsr	clear_screen_and_colors_28E5      	| [call clear_screen_and_colors_28E5]
	jbsr	update_all_scores_2B10            	| [call update_all_scores_2B10]
	jbsr	l_2a2c                            	| [call $2A2C]
	lea	unknown_880B(pc),a0                	| [ld   hl,unknown_880B]
	bset.b	#7,(a0)                         	| [set  7,(hl)]

	move.l	a0,-(sp)                        	| [push hl]
	jbsr	wait_for_start_0774               	| [call wait_for_start_0774]
* game start
	move.l	(sp)+,a0                        	| [pop  hl]
	bclr.b	#7,(a0)                         	| [res  7,(hl)]
	st.b	d0                                	| [ld   a,$FF]
	move.b	d0,game_playing_8817            	| [ld   (game_playing_8817),a]
	jbsr	play_one_game_087D                	| [call play_one_game_087D]
	clr.b	d0                               	| [xor  a]
	move.b	d0,game_playing_8817            	| [ld   (game_playing_8817),a]
	*move.b	d0,flip_screen_9043             	| [ld   (flip_screen_9043),a]
	lea	cursor_x_8800(pc),a0               	| [ld   hl,cursor_x_8800]
												| [ld   de,$002A]
	tst.b	d0                               	| [and  a]
	add.w	#0x2A,a0							| [add  hl,de]
	move.b	(a0),d1                         	| [ld   b,(hl)]
	move.b	weird_variable_882A,d0          	| [ld   a,(weird_variable_882A)]
	cmp.b	d1,d0                            	| [cp   b]
	jeq	wait_for_start_and_play_072D       	| [jp   z,wait_for_start_and_play_072D]
	clr.b	d0                               	| [xor  a]
	not.b	d0                               	| [cpl]
	lea	cursor_x_8800(pc),a0               	| [ld   hl,cursor_x_8800]
											| [dec  hl]
	move.b	d0,-(a0)                         	| [ld   (hl),a]
	jra	wait_for_start_and_play_072D       	| [jp   wait_for_start_and_play_072D]

wait_for_start_0774:
	jbsr	clear_sprites_31B7                	| [call clear_sprites_31B7]
 * initialize pengo structure

	lea	pengo_struct_8D80(pc),a2           	| [ld   ix,pengo_struct_8D80]
	move.b	#0xB0,(x_pos,a2)                	| 176 [ld   (ix+x_pos),$B0]
	move.b	#0x58,(y_pos,a2)                	| 88 [ld   (ix+y_pos),$58]
	move.b	#0x0B,(char_color,a2)           	| [ld   (ix+char_color),$0B]
	move.b	#0x02,(facing_direction,a2)     	| facing direction [ld   (ix+facing_direction),$02]
	move.b	#0x05,(char_id,a2)              	| ID of Pengo is 5 [ld   (ix+char_id),$05]
	clr.b	(0x09,a2)                        	| [ld   (ix+$09),$00]
	clr.b	(intermission_dance_push_anim_counter,a2)	| [ld   (ix+intermission_dance_push_anim_counter),$00]
	jbsr	display_snobee_sprite_33CE        	| [call display_snobee_sprite_33CE]
	jbsr	display_character_sprite_39AB     	| [call display_character_sprite_39AB]
l_079d:
	jbsr	increase_counter_0875             	| [call increase_counter_0875]
	jbsr	l_0819                            	| [call $0819]
	move.b	0x9080,d0                       	| [ld   a,($9080)]
	not.b	d0                               	| [cpl]
	and.b	#0x60,d0                         	| [and  $60]
	jeq	l_079d                             	| [jr   z,$079D]
	btst.b	#6,d0                           	| [bit  6,a]
	jne	l_07bc                             	| [jr   nz,$07BC]
	lea	number_of_credits_8808(pc),a0      	| [ld   hl,number_of_credits_8808]
	subq.b	#1,(a0)                         	| [dec  (hl)]
	clr.b	d0                               	| [ld   a,$00]
	move.b	d0,player_number_8816           	| [ld   (player_number_8816),a]
	jbsr	l_07d1                            	| [call $07D1]
	rts                                    	| [ret]
l_07bc:
	move.b	number_of_credits_8808,d0       	| [ld   a,(number_of_credits_8808)]
	cmp.b	#0x01,d0                         	| [cp   $01]
	jeq	l_079d                             	| [jr   z,$079D]
	lea	number_of_credits_8808(pc),a0      	| [ld   hl,number_of_credits_8808]
	subq.b	#2,(a0)                         	| [dec  (hl)]
	                         	| [dec  (hl)]
	move.b	#0x80,d0                        	| [ld   a,$80]
	move.b	d0,player_number_8816           	| [ld   (player_number_8816),a]
	jbsr	l_07d1                            	| [call $07D1]
	rts                                    	| [ret]
l_07d1:
	**move.b	dsw_1_9000_coinage,d0                   	| [ld   a,(dsw_1_9000_coinage)]
	not.b	d0                               	| [cpl]
	and.b	#0x0F,d0                         	| [and  $0F]
	lea	unknown_8809(pc),a0                	| [ld   hl,unknown_8809]
	jbsr	l_07fb                            	| [call $07FB]
	lea	unknown_880a(pc),a0                	| [ld   hl,unknown_880a]
	**move.b	dsw_1_9000_coinage,d0                   	| [ld   a,(dsw_1_9000_coinage)]
	not.b	d0                               	| [cpl]
	and.b	#0x0F,d0                         	| [and  $0F]
	move.b	d0,d1                           	| [ld   b,a]
	**move.b	dsw_1_9000_coinage,d0                   	| [ld   a,(dsw_1_9000_coinage)]
	not.b	d0                               	| [cpl]
	ror.b	#4,d0                            	| [rrca]
												| [rrca]
												| [rrca]
												| [rrca]
	and.b	#0x0F,d0                         	| [and  $0F]
	cmp.b	d1,d0                            	| [cp   b]
	jne	l_07f7                             	| [jr   nz,$07F7]
	lea	unknown_8809(pc),a0                	| [ld   hl,unknown_8809]
l_07f7:
	jbsr	l_07fb                            	| [call $07FB]
	rts                                    	| [ret]
l_07fb:

	move.l	a0,-(sp)                        	| [push hl]
	move.b	(a0),d2                         	| [ld   c,(hl)]
	add.b	d0,d0                            	| [add  a,a]
	lea	table_032D(pc),a0                      	| [ld   hl,$032D]
	clr.w	d3                               	| [ld   d,$00]
	move.b	d0,d3                           	| [ld   e,a]
												| [add  hl,de]
	* get proper (relative) pointer to data
	add.w	(a0,d3.w),a0                         	| [ld   e,(hl)]
	* now data offset
												| [inc  hl]
												| [ld   d,(hl)]
	clr.w	d6                               	| [ld   h,$00]
	move.b	d2,d6                           	| [ld   l,c]
	add.w	d6,a0								| [add  hl,de]
	clr.b	d2                               	| [ld   c,$00]
l_080e:
	move.b	(a0),d0                         	| [ld   a,(hl)]
	or.b	d0,d0                             	| [or   a]
	jne	l_0816                             	| [jr   nz,$0816]
	addq.b	#1,d2                           	| [inc  c]
	subq.b	#1,a0                           	| [dec  hl]
	jra	l_080e                             	| [jr   $080E]
l_0816:
	move.l	(sp)+,a0                        	| [pop  hl]
	move.b	d2,(a0)                         	| [ld   (hl),c]
	rts                                    	| [ret]

l_0819:
	move.b	(intermission_dance_push_anim_counter,a2),d0	| [ld   a,(ix+intermission_dance_push_anim_counter)]
	lea	table_0822(pc),a1                  	| [ld   de,table_0822]
	jra	indirect_jump_2D8F                 	| [jp   indirect_jump_2D8F]

table_0822:
	.long	block_pushed_3FFA
	.long	l_0830
	.long	l_085c
	.long	block_pushed_401F
	.long	l_0846
	.long	l_085c
	.long	l_0870

l_0830:
										| [ld   h,$0C]
										| [ld   l,$13]
	move.w	#0x130C,cursor_x_8800                	| [ld   (cursor_x_8800),hl]
	jbsr	put_blank_at_current_pos_2900     	| [call put_blank_at_current_pos_2900]
	jbsr	move_cursor_1_2919                	| [call move_cursor_1_2919]
	move.b	#0x4E,d0                        	| [ld   a,$4E]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	addq.b	#1,(intermission_dance_push_anim_counter,a2)	| [inc  (ix+intermission_dance_push_anim_counter)]
	rts                                    	| [ret]

l_0846:
										| [ld   h,$0C]
										| [ld   l,$13]
	move.w	#0x130C,cursor_x_8800                	| [ld   (cursor_x_8800),hl]
	move.b	#0x4E,d0                        	| [ld   a,$4E]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	jbsr	move_cursor_1_2919                	| [call move_cursor_1_2919]
	jbsr	put_blank_at_current_pos_2900     	| [call put_blank_at_current_pos_2900]
	addq.b	#1,(intermission_dance_push_anim_counter,a2)	| [inc  (ix+intermission_dance_push_anim_counter)]
	rts                                    	| [ret]

l_085c:
	btst.b	#0,(0x09,a2)                    	| [bit  0,(ix+$09)]
	bne	0f
	jbsr	l_0867                            	| [call z,$0867]
0:
	jbsr	l_4082                            	| [call $4082]
	rts                                    	| [ret]

l_0867:
	move.b	#0x20,(0x0a,a2)                 	| [ld   (ix+$0a),$20]
	move.b	#0x0F,(0x09,a2)                 	| [ld   (ix+$09),$0F]
	rts                                    	| [ret]

l_0870:
	clr.b	(intermission_dance_push_anim_counter,a2)	| [ld   (ix+intermission_dance_push_anim_counter),$00]
	rts                                    	| [ret]

increase_counter_0875:
	addq.w	#1,counter_lsb_8824
	rts                                    	| [ret]


play_one_game_087D:
	clr.w	player_1_score_880E          	| [ld   (player_1_score_880E),hl]
	clr.w	player_2_score_8810          	| [ld   (player_2_score_8810),hl]
	move.b	#0x01,d0                        	| [ld   a,$01]
	move.b	d0,level_number_player1_8812    	| [ld   (level_number_player1_8812),a]
	move.b	d0,level_number_player2_8813    	| [ld   (level_number_player2_8813),a]
	*move.b	dip_switches_9040,d0            	|  dip switch [ld   a,(dip_switches_9040)]
	clr.b	d0		| temp
	not.b	d0                               	| [cpl]
	and.b	#0x18,d0                         	| [and  $18]
	ror.b	#3,d0                            	| [rrca]
												| [rrca]
												| [rrca]
 * gives 1,2,3 depending on lives settings
	addq.b	#0x02,d0                        	| [add  a,$02]
	move.b	d0,lives_counter_p1_8814        	| [ld   (lives_counter_p1_8814),a]
	move.b	d0,lives_counter_p2_8815      	| [ld   ($lives_counter_p2_8815),a]
 * game loop (lives)
l_089f:
	lea	player_number_8816(pc),a0          	| [ld   hl,player_number_8816]
	btst.b	#7,(a0)                         	| [bit  7,(hl)]
	jne	l_08ae                             	| [jr   nz,$08AE]
	move.b	lives_counter_p1_8814,d0        	| [ld   a,(lives_counter_p1_8814)]
	and.b	#0x7F,d0                         	| [and  $7F]
 * game over:	return
	bne.b	0f
	rts                                    	| [ret  z]
0:
	jra	l_08ce                             	| [jr   $08CE]
l_08ae:
	move.b	lives_counter_p1_8814,d0        	| [ld   a,(lives_counter_p1_8814)]
	and.b	#0x7F,d0                         	| [and  $7F]
	move.b	d0,d1                           	| [ld   b,a]
	move.b	lives_counter_p2_8815,d0      	| [ld   a,($lives_counter_p2_8815)]
	and.b	#0x7F,d0                         	| [and  $7F]
	move.b	d0,d2                           	| [ld   c,a]
	add.b	d1,d0                            	| [add  a,b]
	bne.b	0f
	rts                                    	| [ret  z]
0:
l_08bc:
	btst.b	#0,(a0)                         	| [bit  0,(hl)]
	jne	l_08c7                             	| [jr   nz,$08C7]
	move.b	d1,d0                           	| [ld   a,b]
	tst.b	d0                               	| [and  a]
	jne	l_08ce                             	| [jr   nz,$08CE]
	addq.b	#1,(a0)                         	| [inc  (hl)]
	jra	l_08bc                             	| [jr   $08BC]
l_08c7:
	move.b	d2,d0                           	| [ld   a,c]
	tst.b	d0                               	| [and  a]
	jne	l_08ce                             	| [jr   nz,$08CE]
	addq.b	#1,(a0)                         	| [inc  (hl)]
	jra	l_08bc                             	| [jr   $08BC]
l_08ce:
										| [call $2878] cocktail mode
	jbsr	play_one_life_08D6                	| [call play_one_life_08D6]
	jra	l_089f                             	| [jr   $089F]

play_one_life_08D6:
	lea	player_number_8816(pc),a0          	| [ld   hl,player_number_8816]
	btst.b	#7,(a0)                         	| [bit  7,(hl)]
	jne	l_08e4                             	| [jr   nz,$08E4]
	move.b	(a0),d0                         	| [ld   a,(hl)]
	and.b	#0x7F,d0                         	| [and  $7F]
	jeq	run_one_life_092D                  	| [jr   z,run_one_life_092D]
	jra	l_08f0                             	| [jr   $08F0]
l_08e4:
	btst.b	#0,(a0)                         	| [bit  0,(hl)]
	beq	0f
	jbsr	swap_players_0EC4                 	| [call nz,swap_players_0EC4]
0:
	move.b	player_number_8816,d0           	| [ld   a,(player_number_8816)]
	and.b	#0x7E,d0                         	| [and  $7E]
	jeq	run_one_life_092D                  	| new game? [jr   z,run_one_life_092D]
 * restart after having died
l_08f0:
	jbsr	clear_screen_and_colors_28E5      	| [call clear_screen_and_colors_28E5]
	jbsr	clear_sprites_31B7                	| [call clear_sprites_31B7]
	jbsr	update_all_scores_2B10            	| [call update_all_scores_2B10]
	jbsr	draw_status_bar_2C76              	| [call draw_status_bar_2C76]
	jbsr	draw_lives_2D0C                   	| [call draw_lives_2D0C]
	jbsr	display_eggs_2D4B                 	| [call display_eggs_2D4B]
	jbsr	display_player_ready_0F76         	| [call display_player_ready_0F76]
	jbsr	draw_borders_2E5D                 	| [call draw_borders_2E5D]
	jbsr	l_0e77                            	| [call $0E77]
	move.b	#0x09,d0                        	| [ld   a,$09]
	move.b	d0,cursor_color_8802            	| [ld   (cursor_color_8802),a]
	move.w	diamond_block_1_xy_8DB0,d2  	| [ld   bc,(diamond_block_1_xy_8DB0)]
	move.w	diamond_block_1_xy_8DB0+1,d1  	| [ld   bc,(diamond_block_1_xy_8DB0)]
	jbsr	set_diamond_position_2FA9         	| [call set_diamond_position_2FA9]
	move.w	diamond_block_2_xy_8DB2,d2  	| [ld   bc,(diamond_block_2_xy_8DB2)]
	move.w	diamond_block_2_xy_8DB2+1,d1  	| [ld   bc,(diamond_block_2_xy_8DB2)]
	jbsr	set_diamond_position_2FA9         	| [call set_diamond_position_2FA9]
	move.w	diamond_block_3_xy_8DB4,d2  	| [ld   bc,(diamond_block_3_xy_8DB4)]
	move.w	diamond_block_3_xy_8DB4+1,d1  	| [ld   bc,(diamond_block_3_xy_8DB4)]
	jbsr	set_diamond_position_2FA9         	| [call set_diamond_position_2FA9]
	jbsr	l_0d66                            	| [call $0D66]
	jbsr	l_0dd0                            	| [call $0DD0]
	jra	l_09a0                             	| [jr   $09A0]

* runs until pengo is killed, then returns
run_one_life_092D:
	jbsr	get_level_number_288F             	| [call get_level_number_288F]
	cmp.b	#0x11,d0                         	| [cp   $11]
* reset level number after level 16
* no increase of the difficulty level!!!!
	jne	l_0937                             	| [jr   nz,$0937]
	move.b	#0x01,d0                        	| [ld   a,$01]
	move.b	d0,(a0)                         	| [ld   (hl),a]

* compute number of eggs/enemies
* levels 1-2 -> 6
* levels 3-7 -> 8
* levels 8-11 -> 10
* levels 12-16 -> 12

l_0937:
	move.b	#0x06,d1                        	| [ld   b,$06]
	cmp.b	#0x03,d0                         	| [cp   $03]
	jcs	l_094b                             	| [jr   c,$094B]
	move.b	#0x08,d1                        	| [ld   b,$08]
	cmp.b	#0x08,d0                         	| [cp   $08]
	jcs	l_094b                             	| [jr   c,$094B]
	move.b	#0x0A,d1                        	| [ld   b,$0A]
	cmp.b	#0x0C,d0                         	| [cp   $0C]
	jcs	l_094b                             	| [jr   c,$094B]
	move.b	#0x0C,d1                        	| [ld   b,$0C]
l_094b:
	move.b	d1,d0                           	| [ld   a,b]
	move.b	d0,total_eggs_to_hatch_8DC0     	| [ld   (total_eggs_to_hatch_8DC0),a]
	move.b	d0,current_nb_eggs_to_hatch_8DDD	| [ld   (current_nb_eggs_to_hatch_8DDD),a]
	move.b	d0,remaining_alive_snobees_8D98 	| [ld   (remaining_alive_snobees_8D98),a]
	lea	snobee_1_struct_8D00+5(pc),a0      	| [ld   hl,snobee_1_struct_8D00+5]
	move.b	#0x01,(a0)                      	| [ld   (hl),$01]
	add.w	#0x20,a0							| [add  hl,de]
	move.b	#0x02,(a0)                      	| [ld   (hl),$02]
	add.w	#0x20,a0							| [add  hl,de]
	move.b	#0x03,(a0)                      	| [ld   (hl),$03]
	add.w	#0x20,a0							| [add  hl,de]
	move.b	#0x04,(a0)                      	| [ld   (hl),$04]
	lea	pengo_struct_8D80+5(pc),a0         	| [ld   hl,pengo_struct_8D80+5]
	move.b	#0x05,(a0)                      	| [ld   (hl),$05]
	lea	moving_block_struct_8DA0+5(pc),a0  	| [ld   hl,moving_block_struct_8DA0+5]
	move.b	#0x06,(a0)                      	| [ld   (hl),$06]
	jbsr	clear_screen_and_colors_28E5      	| [call clear_screen_and_colors_28E5]
	jbsr	clear_sprites_31B7                	| [call clear_sprites_31B7]
	jbsr	update_all_scores_2B10            	| [call update_all_scores_2B10]
	move.b	currently_playing_8819,d0       	| [ld   a,(currently_playing_8819)]
	tst.b	d0                               	| [and  a]
	jeq	l_0985                             	| [jr   z,$0985]
	jbsr	draw_status_bar_2C76              	| [call draw_status_bar_2C76]
	jbsr	draw_lives_2D0C                   	| [call draw_lives_2D0C]
l_0985:
	jbsr	init_snobee_positions_31EF        	| [call init_snobee_positions_31EF]
	jbsr	init_moving_block_3283            	| [call init_moving_block_3283]
	jbsr	l_32ab                            	| [call $32AB]
	jbsr	init_pengo_structure_31C2         	| [call init_pengo_structure_31C2]
	jbsr	draw_maze_2DA1                    	|  draw the maze [call draw_maze_2DA1]
	move.b	#0x20,d0                        	| [ld   a,$20]
	move.w	#0x8000,d6
	bsr		osd_w_videoram		       	| [ld   (video_tile_memory_8000),a]
	clr.b	d0                               	| [xor  a]
* zero minutes and seconds for round completion time
	move.b	d0,pengo_struct_8D80+0x12       	| [ld   (pengo_struct_8D80+$12),a]
	move.b	d0,pengo_struct_8D80+0x13       	| [ld   (pengo_struct_8D80+$13),a]

l_09a0:
	jbsr	l_0d44                            	| [call $0D44]
	lea	pengo_struct_8D80(pc),a2           	| [ld   ix,pengo_struct_8D80]
	jbsr	display_snobee_sprite_33CE        	| [call display_snobee_sprite_33CE]
	jbsr	display_character_sprite_39AB     	| [call display_character_sprite_39AB]
	jbsr	get_div8_ix_coords_3E78           	| [call get_div8_ix_coords_3E78]
	jbsr	clear_2x2_tiles_at_current_pos_43A9	| [call clear_2x2_tiles_at_current_pos_43A9]
	st.b	d1                                	| stop sound [ld   b,$FF]
	jbsr	play_sfx_1889                     	| [call play_sfx_1889]
	move.b	#0x02,d1                        	| start music [ld   b,$02]
	jbsr	play_sfx_1889                     	| [call play_sfx_1889]

	move.b	#0x40,d0                        	| [ld   a,$40]
	jbsr	delay_28D1                        	|  intro music? [call delay_28D1]
l_09cb:
	move.b	sound_channel_0_struct_8C60,d0  	| [ld   a,(sound_channel_0_struct_8C60)]
	tst.b	d0                               	| [and  a]
	jne	l_09cb                             	| [jr   nz,$09CB]
* set state to 6 (start, normal mode)
* others modes: 4: fast music, 3: fast music, enemies giving up
	move.b	#0x06,d0                        	| [ld   a,$06]
	move.b	d0,game_phase_8CBB              	| [ld   (game_phase_8CBB),a]
	clr.b	d0                               	| [xor  a]
	lea	time_counter_8C5B(pc),a0           	| [ld   hl,time_counter_8C5B]
	move.b	d0,(a0)                         	| [ld   (hl),a]
	addq.w	#1,a0                           	| [inc  hl]
	move.b	d0,(a0)                         	| [ld   (hl),a]
	addq.w	#1,a0                           	| [inc  hl]
	move.b	d0,(a0)                         	| [ld   (hl),a]
* a timer which is used for instance for egg blink
	lea	timer_16_bit_8DDE(pc),a0           	| [ld   hl,timer_16_bit_8DDE]
	move.b	#0x08,(a0)                      	| [ld   (hl),$08]
	addq.w	#1,a0                           	| [inc  hl]
	move.b	#0x80,(a0)                      	| [ld   (hl),$80]

main_game_loop_09E7:
	move.b	sound_channel_0_struct_8C60,d0  	| [ld   a,(sound_channel_0_struct_8C60)]
	tst.b	d0                               	| [and  a]
	jne	l_09f4                             	| [jr   nz,$09F4]

	bsr		osd_disable_vblank_interrupt      | [di]
	move.b	#0x08,d1                        	| play in-game music [ld   b,$08]
	jbsr	play_sfx_1889                     	| [call play_sfx_1889]
	jbsr		osd_enable_vblank_interrupt    | [ei]

l_09f4:
	jbsr	increase_counter_0875             	| [call increase_counter_0875]
	jbsr	l_330e                            	|  timer to animate snobees when pengo killed [call $330E]
	jbsr	l_3314                            	|  timer to end the level (and if 1 or 0 snobee make it disappear...) [call $3314]
	jbsr	l_331a                            	|  ??? something to do with eggs hatching... [call $331A]
	jbsr	l_3320                            	|  ??? [call $3320]
	jbsr	pengo_moves_3D73                  	| [call pengo_moves_3D73]
	jbsr	pengo_block_push_41BE             	| [call pengo_block_push_41BE]
	jbsr	snobee_block_break_4919           	| [call snobee_block_break_4919]
	jbsr	l_4b0c                            	|  ??? [call $4B0C]
	jbsr	blink_on_egg_locations_4B48       	| [call blink_on_egg_locations_4B48]
	jbsr	handle_pengo_snobee_collisions_4BE6	| [call handle_pengo_snobee_collisions_4BE6]
	jbsr	handle_pengo_eats_stunned_snobees_4C55	| [call handle_pengo_eats_stunned_snobees_4C55]
* check player state (alive/dead)
	move.b	pengo_struct_8D80+ai_mode,d0       	| [ld   a,(pengo_struct_8D80+$1E)]
	btst.b	#7,d0                           	| [bit  7,a]
	jne	player_dies_0CD2                   	| [jp   nz,player_dies_0CD2]
	move.b	remaining_alive_snobees_8D98,d0 	| [ld   a,(remaining_alive_snobees_8D98)]
	tst.b	d0                               	| [and  a]
	jne	main_game_loop_09E7                	| [jr   nz,main_game_loop_09E7]
	jbsr	l_0bdd                            	|  ??? [call $0BDD]
	tst.b	d7
	jne	main_game_loop_09E7                	| [jr   c,main_game_loop_09E7]

level_completed_0A2B:
	move.b	#0x04,d1                        	| level completed sound [ld   b,$04]
	jbsr	play_sfx_1889                     	| [call play_sfx_1889]

	bsr		osd_disable_vblank_interrupt

	lea	pengo_struct_8D80(pc),a2           	| [ld   ix,pengo_struct_8D80]
	move.b	elapsed_seconds_since_start_of_round_8C5C,d0	| [ld   a,(elapsed_seconds_since_start_of_round_8C5C)]
	add.b	(0x12,a2),d0                     	| [add  a,(ix+$12)]
	clr.b	d1                               	| [ld   b,$00]
	cmp.b	#0x3C,d0                         	| [cp   $3C]
	jcs	l_0a45                             	| [jr   c,$0A45]
	sub.b	#0x3C,d0                         	| [sub  $3C]
	move.b	#0x01,d1                        	| [ld   b,$01]
l_0a45:
	move.b	d0,(0x12,a2)                    	| [ld   (ix+$12),a]
	move.b	elapsed_minutes_since_start_of_round_8C5D,d0	| [ld   a,(elapsed_minutes_since_start_of_round_8C5D)]
	add.b	(0x13,a2),d0                     	| [add  a,(ix+$13)]
	add.b	d1,d0                            	| [add  a,b]
	move.b	d0,(0x13,a2)                    	| [ld   (ix+$13),a]

	jbsr		osd_enable_vblank_interrupt
	jbsr	clear_maze_and_borders_0C39       	| [call clear_maze_and_borders_0C39]
	jbsr	pengo_walks_out_the_screen_0C55   	| [call pengo_walks_out_the_screen_0C55]
	jbsr	draw_lives_2D0C                   	| [call draw_lives_2D0C]
* prints times and associated bonuses
	lea	text_start_0B20(pc),a0             	| [ld   hl,text_start_0B20]
	jbsr	print_line_typewriter_style_29F4  	| [call print_line_typewriter_style_29F4]
	lea	text_start_0B20+0x1B(pc),a0        	| [ld   hl,text_start_0B20+$1B]
	jbsr	print_line_typewriter_style_29F4  	| [call print_line_typewriter_style_29F4]
	lea	text_start_0B20+0x36(pc),a0        	| [ld   hl,text_start_0B20+$36]
	jbsr	print_line_typewriter_style_29F4  	| [call print_line_typewriter_style_29F4]
	lea	text_start_0B20+0x51(pc),a0        	| [ld   hl,text_start_0B20+$51]
	jbsr	print_line_typewriter_style_29F4  	| [call print_line_typewriter_style_29F4]
	lea	text_start_0B20+0x6C(pc),a0        	| [ld   hl,text_start_0B20+$6C]
	jbsr	print_line_typewriter_style_29F4  	| [call print_line_typewriter_style_29F4]
	lea	text_start_0B20+0x87(pc),a0        	| [ld   hl,text_start_0B20+$87]
	jbsr	print_line_typewriter_style_29F4  	| [call print_line_typewriter_style_29F4]
	lea	text_start_0B20+0xA2(pc),a0        	| [ld   hl,text_start_0B20+$A2]
	jbsr	print_line_typewriter_style_29F4  	| [call print_line_typewriter_style_29F4]
	move.b	#0x20,d0                        	| [ld   a,$20]
	jbsr	delay_28D1                        	| [call delay_28D1]
	move.b	pengo_struct_8D80+0x13,d0       	| round time (minutes) [ld   a,(pengo_struct_8D80+$13)]
	clr.w	d6                               	| [ld   h,$00]
	move.b	d0,d6                           	| [ld   l,a]
	jbsr	convert_number_2B40               	| [call convert_number_2B40]
	move.b	#0x03,d5                        	| [ld   h,$03]
	move.b	#0x0C,d6                        	| [ld   l,$0C]
	bsr		set_current_cursor_from_hl        	| [ld   (cursor_x_8800),hl]
	move.b	#0x10,d0                        	| [ld   a,$10]
	move.b	d0,cursor_color_8802            	| [ld   (cursor_color_8802),a]
	jbsr	write_2_digits_to_screen_2C6F     	| [call write_2_digits_to_screen_2C6F]
	move.b	pengo_struct_8D80+0x12,d0       	| round time (seconds) [ld   a,(pengo_struct_8D80+$12)]
	clr.w	d6                               	| [ld   h,$00]
	move.b	d0,d6                           	| [ld   l,a]
	jbsr	convert_number_2B40               	| [call convert_number_2B40]
	move.b	#0x03,d5                        	| [ld   h,$03]
	move.b	#0x13,d6                        	| [ld   l,$13]
	bsr		set_current_cursor_from_hl        	| [ld   (cursor_x_8800),hl]
	jbsr	write_2_digits_to_screen_2C6F     	| [call write_2_digits_to_screen_2C6F]
	move.b	#0x20,d0                        	| [ld   a,$20]
	jbsr	delay_28D1                        	| [call delay_28D1]
	move.b	#0x02,d6                        	| [ld   l,$02]
	move.b	#0x10,d5                        	| [ld   h,$10]
	clr.w	d3                      	| [ld   de,$0000]
	move.b	(0x13,a2),d0                    	| [ld   a,(ix+$13)]
	tst.b	d0                               	| [and  a]
	jne	l_0afb                             	| [jr   nz,$0AFB]
	move.b	#0x01,d1                        	| [ld   b,$01]
	jbsr	sound_18AF                            	| [call $18AF]
	move.b	#0x02,d6                        	| [ld   l,$02]
	move.b	#0x0E,d5                        	| [ld   h,$0E]
	move.w	#1,d3	                      	| [ld   de,$0001]
	move.b	(0x12,a2),d0                    	| [ld   a,(ix+$12)]
	cmp.b	#0x32,d0                         	| [cp   $32]
	jcc	l_0afb                             	| [jr   nc,$0AFB]
	move.b	#0x0C,d5                        	| [ld   h,$0C]
	move.w	#0x32,d3                      	| [ld   de,$0032]
	cmp.b	#0x28,d0                         	| [cp   $28]
	jcc	l_0afb                             	| [jr   nc,$0AFB]
	move.b	#0x0A,d5                        	| [ld   h,$0A]
	move.w	#0x64,d3                      	| [ld   de,$0064]
	cmp.b	#0x1E,d0                         	| [cp   $1E]
	jcc	l_0afb                             	| [jr   nc,$0AFB]
	move.b	#0x08,d5                        	| [ld   h,$08]
	move.w	#0xC8,d3                      	| [ld   de,$00C8]
	cmp.b	#0x14,d0                         	| [cp   $14]
	jcc	l_0afb                             	| [jr   nc,$0AFB]
	move.b	#0x06,d5                        	| [ld   h,$06]
	move.w	#0x1C4,d3                      	| [ld   de,$01F4]
l_0afb:
	move.l	a1,-(sp)                        	| [push de]
	move.b	#0x18,d0                        	| [ld   a,$18]
	bsr		set_current_cursor_from_hl        	| [ld   (cursor_x_8800),hl]
	move.b	#0x18,d1                        	| [ld   b,$18]
l_0b03:
	jbsr	set_attribute_at_current_pos_292D 	| [call set_attribute_at_current_pos_292D]
	subq.b	#1,d1                           	| [...]
	jne	l_0b03                             	| [djnz $0B03]
	move.l	(sp)+,a1                        	| [pop  de]
	jbsr	add_to_current_player_score_28AF                            	| [call $28AF]
	move.b	#0x80,d0                        	| [ld   a,$80]
	jbsr	delay_28D1                        	| [call delay_28D1]
	jbsr	get_level_number_288F             	| [call get_level_number_288F]
	and.b	#0x01,d0                         	| [and  $01]
	bne	0f
	jbsr	pengo_intermission_or_title_1D29  	| level number is even; call pengo intermission [call z,pengo_intermission_or_title_1D29]
0:
	jbsr	get_level_number_288F             	| [call get_level_number_288F]
	addq.b	#1,(a0)                         	| [inc  (hl)]
	jra	run_one_life_092D                  	| [jp   run_one_life_092D]

text_start_0B20:
	.byte	0x02,0x03,0x18,0x47,0x41,0x4D,0x45,0x20,0x54,0x49,0x4D,0x45,0x20,0x20,0x20,0x20  	 |	...GAME TIME
	.byte	0x4D,0x49,0x4E,0x3A,0x20,0x20,0x20,0x53,0x45,0x43,0xBA,0x02,0x06,0x11,0x46,0x52  	 |	MIN:   SECº...FR
	.byte	0x4F,0x4D,0x20,0x30,0x30,0x20,0x54,0x4F,0x20,0x31,0x39,0x20,0x3A,0x35,0x30,0x30  	 |	OM,0x00 TO,0x19 :500
	.byte	0x30,0x20,0x50,0x54,0x53,0xBA,0x02,0x08,0x11,0x46,0x52,0x4F,0x4D,0x20,0x32,0x30  	 |	0 PTSº...FROM,0x20
	.byte	0x20,0x54,0x4F,0x20,0x32,0x39,0x20,0x3A,0x32,0x30,0x30,0x30,0x20,0x50,0x54,0x53  	 |	 TO,0x29 :2000 PTS
	.byte	0xBA,0x02,0x0A,0x11,0x46,0x52,0x4F,0x4D,0x20,0x33,0x30,0x20,0x54,0x4F,0x20,0x33  	 |	º...FROM,0x30 TO 3
	.byte	0x39,0x20,0x3A,0x31,0x30,0x30,0x30,0x20,0x50,0x54,0x53,0xBA,0x02,0x0C,0x11,0x46  	 |	9 :1000 PTSº...F
	.byte	0x52,0x4F,0x4D,0x20,0x34,0x30,0x20,0x54,0x4F,0x20,0x34,0x39,0x20,0x3A,0x3A,0x35  	 |	ROM,0x40 TO,0x49 ::5
	.byte	0x30,0x30,0x20,0x50,0x54,0x53,0xBA,0x02,0x0E,0x11,0x46,0x52,0x4F,0x4D,0x20,0x35,0x00 | 	PTSº...FROM 5
	.byte	0x30,0x20,0x54,0x4F,0x20,0x35,0x39,0x20,0x3A,0x3A,0x3A,0x31,0x30,0x20,0x50,0x54  	 |	 0 TO 59 :::10 PT
	.byte	0x53,0xBA,0x02,0x10,0x11,0x36,0x30,0x20,0x41,0x4E,0x44,0x20,0x4F,0x56,0x45,0x52  	 |	 Sº...60 AND OVER
	.byte	0x20,0x20,0x20,0x20,0x4E,0x4F,0x20,0x42,0x4F,0x4E,0x55,0x53,0xBA      			 	 |	 NO BONUSº

	.align	2

l_0bdd:
	jbsr	l_0bec                            	| [call $0BEC]
l_0be0:
	jbsr	l_0bf9                            	| [call $0BF9]
	beq.b	0f
	rts                                    	| [ret  c]
0:
	jbsr	l_0c1e                            	| [call $0C1E]
	beq.b	0f
	rts                                    	| [ret  c]
0:
	jbsr	l_0c26                            	| [call $0C26]
	rts                                    	| [ret]

l_0bec:
	lea	pengo_struct_8D80+char_state,a0	| [ld   hl,pengo_struct_8D80+char_state]
	move.b	(a0),d0                         	| [ld   a,(hl)]
	cmp.b	#0x02,d0                         	| [cp   $02]
	jcs	l_0bf8                             	| [jr   c,$0BF8]
	jne	l_0bf8                             	| [jr   nz,$0BF8]
	move.b	#0x01,(a0)                      	| [ld   (hl),$01]
l_0bf8:
	rts                                    	| [ret]
	
l_0bf9:
	lea	snobee_1_struct_8D00+char_state,a0	| [ld   hl,snobee_1_struct_8D00+char_state]
	move.w	#0x20,d3                      	| [ld   de,$0020]
	move.b	#0x04,d1                        	| [ld   b,$04]
l_0c01:
	move.b	(a0),d0                         	| [ld   a,(hl)]
	cmp.b	#0x02,d0                         	| [cp   $02]
	jcs	l_0c0a                             	| [jr   c,$0C0A]
	jne	l_0c0a                             	| [jr   nz,$0C0A]
	move.b	#0x01,(a0)                      	| [ld   (hl),$01]
l_0c0a:
	add.w	d3,a0							| [add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_0c01                             	| [djnz $0C01]
	lea	snobee_1_struct_8D00+char_state,a0	| [ld   hl,snobee_1_struct_8D00+char_state]
	move.b	#0x04,d1                        	| [ld   b,$04]
l_0c12:
	move.b	(a0),d0                         	| [ld   a,(hl)]
	cmp.b	#0x03,d0                         	| [cp   $03]
	jcs	l_0c19                             	| [jr   c,$0C19]
	st		d7								| [scf]		 set carry flag
	rts                                    	| [ret]
	
l_0c19:
	add.w	d3,a0							| [add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_0c12                             	| [djnz $0C12]
										| [and  a]
	clr.b	d7							| clears carry
	rts                                    	| [ret]
l_0c1e:
	lea	block_moving_flag_8DBF,a0      	| [ld   hl,block_moving_flag_8DBF]
	move.b	(a0),d0                         	| [ld   a,(hl)]
	tst.b	d0                               	| [and  a]
	bne.b	0f
	clr.b	d7
	rts                                    	| [ret  z]
0:
	st.b	d7	| scf		; set carry flag
	rts                                    	| [ret]

* start from second slot
l_0c26:
	lea	breaking_block_slots_8CC0+5(pc),a0 	| [ld   hl,breaking_block_slots_8CC0+5]
										| [ld   de,$0006]
	move.b	#0x04,d1                        	| [ld   b,$04]
l_0c2e:
	move.b	(a0),d0                         	| [ld   a,(hl)]
	tst.b	d0                               	| [and  a]
	jne	l_0c37                             	| [jr   nz,$0C37]
	add.w	#6,a0							| [add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_0c2e                             	| [djnz $0C2E]
	tst.b	d0                               	| [and  a]
	clr.b	d7
	rts                                    	| [ret]
l_0c37:
	st.b	d7   | [scf]
	rts                                    	| [ret]

clear_maze_and_borders_0C39:
	move.b	#0x20,d1                        	| [ld   b,$20]
l_0c3b:
	move.w	d1,-(sp)                        	| [push bc]
	move.b	#0x20,d0                        	| [ld   a,$20]
	sub.b	d1,d0                            	| [sub  b]
	addq.b	#1,d0                           	| [inc  a]
	move.b	d0,d1                           	| [ld   b,a]
	clr.b	d2                               	| [ld   c,$00]
	move.b	d1,cursor_x_8800                	| [ld   (cursor_x_8800),bc]
	move.b	d0,cursor_y_8801                	| [ld   (cursor_x_8800),bc]
	clr.b	d0                               	| [ld   a,$00]
	jbsr	draw_attribute_line_2F30          	| [call draw_attribute_line_2F30]
	move.b	#0x01,d0                        	| [ld   a,$01]
	jbsr	delay_28D1                        	| [call delay_28D1]
	move.w	(sp)+,d1                        	| [pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_0c3b                             	| [djnz $0C3B]
	rts                                    	| [ret]

* once level is completed, depending on the initial X,
* pengo leaves the screen, and sometimes falls

pengo_walks_out_the_screen_0C55:
	lea	pengo_struct_8D80(pc),a2           	| [ld   ix,pengo_struct_8D80]
	move.b	(x_pos,a2),d0                   	| [ld   a,(ix+x_pos)]
* choose the shortest path to leave the screen
	move.b	#0x02,(facing_direction,a2)     	| facing direction: right [ld   (ix+facing_direction),$02]
	cmp.b	#0x80,d0                         	| [cp   $80]
	jcc	l_0c68                             	| > 128 keep right [jr   nc,$0C68]
	move.b	#0x03,(facing_direction,a2)     	| facing direction: right [ld   (ix+facing_direction),$03]
l_0c68:
	move.b	#0x0F,(instant_move_period,a2)  	| [ld   (ix+instant_move_period),$0F]
	move.b	#0xFF,(0x08,a2)                 	| [ld   (ix+$08),$FF]
l_0c70:
	jbsr	increase_counter_0875             	| [call increase_counter_0875]
* small cpu-dependent loop
	move.b	#0x80,d1                        	| [ld   b,$80]
l_0c75:
	subq.b	#1,d1                           	| [...]
	jne	l_0c75                             	| [djnz $0C75]
	jbsr	animate_pengo_39A4                	| [call animate_pengo_39A4]
	addq.b	#1,(current_period_counter,a2)  	| [inc  (ix+current_period_counter)]
	move.b	(current_period_counter,a2),d0  	| [ld   a,(ix+current_period_counter)]
	cmp.b	(instant_move_period,a2),d0      	| [cp   (ix+instant_move_period)]
	jcs	l_0c70                             	| [jr   c,$0C70]
	clr.b	(current_period_counter,a2)      	| [ld   (ix+current_period_counter),$00]
	move.b	(x_pos,a2),d0                   	| [ld   a,(ix+x_pos)]
	tst.b	d0                               	| [and  a]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	cmp.b	#0xC8,d0                         	| going right and X=200? [cp   $C8]
	bne	0f
	jbsr	handle_pengo_stumble_0CA0         	| [call z,handle_pengo_stumble_0CA0]
0:
	move.b	(x_pos,a2),d0                   	| [ld   a,(ix+x_pos)]
	cmp.b	#0x28,d0                         	| [cp   $28]
	bne	0f
	jbsr	handle_pengo_stumble_0CB9         	| [call z,handle_pengo_stumble_0CB9]
0:
	jbsr	move_character_according_to_direction_3DD7	| [call move_character_according_to_direction_3DD7]
	jra	l_0c70                             	| [jr   $0C70]

handle_pengo_stumble_0CA0:
	move.b	(facing_direction,a2),d0        	| [ld   a,(ix+facing_direction)]
	cmp.b	#0x03,d0                         	| is pengo facing left? [cp   $03]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
* only when facing left
	jbsr	get_random_value_2D7C             	| [call get_random_value_2D7C]
	and.b	#0x01,d0                         	| [and  $01]
	bne.b	0f
	rts                                    	| [ret  z]
0:
* once out of 2, pengo stumbles/rests
	move.b	#0xE0,(animation_frame,a2)      	| [ld   (ix+animation_frame),$E0]
	jbsr	display_character_sprite_39AB     	| [call display_character_sprite_39AB]
	move.b	#0x40,d0                        	| [ld   a,$40]
	jbsr	delay_28D1                        	| [call delay_28D1]
	rts                                    	| [ret]

handle_pengo_stumble_0CB9:
	move.b	(facing_direction,a2),d0        	| [ld   a,(ix+facing_direction)]
	cmp.b	#0x02,d0                         	| [cp   $02]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	jbsr	get_random_value_2D7C             	| [call get_random_value_2D7C]
	and.b	#0x01,d0                         	| [and  $01]
	bne.b	0f
	rts                                    	| [ret  z]
0:
* once out of 2, pengo stumbles/rests
	move.b	#0xE2,(animation_frame,a2)      	| [ld   (ix+animation_frame),$E2]
	jbsr	display_character_sprite_39AB     	| [call display_character_sprite_39AB]
	move.b	#0x40,d0                        	| [ld   a,$40]
	jbsr	delay_28D1                        	| [call delay_28D1]
	rts                                    	| [ret]

player_dies_0CD2:
	jbsr	l_0be0                            	| [call $0BE0]
	tst.b	d7
	jne	main_game_loop_09E7                	| [jp   c,main_game_loop_09E7]
	move.b	#0x05,d1                        	| [ld   b,$05]
	jbsr	play_sfx_1889                     	| player dies music [call play_sfx_1889]
	move.b	#0x06,d0                        	| [ld   a,$06]
	move.b	d0,pengo_struct_8D80+char_state 	| [ld   (pengo_struct_8D80+char_state),a]
l_0ce2:
	lea	pengo_struct_8D80(pc),a2           	| [ld   ix,pengo_struct_8D80]
	jbsr	pengo_dies_3FB3                            	| [call $3FB3]
	move.b	#0x06,d0                        	| [ld   a,$06]
	cmp.b	(char_state,a2),d0               	| [cp   (ix+char_state)]
	jeq	l_0ce2                             	| [jr   z,$0CE2]
	jbsr	osd_disable_vblank_interrupt	| [di]
	lea	pengo_struct_8D80(pc),a2           	| [ld   ix,pengo_struct_8D80]
	move.b	elapsed_seconds_since_start_of_round_8C5C,d0	| [ld   a,(elapsed_seconds_since_start_of_round_8C5C)]
	add.b	(0x12,a2),d0                     	| [add  a,(ix+$12)]
	clr.b	d1                               	| [ld   b,$00]
	cmp.b	#0x3C,d0                         	| [cp   $3C]
	jcs	l_0d05                             	| [jr   c,$0D05]
	sub.b	#0x3C,d0                         	| [sub  $3C]
	move.b	#0x01,d1                        	| [ld   b,$01]
l_0d05:
	move.b	d0,(0x12,a2)                    	| [ld   (ix+$12),a]
	move.b	elapsed_minutes_since_start_of_round_8C5D,d0	| [ld   a,(elapsed_minutes_since_start_of_round_8C5D)]
	add.b	(0x13,a2),d0                     	| [add  a,(ix+$13)]
	add.b	d1,d0                            	| [add  a,b]
	move.b	d0,(0x13,a2)                    	| [ld   (ix+$13),a]
	jbsr	osd_enable_vblank_interrupt	| [ei]
	clr.b	d0                               	| [ld   a,$00]
	move.b	d0,pengo_struct_8D80+0x1E     	| [ld   ($pengo_struct_8D80+$1E),a]
	jbsr	get_nb_lives_289E                 	| [call	get_nb_lives_289E]
	move.b	(a0),d0                         	| [ld   a,(hl)]
	subq.b	#1,d0                           	| [dec  a]
	move.b	d0,(a0)                         	| [ld   (hl),a]
	and.b	#0x7F,d0                         	| [and  $7F]
	jeq	l_0ed7                             	| [jp   z,$0ED7]
	move.b	currently_playing_8819,d0       	| [ld   a,(currently_playing_8819)]
	tst.b	d0                               	| [and  a]
	bne.b	0f
	rts                                    	| [ret  z]
0:
* called when game in play
	move.b	#0x80,d0                        	| [ld   a,$80]
	jbsr	delay_28D1                        	| [call delay_28D1]
	jbsr	clear_maze_and_borders_0C39       	| [call clear_maze_and_borders_0C39]
	jbsr	l_0e38                            	| [call $0E38]
	lea	player_number_8816(pc),a0          	| [ld   hl,player_number_8816]
	btst.b	#7,(a0)                         	| [bit  7,(hl)]
	jeq	l_0d41                             	| [jr   z,$0D41]
	addq.b	#1,(a0)                         	| [inc  (hl)]
	btst.b	#0,(a0)                         	| [bit  0,(hl)]
	bne	0f
	jbsr	swap_players_0EC4                 	| [call z,swap_players_0EC4]
0:
	rts                                    	| [ret]
l_0d41:
	addq.b	#1,(a0)                         	| [inc  (hl)]
	addq.b	#1,(a0)                         	| [inc  (hl)]
	rts                                    	| [ret]

l_0d44:
	jbsr	get_nb_lives_289E                 	| [call get_nb_lives_289E]
	cmp.b	#0x05,d0                         	| [cp   $05]
	bcs.b	0f
	rts                                    	| [ret  nc]
0:
	subq.b	#1,d0                           	| [dec  a]
	add.b	d0,d0                            	| [add  a,a]
	move.b	#0x23,d5                        	| [ld   h,$23]
	move.b	d0,d6                           	| [ld   l,a]
	bsr		set_current_cursor_from_hl        	| [ld   (cursor_x_8800),hl]
	move.w	d6,-(sp)                        	| [push hl]
	jbsr	put_blank_at_current_pos_2900     	| [call put_blank_at_current_pos_2900]
	jbsr	put_blank_at_current_pos_2900     	| [call put_blank_at_current_pos_2900]
	move.w	(sp)+,d6                        	| [pop  hl]
	clr.b	d5                               	| [ld   h,$00]
	bsr		set_current_cursor_from_hl        	| [ld   (cursor_x_8800),hl]
	jbsr	put_blank_at_current_pos_2900     	| [call put_blank_at_current_pos_2900]
	jbsr	put_blank_at_current_pos_2900     	| [call put_blank_at_current_pos_2900]
	rts                                    	| [ret]

l_0d66:
	lea	pengo_struct_8D80(pc),a2           	| [ld   ix,pengo_struct_8D80]
	lea	table_0D9D(pc),a0                  	| [ld   hl,table_0D9D]
l_0d6d:
	move.b	(a0)+,d2                         	| [ld   c,(hl)]
												| [inc  hl]
	move.b	(a0)+,d1                         	| [ld   b,(hl)]
											| [inc  hl]
	move.l	a0,-(sp)                        	| [push hl]
	jbsr	look_for_hidden_egg_300A          	| [call look_for_hidden_egg_300A]
	jne	l_0d9a                             	| [jr   c,$0D9A]
	jbsr	does_bc_match_a_diamond_block_xy_0daf                            	| [call $0DAF]
	jne	l_0d9a                             	| [jr   c,$0D9A]
	move.l	(sp)+,a0                        	| [pop  hl]
	move.b	d2,d0                           	| [ld   a,c]
	addq.b	#0x02,d0                        	| [add  a,$02]
	lsl.b	#3,d0                            	| [add  a,a]
												| [add  a,a]
												| [add  a,a]
	move.b	d0,(x_pos,a2)                   	| [ld   (ix+x_pos),a]
	move.b	d1,d0                           	| [ld   a,b]
	lsl.b	#3,d0                            	| [add  a,a]
												| [add  a,a]
												| [add  a,a]
	move.b	d0,(y_pos,a2)                   	| [ld   (ix+y_pos),a]
	move.b	#0x08,(animation_frame,a2)      	| [ld   (ix+animation_frame),$08]
	clr.b	(ai_mode,a2)                     	| [ld   (ix+ai_mode),$00]
	move.b	#0x01,(char_state,a2)           	| [ld   (ix+char_state),$01]
	rts                                    	| [ret]
l_0d9a:
	move.l	(sp)+,a0                        	| [pop  hl]
	jra	l_0d6d                             	| [jr   $0D6D]

table_0D9D:
	.byte	0x0D,0x0E,0x0D,0x0C,0x0D,0x10,0x0B,0x0E,0x0F,0x0E,0x0B,0x10,0x0F,0x10,0x0B,0x0C,0x0F,0x0C


does_bc_match_a_diamond_block_xy_0daf:
	move.w	d1,-(sp)                        	| [push bc]
	move.b	d2,d3
	lsl.w	#8,d3
	move.b	d1,d3                           	| [ld   d,b]
												| [ld   e,c]
	move.w	diamond_block_1_xy_8DB0,d6  	| [ld   hl,(diamond_block_1_xy_8DB0)]
	jbsr	compare_hl_to_de_2D99             	| [call compare_hl_to_de_2D99]
	jeq	l_0dcd                             	| [jr   z,$0DCD]
	move.w	diamond_block_2_xy_8DB2,d6  	| [ld   hl,(diamond_block_2_xy_8DB2)]
	jbsr	compare_hl_to_de_2D99             	| [call compare_hl_to_de_2D99]
	jeq	l_0dcd                             	| [jr   z,$0DCD]
	move.w	diamond_block_3_xy_8DB4,d6  	| [ld   hl,(diamond_block_3_xy_8DB4)]
	jbsr	compare_hl_to_de_2D99             	| [call compare_hl_to_de_2D99]
	jeq	l_0dcd                             	| [jr   z,$0DCD]
	move.w	(sp)+,d1                        	| [pop  bc]
	clr.b	d0                               	| [xor  a]
	clr.b	d7
	rts                                    	| [ret]
l_0dcd:
	move.w	(sp)+,d1                        	| [pop  bc]
	st.b	d7
	rts                                    	| [ret]

l_0dd0:
	lea	table_0E2C(pc),a0                  	| [ld   hl,table_0E2C]
	lea	snobee_1_struct_8D00(pc),a2        	| [ld   ix,snobee_1_struct_8D00]
	move.b	(char_state,a2),d0              	| [ld   a,(ix+char_state)]
	tst.b	d0                               	| [and  a]
	beq	0f
	jbsr	l_0e00                            	| [call nz,$0E00]
0:
	lea	snobee_2_struct_8D20(pc),a2        	| [ld   ix,snobee_2_struct_8D20]
	move.b	(char_state,a2),d0              	| [ld   a,(ix+char_state)]
	tst.b	d0                               	| [and  a]
	beq	0f
	jbsr	l_0e00                            	| [call nz,$0E00]
0:
	lea	snobee_3_struct_8D40(pc),a2        	| [ld   ix,snobee_3_struct_8D40]
	move.b	(char_state,a2),d0              	| [ld   a,(ix+char_state)]
	tst.b	d0                               	| [and  a]
	beq	0f
	jbsr	l_0e00                            	| [call nz,$0E00]
0:
	lea	snobee_4_struct_8D60(pc),a2        	| [ld   ix,snobee_4_struct_8D60]
	move.b	(char_state,a2),d0              	| [ld   a,(ix+char_state)]
	tst.b	d0                               	| [and  a]
	beq	0f
	jbsr	l_0e00                            	| [call nz,$0E00]
0:
	rts                                    	| [ret]

l_0e00:
	move.b	(a0),d2                         	| [ld   c,(hl)]
	addq.w	#1,a0                           	| [inc  hl]
	move.b	(a0),d1                         	| [ld   b,(hl)]
	addq.w	#1,a0                           	| [inc  hl]
	move.b	(a0),d3                         	| [ld   d,(hl)]
	addq.w	#1,a0                           	| [inc  hl]
	move.l	a0,-(sp)                        	| [push hl]
l_0e07:
	move.l	a1,-(sp)                        	| [push de]
	jbsr	convert_coords_to_screen_address_296F	| [call convert_coords_to_screen_address_296F]
	move.b	#0x20,d0                        	| [ld   a,$20]
	cmp.b	(a0),d0                          	| [cp   (hl)]
	jeq	l_0e16                             	| [jr   z,$0E16]
	move.l	(sp)+,a1                        	| [pop  de]
	move.b	d1,d0                           	| [ld   a,b]
	add.b	d3,d0                            	| [add  a,d]
	move.b	d0,d1                           	| [ld   b,a]
	jra	l_0e07                             	| [jr   $0E07]
l_0e16:
	move.l	(sp)+,a1                        	| [pop  de]
	move.b	d2,d0                           	| [ld   a,c]
	addq.b	#0x02,d0                        	| [add  a,$02]
	lsl.b	#3,d0                            	| [add  a,a]
											| [add  a,a]
											| [add  a,a]
	move.b	d0,(x_pos,a2)                   	| [ld   (ix+x_pos),a]
	move.b	d1,d0                           	| [ld   a,b]
	lsl.b	#3,d0                            	| [add  a,a]
											| [add  a,a]
											| [add  a,a]
	move.b	d0,(y_pos,a2)                   	| [ld   (ix+y_pos),a]
	jbsr	display_snobee_sprite_33CE        	| [call display_snobee_sprite_33CE]
	move.l	(sp)+,a0                        	| [pop  hl]
	rts                                    	| [ret]

table_0E2C:
	.byte	0x01,0x02,0x02,0x19,0x1E,0xFE,0x19,0x02,0x02,0x01,0x1E,0xFE


l_0e38:
	lea	unknown_8DE0,a0                	| [ld   hl,unknown_8DE0]
	move.b	#0x02,d1                        	| [ld   b,$02]
l_0e3d:
	move.w	d1,-(sp)                        	| [push bc]
	move.b	#0x0D,d2                        	| [ld   c,$0D]
l_0e40:
	move.w	d1,-(sp)                        	| [push bc]
	move.b	#0x02,d0                        	| [ld   a,$02]
	sub.b	d1,d0                            	| [sub  b]
	lsl.b	#4,d0                            	| [add  a,a]
												| [add  a,a]
												| [add  a,a]
												| [add  a,a]
	addq.b	#0x02,d0                        	| [add  a,$02]
	move.b	d0,d3                           	| [ld   d,a]
	move.b	#0x0D,d0                        	| [ld   a,$0D]
	sub.b	d2,d0                            	| [sub  c]
	add.b	d0,d0                            	| [add  a,a]
	addq.b	#0x01,d0                        	| [add  a,$01]
	move.b	d0,d4                           	| [ld   e,a]
	jbsr	l_0e5d                            	| [call $0E5D]
	move.w	(sp)+,d1                        	| [pop  bc]
	subq.b	#1,d2                           	| [dec  c]
	jne	l_0e40                             	| [jr   nz,$0E40]
	move.w	(sp)+,d1                        	| [pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_0e3d                             	| [djnz $0E3D]
	rts                                    	| [ret]

l_0e5d:
	clr.b	(a0)                             	| [ld   (hl),$00]
	move.b	#0x08,d1                        	| [ld   b,$08]
l_0e61:
	move.w	d1,-(sp)                        	| [push bc]
	move.w	d3,-(sp)                        	| [push de]
	move.b	d3,d1                           	| [ld   b,d]
	move.b	d4,d2                           	| [ld   c,e]
	move.l	a0,-(sp)                        	| [push hl]
	jbsr	convert_coords_to_screen_address_296F	| [call convert_coords_to_screen_address_296F]
	move.b	(a0),d0                         	| [ld   a,(hl)]
	move.l	(sp)+,a0                        	| [pop  hl]
	move.b	(a0),d3
	* cmp doesn't set X flag, sub does. We don't care about
	* d0 value so let's change it
	sub.b	#0x20,d0                         	| [cp   $20]
	roxl.b	#1,d3                         	| [rl   (hl)]
	move.b	d3,(a0)
	move.w	(sp)+,d3                        	| [pop  de]
	move.w	(sp)+,d1                        	| [pop  bc]
	addq.b	#2,d3                           	| [inc  d]
												| [inc  d]
	subq.b	#1,d1                           	| [...]
	jne	l_0e61                             	| [djnz $0E61]
	addq.w	#1,a0                           	| [inc  hl]
	rts                                    	| [ret]
l_0e77:
	clr.b	d0                               	| [ld   a,$00]
	move.b	d0,cursor_color_8802            	| [ld   (cursor_color_8802),a]
	lea	unknown_8DE0,a0                	| [ld   hl,unknown_8DE0]
	move.b	#0x02,d1                        	| [ld   b,$02]
l_0e81:
	move.w	d1,-(sp)                        	| [push bc]
	move.b	#0x0D,d2                        	| [ld   c,$0D]
l_0e84:
	move.w	d1,-(sp)                        	| [push bc]
	move.b	#0x0D,d0                        	| [ld   a,$0D]
	sub.b	d2,d0                            	| [sub  c]
	add.b	d0,d0                            	| [add  a,a]
	addq.b	#0x01,d0                        	| [add  a,$01]
	move.b	d0,d4                           	| [ld   e,a]
	move.b	d1,d0                           	| [ld   a,b]
	move.b	#0x02,d3                        	| [ld   d,$02]
	subq.b	#1,d0                           	| [dec  a]
	jeq	l_0e97                             	| [jr   z,$0E97]
	jbsr	l_0eab                            	| [call $0EAB]
	jra	l_0e9c                             	| [jr   $0E9C]
l_0e97:
	move.b	#0x12,d3                        	| [ld   d,$12]
	jbsr	l_0ea7                            	| [call $0EA7]
l_0e9c:
	move.w	(sp)+,d1                        	| [pop  bc]
	subq.b	#1,d2                           	| [dec  c]
	jne	l_0e84                             	| [jr   nz,$0E84]
	move.w	(sp)+,d1                        	| [pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_0e81                             	| [djnz $0E81]
	jbsr	show_maze_with_line_delay_effect_2F14	| [call show_maze_with_line_delay_effect_2F14]
	rts                                    	| [ret]

l_0ea7:
	move.b	#0x07,d1                        	| [ld   b,$07]
	jra	l_0ead                             	| [jr   $0EAD]
l_0eab:
	move.b	#0x08,d1                        	| [ld   b,$08]
l_0ead:
	movem.w	d1-d3,-(sp)                        	| [push bc]
												| [push de]
	bsr		set_current_cursor_from_bc                	| [ld   (cursor_x_8800),bc]
	move.b	(a0),d1
	roxl.b	#1,d1                         	| [rl   (hl)]
	move.b	d1,(a0)
	jcc	l_0ebc                             	| [jr   nc,$0EBC]
	move.l	a0,-(sp)                        	| [push hl]
	jbsr	draw_ice_block_tile_2EFE          	| [call draw_ice_block_tile_2EFE]
	move.l	(sp)+,a0                        	| [pop  hl]
l_0ebc:
	movem.w	(sp)+,d1-d3                        	| [pop  de]
												| [pop  bc]
	addq.b	#2,d3                           	| [inc  d]
	                           	| [inc  d]
	subq.b	#1,d1                           	| [...]
	jne	l_0ead                             	| [djnz $0EAD]
	addq.w	#1,a0                           	| [inc  hl]
	rts                                    	| [ret]

* restore the saved memory for characters (pengo+alive snobees)
swap_players_0EC4:
	lea	snobee_1_struct_8D00,a0        	| [ld   hl,snobee_1_struct_8D00]
	lea	backup_player_struct_8E00,a1   	| [ld   de,backup_player_struct_8E00]
	clr.b	d1                               	| [ld   b,$00]
l_0ecc:
	move.b	(a0),d0                         	| [ld   a,(hl)]
	move.w	d0,-(sp)                        	| [push af]
	move.b	(a1),d0                         	| [ld   a,(de)]
	move.b	d0,(a0)                         	| [ld   (hl),a]
	move.w	(sp)+,d0                        	| [pop  af]
	move.b	d0,(a1)                         	| [ld   (de),a]
	addq.w	#1,a0                           	| [inc  hl]
	addq.w	#1,a1                           	| [inc  de]
	subq.b	#1,d1                           	| [...]
	jne	l_0ecc                             	| [djnz $0ECC]
	rts                                    	| [ret]

l_0ed7:
	jbsr	clear_sprites_31B7                	| [call clear_sprites_31B7]
	move.b	#0x06,d1                        	| [ld   b,$06]
	jbsr	play_sfx_1889                     	| [call play_sfx_1889]
	lea	table_0F4C(pc),a0                  	| [ld   hl,table_0F4C]
	jbsr	erase_rectangular_char_zone_0F2E  	| [call erase_rectangular_char_zone_0F2E]
	lea	table_0F4C+0x51-0x4C(pc),a0                      	| [ld   hl,$0F51]
	move.b	player_number_8816,d0           	| [ld   a,(player_number_8816)]
	btst.b	#0,d0                           	| [bit  0,a]
	jeq	l_0ef2	                            	| [jr   z,$0EF2]
	lea	table_0F4C+0X5D-0x4C(pc),a0                      	| [ld   hl,$0F5D]
l_0ef2:
	jbsr	print_line_typewriter_style_29F4  	| [call print_line_typewriter_style_29F4]
	lea	table_0F4C+0x69-0x4C(pc),a0                      	| [ld   hl,$0F69]
	jbsr	print_line_typewriter_style_29F4  	| [call print_line_typewriter_style_29F4]
	move.b	#0x80,d0                        	| [ld   a,$80]
	jbsr	delay_28D1                        	| [call delay_28D1]
	jbsr	l_258f                            	| [call $258F]
	lea	player_number_8816(pc),a0          	| [ld   hl,player_number_8816]
	btst.b	#7,(a0)                         	| [bit  7,(hl)]
	jeq	l_0f11                             	| [jr   z,$0F11]
	addq.b	#1,(a0)                         	| [inc  (hl)]
	btst.b	#0,(a0)                         	| [bit  0,(hl)]
	bne	0f
	jbsr	swap_players_0EC4                 	| [call z,swap_players_0EC4]
0:
	rts                                    	| [ret]
l_0f11:
	addq.b	#2,(a0)                         	| [inc  (hl)]
	                         	| [inc  (hl)]
	move.w	#0x8400,d6                      	| [ld   hl,$8400]
	move.b	#0x04,d3                        	| [ld   d,$04]
	move.b	#0x2A,d4                        	| [ld   e,$2A]
	add.w	d3,d6							| [add  hl,de]
	jbsr		osd_r_colorram
	move.b	d0,d2                         	| [ld   c,(hl)]
	move.w	#0x8000,d6     	| [ld   hl,video_tile_memory_8000]
	st.b	d3                                	| [ld   d,$FF]
	move.b	#0xF0,d4                        	| [ld   e,$F0]
	add.w	d3,d6							| [add  hl,de]
	jbsr		osd_r_videoram
	cmp.b	d2,d0                            	| [cp   c]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	subq.b	#1,cursor_x_8800+1               	| [ld   hl,cursor_x_8800]
									| [dec  hl]
									| [ld   (hl),$FF]
	rts                                    	| [ret]

* erase chars & set fixed color attribute
erase_rectangular_char_zone_0F2E:
	move.b	(a0)+,d4                         	| [ld   e,(hl)]
	                           	| [inc  hl]
	move.b	(a0)+,d3                         	| [ld   d,(hl)]
	                           	| [inc  hl]
	move.b	(a0)+,d0                         	| [ld   a,(hl)]
	move.b	d0,cursor_color_8802            	| [ld   (cursor_color_8802),a]
	                           	| [inc  hl]
	move.b	(a0)+,d2                         	| [ld   c,(hl)]
	                           	| [inc  hl]
	move.b	(a0),d1                         	| [ld   b,(hl)]
l_0f3a:
	move.w	d1,-(sp)                        	| [push bc]
	movem.w	d3/d4,-(sp)                        	| [push de]
	move.b	d4,cursor_x_8800                	| [ld   (cursor_x_8800),de]
	move.b	d3,cursor_y_8801                	| [ld   (cursor_x_8800),de]
l_0f40:
	jbsr	put_blank_at_current_pos_2900     	| [call put_blank_at_current_pos_2900]
	subq.b	#1,d2                           	| [dec  c]
	jne	l_0f40                             	| [jr   nz,$0F40]
	movem.w	(sp)+,d3/d4                        	| [pop  de]
	move.w	(sp)+,d1                        	| [pop  bc]
	addq.b	#1,d3                           	| [inc  d]
	subq.b	#1,d1                           	| [...]
	jne	l_0f3a                             	| [djnz $0F3A]
	rts                                    	| [ret]

table_0F4C:
	.byte	0x08,0x0C,0x10,0x0C,0x05,0x09,0x0D,0x10,0x50,0x4C,0x41,0x59,0x45,0x52,0x20,0x20  | ..... ..PLAYER
	.byte	0xB1,0x09,0x0D,0x10,0x50,0x4C,0x41,0x59,0x45,0x52,0x20,0x20,0xB2,0x09,0x0F,0x10  | ± ..PLAYER  ² ..
	.byte	0x47,0x41,0x4D,0x45,0x20,0x20,0x4F,0x56,0x45,0xD2,0x21,0xE3,0x0F,0xB2,0x16,0x88  | GAME  OVEÒ!ã.²..


display_player_ready_0F76:
	lea	str_player_1_FE3(pc),a0            	| [ld   hl,str_player_1_FE3]
	move.b	player_number_8816,d0           	| [ld   a,(player_number_8816)]
	btst.b	#0,d0                           	| [bit  0,a]
	jeq	l_0f83                             	| [jr   z,$0F83]
	lea	str_player_2_FEE(pc),a0            	| [ld   hl,str_player_2_FEE]
l_0f83:
	jbsr	print_line_typewriter_style_29F4  	| [call print_line_typewriter_style_29F4]
	lea	str_ready_FF9(pc),a0               	| [ld   hl,str_ready_FF9]
	jbsr	print_line_typewriter_style_29F4  	| [call print_line_typewriter_style_29F4]
	move.b	#0x80,d0                        	| [ld   a,$80]
	jbsr	delay_28D1                        	| [call delay_28D1]
	lea	rect_dimensions_FDE(pc),a0         	| [ld   hl,rect_dimensions_FDE]
	jbsr	erase_rectangular_char_zone_0F2E  	| [call erase_rectangular_char_zone_0F2E]
	rts                                    	| [ret]
l_0f98:
	move.b	#0x10,d1                        	| [ld   b,$10]
	move.b	#0x09,d2                        	| [ld   c,$09]
	move.b	#0x05,d3                        	| [ld   d,$05]
	move.b	#0x0A,d4                        	| [ld   e,$0A]
	lea	maze_hole_wall_bit_table_8C27(pc),a0	| [ld   hl,maze_hole_wall_bit_table_8C27]
l_0fa3:
	movem.w	d3/d4,-(sp)                        	| [push de]
	move.w	d1,-(sp)                        	| [push bc]
l_0fa5:
	movem.w	d3/d4,-(sp)                        	| [push de]
	move.l	a0,-(sp)                        	| [push hl]
	jbsr	convert_coords_to_screen_address_296F	| [call convert_coords_to_screen_address_296F]
	move.b	(a0),d0                         	| [ld   a,(hl)]
	move.l	(sp)+,a0                        	| [pop  hl]
	move.b	d0,(a0)                         	| [ld   (hl),a]
	addq.w	#1,a0                           	| [inc  hl]
	addq.b	#1,d2                           	| [inc  c]
	movem.w	(sp)+,d3/d4                        	| [pop  de]
	subq.b	#1,d4                           	| [dec  e]
	jne	l_0fa5                             	| [jr   nz,$0FA5]
	move.w	(sp)+,d1                        	| [pop  bc]
	addq.b	#1,d1                           	| [inc  b]
	movem.w	(sp)+,d3/d4                        	| [pop  de]
	subq.b	#1,d3                           	| [dec  d]
	jne	l_0fa3                             	| [jr   nz,$0FA3]
	rts                                    	| [ret]
l_0fba:
	move.b	#0x10,d1                        	| [ld   b,$10]
	move.b	#0x09,d2                        	| [ld   c,$09]
	move.b	#0x05,d3                        	| [ld   d,$05]
	move.b	#0x0A,d4                        	| [ld   e,$0A]
	lea	maze_hole_wall_bit_table_8C27(pc),a0	| [ld   hl,maze_hole_wall_bit_table_8C27]
l_0fc5:
	movem.w	d3/d4,-(sp)                        	| [push de]
	move.w	d1,-(sp)                        	| [push bc]
l_0fc7:
	movem.w	d3/d4,-(sp)                        	| [push de]
	move.l	a0,-(sp)                        	| [push hl]
	move.b	(a0),d0                         	| [ld   a,(hl)]
	move.w	d0,-(sp)                        	| [push af]
	jbsr	convert_coords_to_screen_address_296F	| [call convert_coords_to_screen_address_296F]
	move.w	(sp)+,d0                        	| [pop  af]
	move.b	d0,(a0)                         	| [ld   (hl),a]
	move.l	(sp)+,a0                        	| [pop  hl]
	addq.w	#1,a0                           	| [inc  hl]
	addq.b	#1,d2                           	| [inc  c]
	movem.w	(sp)+,d3/d4                        	| [pop  de]
	subq.b	#1,d4                           	| [dec  e]
	jne	l_0fc7                             	| [jr   nz,$0FC7]
	move.w	(sp)+,d1                        	| [pop  bc]
	addq.b	#1,d1                           	| [inc  b]
	movem.w	(sp)+,d3/d4                        	| [pop  de]
	subq.b	#1,d3                           	| [dec  d]
	jne	l_0fc5                             	| [jr   nz,$0FC5]
	rts                                    	| [ret]

* control chars + PLAYER 1
rect_dimensions_FDE:
	dc.b	0x09,0x10,0x00,0x0A,0x05
str_player_1_FE3:
	dc.b	0x0A,0x11,0x10,0x50,0x4C,0x41,0x59,0x45,0x52,0x20,0xB1
str_player_2_FEE:
	dc.b	0x0A,0x11,0x10
	.ascii	"PLAYER "
	dc.b	0xB2		| 2 with bit 7 set
str_ready_FF9:
	dc.b	0x0B,0x13,0x10,0x52,0x45,0x41,0x44,0xD9		| READY
	.align	2
	
	

	
play_sfx_1889:
	move.w	d0,-(sp)
	clr		D0
	move.b	d1,d0
	bsr		osd_sound_start
	move.w	(sp)+,d0
	rts
	
sound_18AF:
	rts
	
update_sound_18c7:
	rts
	
enable_sound_18EC:
	jra		osd_sound_enable

disable_sound_18F2:
	jra		osd_sound_disable

* the main idea of this routine is to move characters automatically
* during non-playing parts of the game
pengo_intermission_or_title_1D29:
	move.b	#0x07,d1                        	| [ld   b,$07]
	jbsr	play_sfx_1889                     	| dance music [call play_sfx_1889]
	move.b	#0x40,d0                        	| [ld   a,$40]
	jbsr	delay_28D1                        	| [call delay_28D1]
	jbsr	init_all_characters_states_1D60   	| [call init_all_characters_states_1D60]
l_1d36:
	jbsr	increase_counter_0875             	| [call increase_counter_0875]
 * small active loop
	clr.b	d1                               	| [ld   b,$00]
l_1d3b:
	subq.b	#1,d1                           	| [...]
	jne	l_1d3b                             	| [djnz $1D3B]


* here we move 6 objects max: 6 pengos, using the ice block
* sprite structure
	jbsr	move_snobee_1_title_1DA2          	| [call move_snobee_1_title_1DA2]
	jbsr	move_snobee_2_title_1DA8          	| 2 [call move_snobee_2_title_1DA8]
	jbsr	move_snobee_3_title_1DAE          	| 3 [call move_snobee_3_title_1DAE]
	jbsr	move_snobee_4_title_1DB4          	| 4 [call move_snobee_4_title_1DB4]
	jbsr	move_character_following_path_1DBA	| pengo [call move_character_following_path_1DBA]
	jbsr	move_character_intermission_path_1DC0	| moving block [call move_character_intermission_path_1DC0]
	lea	moving_block_struct_8DA0(pc),a2    	| [ld   ix,moving_block_struct_8DA0]
	move.b	#0x05,d0                        	| [ld   a,$05]
	cmp.b	(char_state,a2),d0               	| [cp   (ix+char_state)]
	jne	l_1d36                             	| [jr   nz,$1D36]
	move.b	#0x40,d0                        	| [ld   a,$40]
	jbsr	delay_28D1                        	| [call delay_28D1]
	rts                                    	| [ret]

 * init snobees, pengo, and moving block to an empty state (0) and init sprites
 * used for title, intermission and ice pack screens, not in real game
init_all_characters_states_1D60:
	lea	snobee_1_struct_8D00(pc),a2        	| [ld   ix,snobee_1_struct_8D00]
	move.w	#0x20,d3                      	| [ld   de,$0020]
	clr.b	(char_state,a2)                  	| [ld   (ix+char_state),$00]
	move.b	#0x01,(char_id,a2)              	| [ld   (ix+char_id),$01]
	add.w	d3,a2								| [add  ix,de]
	clr.b	(char_state,a2)                  	| [ld   (ix+char_state),$00]
	move.b	#0x02,(char_id,a2)              	| [ld   (ix+char_id),$02]
	add.w	d3,a2								| [add  ix,de]
	clr.b	(char_state,a2)                  	| [ld   (ix+char_state),$00]
	move.b	#0x03,(char_id,a2)              	| [ld   (ix+char_id),$03]
	add.w	d3,a2								| [add  ix,de]
	clr.b	(char_state,a2)                  	| [ld   (ix+char_state),$00]
	move.b	#0x04,(char_id,a2)              	| [ld   (ix+char_id),$04]
	add.w	d3,a2								| [add  ix,de]
	clr.b	(char_state,a2)                  	| [ld   (ix+char_state),$00]
	move.b	#0x05,(char_id,a2)              	| [ld   (ix+char_id),$05]
	add.w	d3,a2								| [add  ix,de]
	clr.b	(char_state,a2)                  	| [ld   (ix+char_state),$00]
	move.b	#0x06,(char_id,a2)              	| [ld   (ix+char_id),$06]
	rts                                    	| [ret]

move_snobee_1_title_1DA2:
	lea	snobee_1_struct_8D00,a2        	| [ld   ix,snobee_1_struct_8D00]
	jra	l_1dc4                             	| [jr   $1DC4]

move_snobee_2_title_1DA8:
	lea	snobee_2_struct_8D20,a2        	| [ld   ix,snobee_2_struct_8D20]
	jra	l_1dc4                             	| [jr   $1DC4]

move_snobee_3_title_1DAE:
	lea	snobee_3_struct_8D40,a2        	| [ld   ix,snobee_3_struct_8D40]
	jra	l_1dc4                             	| [jr   $1DC4]

move_snobee_4_title_1DB4:
	lea	snobee_4_struct_8D60,a2        	| [ld   ix,snobee_4_struct_8D60]
	jra	l_1dc4                             	| [jr   $1DC4]

move_character_following_path_1DBA:
	lea	pengo_struct_8D80,a2           	| [ld   ix,pengo_struct_8D80]
	jra	l_1dc4                             	| [jr   $1DC4]

move_character_intermission_path_1DC0:
	lea	moving_block_struct_8DA0,a2    	| [ld   ix,moving_block_struct_8DA0]

l_1dc4:
	lea	table_1DF9(pc),a1                  	| [ld   de,table_1DF9]
	move.b	currently_playing_8819,d0       	| [ld   a,(currently_playing_8819)]
	tst.b	d0                               	| [and  a]
	jeq	l_1dda                             	| not playing, skip [jr   z,$1DDA]
	jbsr	get_level_number_288F             	| [call get_level_number_288F]
	lea	table_1DE1(pc),a1                  	| [ld   de,table_1DE1]
	cmp.b	#0x0A,d0                         	| [cp   $0A]
	jcs	l_1dda                             	| less than level 10 [jr   c,$1DDA]
* >= level 10
	lea	table_1DED(pc),a1                  	| table for level 10 and more [ld   de,table_1DED]
l_1dda:
	move.b	(char_state,a2),d0              	| get char to know where to jump [ld   a,(ix+char_state)]
	jra	indirect_jump_2D8F                 	| [jp   indirect_jump_2D8F]

do_nothing_1DE0:
	rts                                    	| [ret]

table_1DE1:
	.long	init_characters_for_intermission_1E05
	.long	do_nothing_1DE0
	.long	move_character_intermission_1EC4
	.long	how_to_dance_20DC
	.long	move_character_intermission_1EC4
	.long	do_nothing_1DE0
table_1DED:
	.long	move_during_title_screen_1E54
	.long	do_nothing_1DE0
	.long	move_character_intermission_1F52
	.long	do_nothing_1DE0
	.long	how_to_dance_20DC
	.long	do_nothing_1DE0
table_1DF9:
	.long	change_character_intermission_phase_1E9C
	.long	do_nothing_1DE0
	.long	move_character_intermission_1F90
	.long	move_character_intermission_204E
	.long	do_nothing_1DE0
	.long	do_nothing_1DE0


init_characters_for_intermission_1E05:
	clr.b	(x_pos,a2)                       	| left [ld   (ix+x_pos),$00]
	move.b	#0x98,(y_pos,a2)                	| center [ld   (ix+y_pos),$98]
	move.b	#0x08,(animation_frame,a2)      	| [ld   (ix+animation_frame),$08]
	move.b	(char_id,a2),d0                 	| [ld   a,(ix+char_id)]
*  differently colored pengos: yellow, cyan, yellow, pink, yellow
	addq.b	#2,d0                           	| [inc  a]
												| [inc  a]
	move.b	d0,(char_color,a2)              	| [ld   (ix+char_color),a]
	jbsr	init_characters_for_auto_mode_1E26	| [call init_characters_for_auto_mode_1E26]
	move.b	(char_id,a2),d0                 	| [ld   a,(ix+char_id)]
	cmp.b	#0x01,d0                         	| [cp   $01]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	addq.b	#1,(char_state,a2)              	| [inc  (ix+char_state)]
	rts                                
	
init_characters_for_auto_mode_1E26:
	move.b	#0x03,(facing_direction,a2)     	| [ld   (ix+facing_direction),$03]
	move.b	#0x0A,(instant_move_period,a2)  	| [ld   (ix+instant_move_period),$0A]
	clr.b	(current_period_counter,a2)      	| [ld   (ix+current_period_counter),$00]
	move.b	#0xFF,(0x08,a2)                 	| [ld   (ix+$08),$FF]
	clr.b	(0x09,a2)                        	| [ld   (ix+$09),$00]
	clr.b	(stunned_push_block_counter,a2)  	| [ld   (ix+stunned_push_block_counter),$00]
	clr.b	(0x0b,a2)                        	| [ld   (ix+$0b),$00]
	jbsr	get_level_number_288F             	| [call get_level_number_288F]
	ror.b	#1,d0                            	| [rrca]
	subq.b	#1,d0                           	| [dec  a]
	move.b	d0,(ai_mode,a2)                 	| set mode as level number / 2:	level 16: hardest hunt mode [ld   (ix+ai_mode),a]
	jbsr	display_character_sprite_39AB     	| [call display_character_sprite_39AB]
	jbsr	display_snobee_sprite_33CE        	| [call display_snobee_sprite_33CE]
	addq.b	#1,(char_state,a2)              	| [inc  (ix+char_state)]
	rts                                    	| [ret]

move_during_title_screen_1E54:
	lea	table_1E84(pc),a0                  	| [ld   hl,table_1E84]
	jbsr	next_auto_move_1E64               	| [call next_auto_move_1E64]
	move.b	(char_id,a2),d0                 	| [ld   a,(ix+char_id)]
	cmp.b	#0x01,d0                         	| [cp   $01]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	addq.b	#1,(char_state,a2)              	| [inc  (ix+char_state)]
	rts                                    	| [ret]

next_auto_move_1E64:
	move.b	(char_id,a2),d0                 	| [ld   a,(ix+char_id)]
	subq.b	#1,d0                           	| [dec  a]
	rol.b	#2,d0                            	| [rlca]
	                            	| [rlca]
	clr.b	d3                               	| [ld   d,$00]
	move.b	d0,d3                           	| [ld   e,a]
	add.w	d3,a0						| [add hl,de]
											| [ld   a,(hl)]
											| [inc  hl]
	move.b	(a0)+,(x_pos,a2)                   	| [ld   (ix+x_pos),a]
												| [ld   a,(hl)]
												| [inc  hl]
	move.b	(a0)+,(y_pos,a2)                   	| [ld   (ix+y_pos),a]
	                      	| [ld   a,(hl)]
	                          	| [inc  hl]
	move.b	(a0)+,(animation_frame,a2)         	| [ld   (ix+animation_frame),a]
	move.b	(a0)+,d0                         	| [ld   a,(hl)]
												| [inc  hl]
	move.b	d0,(char_color,a2)              	| [ld   (ix+char_color),a]
	jra	init_characters_for_auto_mode_1E26               	| [jr   $1E26]


table_1E84:
	.byte	0x00,0x98,0x08,0x09,0x70,0x88,0x70,0x10,0x80,0x88,0x70
	.byte	0x10,0x70,0x98,0x70,0x10,0x80,0x98,0x70,0x10,0x70,0x90,0xF0,0x0B
	


change_character_intermission_phase_1E9C:
	lea	table_1EAC(pc),a0                  	| [ld   hl,table_1EAC]
	jbsr	next_auto_move_1E64               	| [call next_auto_move_1E64]
	move.b	(char_id,a2),d0                 	| [ld   a,(ix+char_id)]
	cmp.b	#0x04,d0                         	| [cp   $04]
	bcs.b	0f
	rts                                    	| [ret  nc]
0:
	addq.b	#1,(char_state,a2)              	| [inc  (ix+char_state)]
	rts                                    	| [ret]

table_1EAC:
	.byte	0x00,0x28,0x08,0x0A,0x00,0x50,0x08,0x0B,0x00,0x70,0x08,0x01,0x00,0x08,0x08,0x0B
	.byte	0x00,0x18,0x08,0x0D,0x00,0x38,0x08,0x0C

move_character_intermission_1EC4:
	jbsr	animate_intermission_penguins_1ef0	| [call animate_intermission_penguins_1ef0]
	addq.b	#1,(current_period_counter,a2)  	| [inc  (ix+current_period_counter)]
	move.b	(current_period_counter,a2),d0  	| [ld   a,(ix+current_period_counter)]
	cmp.b	(instant_move_period,a2),d0      	| [cp   (ix+instant_move_period)]
	bcc.b	0f
	rts                                    	| [ret  c]
0:
	clr.b	(current_period_counter,a2)      	| [ld   (ix+current_period_counter),$00]
	move.b	#0x18,d0                        	| [ld   a,$18]
	cmp.b	(x_pos,a2),d0                    	| [cp   (ix+x_pos)]
	bne	0f
	jbsr	l_1f17                            	| [call z,$1F17]
0:
	move.b	#0xB0,d0                        	| [ld   a,$B0]
	cmp.b	(x_pos,a2),d0                    	| [cp   (ix+x_pos)]
	bne	0f
	jbsr	l_1f24                            	| [call z,$1F24]
0:
	move.b	#0xF0,d0                        	| [ld   a,$F0]
	cmp.b	(x_pos,a2),d0                    	| [cp   (ix+x_pos)]
	bne	0f
	jbsr	l_1f4e                            	| [call z,$1F4E]
0:
	jra	move_character_according_to_direction_3DD7	| [jp   move_character_according_to_direction_3DD7]

animate_intermission_penguins_1ef0:
	move.b	counter_lsb_8824,d0             	| [ld   a,(counter_lsb_8824)]
	and.b	#0x1F,d0                         	| [and  $1F]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
 * counter 1 out of 32 xxx
	clr.b	d1                               	| [ld   b,$00]
	move.b	(char_state,a2),d0              	| [ld   a,(ix+char_state)]
	cmp.b	#0x04,d0                         	| [cp   $04]
	jne	l_1f08                             	| [jr   nz,$1F08]
* this is reached only when penguins dance during the intermission
	move.b	(ai_mode,a2),d0                 	| [ld   a,(ix+ai_mode)]
	cmp.b	#0x03,d0                         	| [cp   $03]
	jne	l_1f08                             	| [jr   nz,$1F08]
	move.b	#0x3A,d1                        	| [ld   b,$3A]
l_1f08:
	addq.b	#1,(alive_walk_counter,a2)      	| [inc  (ix+alive_walk_counter)]
	move.b	(alive_walk_counter,a2),d0      	| [ld   a,(ix+alive_walk_counter)]
	and.b	#0x03,d0                         	| [and  $03]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	addq.b	#1,(alive_walk_counter,a2)      	| [inc  (ix+alive_walk_counter)]
	jra	l_3985                             	| [jp   $3985]

l_1f17:
	move.l	a2,-(sp)                        	| [push ix]
	move.w	#0x20,d3                      	| [ld   de,$0020]
	add.w	d3,a2							| [add  ix,de]
	addq.b	#1,(char_state,a2)              	| [inc  (ix+char_state)]
	move.l	(sp)+,a2                        	| [pop  ix]
	rts                                    	| [ret]
l_1f24:
	move.b	(char_id,a2),d0                 	| [ld   a,(ix+char_id)]
	cmp.b	#0x01,d0                         	| [cp   $01]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	move.l	a2,-(sp)                        	| [push ix]
	addq.b	#1,(char_state,a2)              	| [inc  (ix+char_state)]
	move.w	#0x20,d3                      	| [ld   de,$0020]
	add.w	d3,a2							| [add  ix,de]
	addq.b	#1,(char_state,a2)              	| [inc  (ix+char_state)]
	add.w	d3,a2							| [add  ix,de]
	addq.b	#1,(char_state,a2)              	| [inc  (ix+char_state)]
	add.w	d3,a2							| [add  ix,de]
	addq.b	#1,(char_state,a2)              	| [inc  (ix+char_state)]
	add.w	d3,a2							| [add  ix,de]
	addq.b	#1,(char_state,a2)              	| [inc  (ix+char_state)]
	add.w	d3,a2							| [add  ix,de]
	addq.b	#1,(char_state,a2)              	| [inc  (ix+char_state)]
	move.l	(sp)+,a2                        	| [pop  ix]
	rts                                    	| [ret]

l_1f4e:
	addq.b	#1,(char_state,a2)              	| [inc  (ix+char_state)]
	rts                                    	| [ret]

move_character_intermission_1F52:
	move.b	(char_id,a2),d0                 	| [ld   a,(ix+char_id)]
	cmp.b	#0x01,d0                         	| [cp   $01]
	bne	0f
	jbsr	animate_intermission_penguins_1ef0	| [call z,animate_intermission_penguins_1ef0]
0:
	addq.b	#1,(current_period_counter,a2)  	| [inc  (ix+current_period_counter)]
	move.b	(current_period_counter,a2),d0  	| [ld   a,(ix+current_period_counter)]
	cmp.b	(instant_move_period,a2),d0      	| [cp   (ix+instant_move_period)]
	bcc.b	0f
	rts                                    	| [ret  c]
0:
	clr.b	(current_period_counter,a2)      	| [ld   (ix+current_period_counter),$00]
	move.b	#0x60,d0                        	| [ld   a,$60]
	cmp.b	(x_pos,a2),d0                    	| [cp   (ix+x_pos)]
	jne	0f
	jbsr	l_1f7b                            	| [call z,$1F7B]
0:
	move.b	#0xF0,d0                        	| [ld   a,$F0]
	cmp.b	(x_pos,a2),d0                    	| [cp   (ix+x_pos)]
	jne	0f
	jbsr	l_1f4e                            	| [call z,$1F4E]
0:
	jra	move_character_according_to_direction_3DD7	| [jp   move_character_according_to_direction_3DD7]
l_1f7b:
	jbsr	l_1f24                            	| [call $1F24]
	move.l	a2,-(sp)                        	| [push ix]
	lea	moving_block_struct_8DA0(pc),a2    	| [ld   ix,moving_block_struct_8DA0]
	addq.b	#1,(char_state,a2)              	| [inc  (ix+char_state)]
	addq.b	#1,(char_state,a2)              	| [inc  (ix+char_state)]
	move.l	(sp)+,a2                        	| [pop  ix]
	subq.b	#1,(char_state,a2)              	| [dec  (ix+char_state)]
	rts                                    	| [ret]
	
move_character_intermission_1F90:
	jbsr	l_1fe4                            	| [call $1FE4]
	addq.b	#1,(current_period_counter,a2)  	| [inc  (ix+current_period_counter)]
	move.b	(current_period_counter,a2),d0  	| [ld   a,(ix+current_period_counter)]
	cmp.b	(instant_move_period,a2),d0      	| [cp   (ix+instant_move_period)]
	bcc.b	0f
	rts                                    	| [ret  c]
0:
	clr.b	(current_period_counter,a2)      	| [ld   (ix+current_period_counter),$00]
	jbsr	l_1fc5                            	| [call $1FC5]
	st.b	d0                                	| [ld   a,$FF]
	cmp.b	(x_pos,a2),d0                    	| [cp   (ix+x_pos)]
	bne	0f
	jbsr	change_last_3_characters_char_states_200a                            	| [call z,$200A]
0:
	move.b	#0x48,d0                        	| [ld   a,$48]
	cmp.b	(x_pos,a2),d0                    	| [cp   (ix+x_pos)]
	jne	0f
	jbsr	l_2032                            	| [call z,$2032]
0:
	lea	table_1FF7(pc),a0                  	| [ld   hl,table_1FF7]
	move.b	(x_pos,a2),d0                   	| [ld   a,(ix+x_pos)]
	move.w	#0x13,d1	                      	| [ld   bc,$0013]
	jbsr	cpir                              	| [cpir]
	bne	0f
	jbsr	l_203d                            	| [call z,$203D]
0:
	jra	move_character_according_to_direction_3DD7	| [jp   move_character_according_to_direction_3DD7]

l_1fc5:
	move.b	(char_id,a2),d0                 	| [ld   a,(ix+char_id)]
	cmp.b	#0x01,d0                         	| [cp   $01]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	move.b	(x_pos,a2),d0                   	| [ld   a,(ix+x_pos)]
	and.b	#0x07,d0                         	| [and  $07]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	move.b	#0x16,d1                        	| [ld   b,$16]
	move.b	#0x07,d2                        	| [ld   c,$07]
	btst.b	#3,(x_pos,a2)                   	| [bit  3,(ix+x_pos)]
	jeq	l_1fe0                             	| [jr   z,$1FE0]
	jbsr	set_2x2_tile_color_0C_4BC2        	| [call set_2x2_tile_color_0C_4BC2]
	jra	l_1fe3                             	| [jr   $1FE3]
l_1fe0:
	jbsr	set_2x2_tile_color_09_4BD8        	| [call set_2x2_tile_color_09_4BD8]
l_1fe3:
	rts                                    	| [ret]

l_1fe4:
	move.b	(char_id,a2),d0                 	| [ld   a,(ix+char_id)]
	cmp.b	#0x02,d0                         	| [cp   $02]
	jeq	animate_intermission_penguins_1ef0 	| [jp   z,animate_intermission_penguins_1ef0]
	move.b	counter_lsb_8824,d0             	| [ld   a,(counter_lsb_8824)]
	and.b	#0x1F,d0                         	| [and  $1F]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
 * counter 1 out of 32 xxx
	move.b	#0x12,d1                        	| [ld   b,$12]
	jra	l_1f08                             	| [jp   $1F08]
table_1FF7:
	.byte	0x38,0x40,0x48,0x50,0x58,0x60,0x68,0x70,0x78,0x80,0x88,0x90,0x98,0xA0,0xA8,0xB0
	.byte	0xB8,0xC0,0xC8
	.align	2


change_last_3_characters_char_states_200a:
	move.l	a2,-(sp)                        	| [push ix]
	addq.b	#1,(char_state,a2)              	| [inc  (ix+char_state)]
	lea	snobee_4_struct_8D60(pc),a2        	| [ld   ix,snobee_4_struct_8D60]
	move.w	#0x20,d3                      	| [ld   de,$0020]
	addq.b	#2,(char_state,a2)              	| [inc  (ix+char_state)]
												| [inc  (ix+char_state)]
	add.w	d3,a2								| [add  ix,de]
	addq.b	#2,(char_state,a2)              	| [inc  (ix+char_state)]
							| [inc  (ix+char_state)]
	add.w	d3,a2								| [add  ix,de]
	addq.b	#2,(char_state,a2)              	| [inc  (ix+char_state)]
										| [inc  (ix+char_state)]
	move.l	(sp)+,a2                        	| [pop  ix]
	jra	l_0615                            	| [call $0615]
	rts                                    	| [ret]
l_2032:
	move.b	(char_id,a2),d0                 	| [ld   a,(ix+char_id)]
	cmp.b	#0x01,d0                         	| [cp   $01]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	cmp.b	#0x04,d0                         	| [cp   $04]
	bcs.b	0f
	rts                                    	| [ret  nc]
0:
	move.l	(sp)+,a0                        	| [pop  hl]
	rts                                    	| [ret]
	
l_203d:
	ror.b	#3,d0                            	| [rrca]
	and.b	#0x1F,d0                         	| [and  $1F]
	subq.b	#0x02,d0                        	| [sub  $02]
	move.b	d0,d6                           	| [ld   l,a]
	move.b	#0x06,d5                        	| [ld   h,$06]
	bsr		set_current_cursor_from_hl        	| [ld   (cursor_x_8800),hl]
												| [ld   (cursor_x_8800),hl]
	jbsr	put_blank_at_current_pos_2900     	| [call put_blank_at_current_pos_2900]
	rts                                    	| [ret]

move_character_intermission_204E:
	jbsr	l_1fe4                            	| [call $1FE4]
	addq.b	#1,(current_period_counter,a2)  	| [inc  (ix+current_period_counter)]
	move.b	(current_period_counter,a2),d0  	| [ld   a,(ix+current_period_counter)]
	cmp.b	(instant_move_period,a2),d0      	| [cp   (ix+instant_move_period)]
	bcc.b	0f
	rts                                    	| [ret  c]
0:
	clr.b	(current_period_counter,a2)      	| [ld   (ix+current_period_counter),$00]
	jbsr	l_1fc5                            	| [call $1FC5]
	move.b	(x_pos,a2),d0                   	| [ld   a,(ix+x_pos)]
	and.b	#0x07,d0                         	| [and  $07]
	bne	0f
	jbsr	l_20a4                            	| [call z,$20A4]
0:
	move.b	(x_pos,a2),d0                   	| [ld   a,(ix+x_pos)]
	cmp.b	#0x69,d0                         	| [cp   $69]
	bne	0f
	jbsr	l_2085                            	| [call z,$2085]
0:
	move.b	(x_pos,a2),d0                   	| [ld   a,(ix+x_pos)]
	cmp.b	#0x28,d0                         	| [cp   $28]
	bne	0f
	jbsr	l_2093                            	| [call z,$2093]
0:
	move.b	(x_pos,a2),d0                   	| [ld   a,(ix+x_pos)]
	cmp.b	#0xF8,d0                         	| [cp   $F8]
	bne	0f
	jbsr	l_2098                            	| [call z,$2098]
0:
	jra	move_character_according_to_direction_3DD7	| [jp   move_character_according_to_direction_3DD7]

l_2085:
	move.b	(0x09,a2),d0                    	| [ld   a,(ix+$09)]
	tst.b	d0                               	| [and  a]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	move.b	#0x02,(facing_direction,a2)     	| [ld   (ix+facing_direction),$02]
	move.b	#0xFF,(0x09,a2)                 	| [ld   (ix+$09),$FF]
	rts                                    	| [ret]

l_2093:
	move.b	#0x03,(facing_direction,a2)     	| [ld   (ix+facing_direction),$03]
	rts                                    	| [ret]

l_2098:
	addq.b	#1,(char_state,a2)              	| [inc  (ix+char_state)]
	move.b	(char_id,a2),d0                 	| [ld   a,(ix+char_id)]
	cmp.b	#0x06,d0                         	| [cp   $06]
	addq.b	#1,(char_state,a2)              	| [inc  (ix+char_state)]
	rts                                    	| [ret]

l_20a4:
	move.b	(x_pos,a2),d0                   	| [ld   a,(ix+x_pos)]
	ror.b	#3,d0                            	| [rrca]
	and.b	#0x1F,d0                         	| [and  $1F]
	subq.b	#0x01,d0                        	| [sub  $01]
	cmp.b	#0x03,d0                         	| [cp   $03]
	bcc.b	0f
	rts                                    	| [ret  c]
0:
	cmp.b	#0x18,d0                         	| [cp   $18]
	bcs.b	0f
	rts                                    	| [ret  nc]
0:
	move.b	d0,d6                           	| [ld   l,a]
	move.b	#0x01,d5                        	| [ld   h,$01]
	bsr		set_current_cursor_from_hl        	| [ld   (cursor_x_8800),hl]
												| [ld   (cursor_x_8800),hl]
	move.b	#0x0E,d0                        	| [ld   a,$0E]
	btst.b	#0,(facing_direction,a2)        	| [bit  0,(ix+facing_direction)]
	jne	l_20c4                             	| [jr   nz,$20C4]
	clr.b	d0                               	| [ld   a,$00]
l_20c4:
	move.b	#0x08,d1                        	| [ld   b,$08]
l_20c6:
	move.w	d1,-(sp)                        	| [push bc]
	jbsr	set_attribute_at_current_pos_292D 	| [call set_attribute_at_current_pos_292D]
	jbsr	move_cursor_1_2919                	| [call move_cursor_1_2919]
	move.w	(sp)+,d1                        	| [pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_20c6                             	| [djnz $20C6]
	rts                                    	| [ret]

select_proper_jump_table_20D1:
	clr.w	d6                               	| [ld   h,$00]
	move.b	(ai_mode,a2),d6                 	| [ld   l,(ix+ai_mode)]
	add.w	d6,d6								| [add hl,hl]
	add.w	d6,d6								|
												| [add  hl,de]
	move.l	(a1,d6.w),a1                         	| [ld   e,(hl)]
											| [inc  hl]
										| [ld   d,(hl)]
	rts                                    	| [ret]

how_to_dance_20DC:
	lea	jump_table_table_20E8(pc),a1       	| [ld   de,jump_table_table_20E8]
	jbsr	select_proper_jump_table_20D1     	| [call select_proper_jump_table_20D1]
	move.b	(intermission_dance_push_anim_counter,a2),d0	| [ld   a,(ix+intermission_dance_push_anim_counter)]
	jra	indirect_jump_2D8F                 	| [jp   indirect_jump_2D8F]

jump_table_table_20E8:
	.long	jump_table_20F8
	.long	jump_table_214C
	.long	jump_table_2180
	.long	jump_table_21B8
	.long	jump_table_21CC
	.long	jump_table_2265
	.long	jump_table_21CC
	.long	jump_table_2265

jump_table_20F8:
	.long	l_2130
	.long	block_pushed_3FFA
	.long	block_broken_406E
	.long	block_pushed_401F
	.long	block_broken_406E
	.long	block_pushed_3FFA
	.long	block_broken_406E
	.long	block_pushed_401F
	.long	block_broken_406E
	.long	l_2138
	.long	block_pushed_3FFA
	.long	block_broken_406E
	.long	block_pushed_401F
	.long	block_broken_406E
	.long	block_pushed_3FFA
	.long	block_broken_406E
	.long	block_pushed_401F
	.long	block_broken_406E
	.long	l_2140
	.long	block_pushed_3FFA
	.long	block_broken_406E
	.long	block_pushed_401F
	.long	block_broken_406E
	.long	block_pushed_3FFA
	.long	block_broken_406E
	.long	block_pushed_401F
	.long	block_broken_406E
	.long	l_2148


l_2130:
	move.b	#0x01,(facing_direction,a2)     	| [ld   (ix+facing_direction),$01]
	addq.b	#1,(intermission_dance_push_anim_counter,a2)	| [inc  (ix+intermission_dance_push_anim_counter)]
	rts                                    	| [ret]

l_2138:
	move.b	#0x02,(facing_direction,a2)     	| [ld   (ix+facing_direction),$02]
	addq.b	#1,(intermission_dance_push_anim_counter,a2)	| [inc  (ix+intermission_dance_push_anim_counter)]
	rts                                    	| [ret]

l_2140:
	move.b	#0x03,(facing_direction,a2)     	| [ld   (ix+facing_direction),$03]
	addq.b	#1,(intermission_dance_push_anim_counter,a2)	| [inc  (ix+intermission_dance_push_anim_counter)]
	rts                                    	| [ret]

l_2148:
	addq.b	#1,(char_state,a2)              	| [inc  (ix+char_state)]
	rts                                    	| [ret]

jump_table_214C:
	.long	l_2140
	.long	block_pushed_3FFA
	.long	block_broken_406E
	.long	block_pushed_401F
	.long	block_broken_406E
	.long	block_pushed_3FFA
	.long	block_broken_406E
	.long	block_pushed_401F
	.long	block_broken_406E
	.long	l_2170
	.long	block_broken_406E
	.long	l_217c
	.long	block_broken_406E
	.long	l_2170
	.long	block_broken_406E
	.long	l_217c
	.long	block_broken_406E


l_2170:
	move.b	#0x78,d1                        	| [ld   b,$78]
l_2172:
	move.b	d1,(animation_frame,a2)         	| [ld   (ix+animation_frame),b]
	jbsr	display_character_sprite_39AB     	| [call display_character_sprite_39AB]
	addq.b	#1,(intermission_dance_push_anim_counter,a2)	| [inc  (ix+intermission_dance_push_anim_counter)]
	rts                                    	| [ret]
l_217c:
	move.b	#0x7C,d1                        	| [ld   b,$7C]
	jra	l_2172                             	| [jr   $2172]

jump_table_2180:
	.long	l_218e
	.long	l_21a2
	.long	l_218e
	.long	l_21ad
	.long	l_218e
	.long	l_2140
	.long	l_2148


l_218e:
	btst.b	#0,(0x09,a2)                    	| [bit  0,(ix+$09)]
	bne	0f
	jbsr	l_2199                            	| [call z,$2199]
0:
	jbsr	l_4082                            	| [call $4082]
	rts                                    	| [ret]

l_2199:
	move.b	#0x0A,(stunned_push_block_counter,a2)	| [ld   (ix+stunned_push_block_counter),$0A]
	move.b	#0x0F,(0x09,a2)                 	| [ld   (ix+$09),$0F]
	rts                                    	| [ret]

l_21a2:
	move.b	#0x94,(animation_frame,a2)      	| [ld   (ix+animation_frame),$94]
	jbsr	display_character_sprite_39AB     	| [call display_character_sprite_39AB]
	addq.b	#1,(intermission_dance_push_anim_counter,a2)	| [inc  (ix+intermission_dance_push_anim_counter)]
	rts                                    	| [ret]

l_21ad:
	move.b	#0x12,(animation_frame,a2)      	| [ld   (ix+animation_frame),$12]
	jbsr	display_character_sprite_39AB     	| [call display_character_sprite_39AB]
	addq.b	#1,(intermission_dance_push_anim_counter,a2)	| [inc  (ix+intermission_dance_push_anim_counter)]
	rts                                    	| [ret]

jump_table_21B8:
	.long	l_218e
	.long	l_2130
	.long	l_218e
	.long	l_2140
	.long	l_21c4
	.long	l_2148

l_21c4:
	clr.b	(alive_walk_counter,a2)          	| [ld   (ix+alive_walk_counter),$00]
	addq.b	#1,(intermission_dance_push_anim_counter,a2)	| [inc  (ix+intermission_dance_push_anim_counter)]
	rts                                    	| [ret]

* 32 values
jump_table_21CC:
	.long	l_2240
	.long	l_218e
	.long	l_220c
	.long	block_broken_406E
	.long	l_221b
	.long	block_broken_406E
	.long	l_220c
	.long	block_broken_406E
	.long	l_221b
	.long	l_218e
	.long	l_220c
	.long	block_broken_406E
	.long	l_221b
	.long	block_broken_406E
	.long	l_220c
	.long	block_broken_406E
	.long	l_221b
	.long	l_218e
	.long	l_218e
	.long	l_222a
	.long	l_218e
	.long	l_2235
	.long	l_220c
	.long	block_broken_406E
	.long	l_221b
	.long	block_broken_406E
	.long	l_220c
	.long	block_broken_406E
	.long	l_221b
	.long	l_218e
	.long	l_2297
	.long	l_2148

l_220c:
	move.b	#0x72,(x_pos,a2)                	| [ld   (ix+x_pos),$72]
	move.b	#0x92,(y_pos,a2)                	| [ld   (ix+y_pos),$92]
	jbsr	display_snobee_sprite_33CE        	| [call display_snobee_sprite_33CE]
	addq.b	#1,(intermission_dance_push_anim_counter,a2)	| [inc  (ix+intermission_dance_push_anim_counter)]
	rts                                    	| [ret]

l_221b:
	move.b	#0x70,(x_pos,a2)                	| [ld   (ix+x_pos),$70]
	move.b	#0x90,(y_pos,a2)                	| [ld   (ix+y_pos),$90]
	jbsr	display_snobee_sprite_33CE        	| [call display_snobee_sprite_33CE]
	addq.b	#1,(intermission_dance_push_anim_counter,a2)	| [inc  (ix+intermission_dance_push_anim_counter)]
	rts                                    	| [ret]
l_222a:
	move.b	#0xF4,(animation_frame,a2)      	| [ld   (ix+animation_frame),$F4]
	jbsr	display_character_sprite_39AB     	| [call display_character_sprite_39AB]
	addq.b	#1,(intermission_dance_push_anim_counter,a2)	| [inc  (ix+intermission_dance_push_anim_counter)]
	rts                                    	| [ret]
l_2235:
	move.b	#0xF0,(animation_frame,a2)      	| [ld   (ix+animation_frame),$F0]
	jbsr	display_character_sprite_39AB     	| [call display_character_sprite_39AB]
	addq.b	#1,(intermission_dance_push_anim_counter,a2)	| [inc  (ix+intermission_dance_push_anim_counter)]
	rts                                    	| [ret]

l_2240:
												| [ld   h,$13]
												| [ld   l,$0C]
	move.w	#0x0C13,cursor_x_8800                	| [ld   (cursor_x_8800),hl]
	move.b	#0x12,d0                        	| [ld   a,$12]
	move.b	d0,cursor_color_8802            	| [ld   (cursor_color_8802),a]
	move.b	#0x90,d0                        	| [ld   a,$90]
	move.b	#0x04,d1                        	| [ld   b,$04]
l_2250:
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	addq.b	#1,d0                           	| [inc  a]
	subq.b	#1,d1                           	| [...]
	jne	l_2250                             	| [djnz $2250]
	jbsr	move_cursor_4_2923                	| [call move_cursor_4_2923]
	move.b	#0x04,d1                        	| [ld   b,$04]
l_225b:
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	addq.b	#1,d0                           	| [inc  a]
	subq.b	#1,d1                           	| [...]
	jne	l_225b                             	| [djnz $225B]
	addq.b	#1,(intermission_dance_push_anim_counter,a2)	| [inc  (ix+intermission_dance_push_anim_counter)]
	rts                                    	| [ret]


jump_table_2265:
	.long	l_2240
	.long	l_2297
	.long	l_218e
	.long	l_218e
	.long	l_218e
	.long	l_22a6
	.long	l_22b5
	.long	block_broken_406E
	.long	l_22c0
	.long	block_broken_406E
	.long	l_22b5
	.long	block_broken_406E
	.long	l_2297
	.long	l_218e
	.long	l_218e
	.long	l_22a6
	.long	l_22b5
	.long	block_broken_406E
	.long	l_22c0
	.long	l_218e
	.long	l_218e
	.long	l_22b5
	.long	block_broken_406E
	.long	l_2297
	.long	l_2148

l_2297:
	clr.b	(x_pos,a2)                       	| [ld   (ix+x_pos),$00]
	clr.b	(y_pos,a2)                       	| [ld   (ix+y_pos),$00]
	jbsr	display_snobee_sprite_33CE        	| [call display_snobee_sprite_33CE]
	addq.b	#1,(intermission_dance_push_anim_counter,a2)	| [inc  (ix+intermission_dance_push_anim_counter)]
	rts                                    	| [ret]

l_22a6:
	move.b	#0x7E,(x_pos,a2)                	| [ld   (ix+x_pos),$7E]
	move.b	#0x88,(y_pos,a2)                	| [ld   (ix+y_pos),$88]
	jbsr	display_snobee_sprite_33CE        	| [call display_snobee_sprite_33CE]
	addq.b	#1,(intermission_dance_push_anim_counter,a2)	| [inc  (ix+intermission_dance_push_anim_counter)]
	rts                                    	| [ret]

l_22b5:
	move.b	#0xE8,(animation_frame,a2)      	| [ld   (ix+animation_frame),$E8]
	jbsr	display_character_sprite_39AB     	| [call display_character_sprite_39AB]
	addq.b	#1,(intermission_dance_push_anim_counter,a2)	| [inc  (ix+intermission_dance_push_anim_counter)]
	rts                                    	| [ret]
l_22c0:
	move.b	#0xEC,(animation_frame,a2)      	| [ld   (ix+animation_frame),$EC]
	jbsr	display_character_sprite_39AB     	| [call display_character_sprite_39AB]
	addq.b	#1,(intermission_dance_push_anim_counter,a2)	| [inc  (ix+intermission_dance_push_anim_counter)]
	rts                                    	| [ret]



pack_ice_screen_22CB:
	jbsr	set_bank_selectors_2319           	| [call set_bank_selectors_2319]
	jbsr	show_ice_pack_screen_2325       	| [call show_ice_pack_screen_2325]
	jbsr	init_all_characters_states_1D60   	| [call init_all_characters_states_1D60]
l_22d4:
	jbsr	increase_counter_0875             	| [call increase_counter_0875]
* active wait
	clr.b	d1                               	| [ld   b,$00]
l_22d9:
	subq.b	#1,d1                           	| [...]
	jne	l_22d9                             	| [djnz $22D9]
l_22db:
	subq.b	#1,d1                           	| [...]
	jne	l_22db                             	| [djnz $22DB]
	move.b	counter_lsb_8824,d0             	| [ld   a,(counter_lsb_8824)]
	tst.b	d0                               	| [and  a]
	jne	l_22e9                             	| [jr   nz,$22E9]
	move.b	counter_msb_8825,d0             	| [ld   a,(counter_msb_8825)]
	jbsr	set_sky_color_24FC                	| [call set_sky_color_24FC]
* move 6 characters. For that, use the 6 sprites
* (4 snobees, pengo, and ice block) to display 2 snobees
* and 4 penguins
l_22e9:
	jbsr	move_snobee_pack_ice_1_233E       	| [call move_snobee_pack_ice_1_233E]
	jbsr	move_snobee_pack_ice_2_2344       	| [call move_snobee_pack_ice_2_2344]
	jbsr	move_snobee_pack_ice_3_234A       	| [call move_snobee_pack_ice_3_234A]
	jbsr	move_snobee_pack_ice_4_2350       	| [call move_snobee_pack_ice_4_2350]
	jbsr	move_pengo_pack_ice_2356          	| [call move_pengo_pack_ice_2356]
	jbsr	move_pengo_pack_ice_235C          	| [call move_pengo_pack_ice_235C]
	move.b	(char_state,a2),d0              	| [ld   a,(ix+char_state)]
	cmp.b	#0x02,d0                         	| [cp   $02]
	jne	l_22d4                             	| [jr   nz,$22D4]
	move.b	#0x40,d0                        	| [ld   a,$40]
	jbsr	delay_28D1                        	| [call delay_28D1]
	jbsr	cycle_sky_color_24EC              	| [call cycle_sky_color_24EC]
	jbsr	clr_bank_selectors_230E           	| [call clr_bank_selectors_230E]
	rts                                    	| [ret]

clr_bank_selectors_230E:
	clr.b	d0                               	| [xor  a]
	jbsr		osd_set_bank_selectors
	*move.b	d0,character_sprite_bank_selector_9047	| [ld   (character_sprite_bank_selector_9047),a]
	*move.b	d0,palette_bank_selector_9042   	| [ld   (palette_bank_selector_9042),a]
	*move.b	d0,color_lookup_table_bank_selector_9046	| [ld   (color_lookup_table_bank_selector_9046),a]
	rts                                    	| [ret]

set_bank_selectors_2319:
	move.b	#0x01,d0                        	| [ld   a,$01]
	jbsr		osd_set_bank_selectors
	*move.b	d0,character_sprite_bank_selector_9047	| [ld   (character_sprite_bank_selector_9047),a]
	*move.b	d0,palette_bank_selector_9042   	| [ld   (palette_bank_selector_9042),a]
	*move.b	d0,color_lookup_table_bank_selector_9046	| [ld   (color_lookup_table_bank_selector_9046),a]
	rts                                    	| [ret]

show_ice_pack_screen_2325:
	move.w	#0x8400,d6                      	| [ld   hl,$8400]
	move.b	#0x10,d0                      	| [ld   (hl),$10]
	move.w	#0x3FF,d1
0:
	jbsr	osd_w_colorram
	addq.w	#1,d6
	dbf		d1,0b
	
	lea	ice_pack_tiles_6000(pc),a0                      	| [ld   hl,$6000]
	move.w	#0x8000,d6		      	| [ld   de,video_tile_memory_8000]
	move.w	#0x3FF,d1
1:
	move.b	(a0)+,d0
	jbsr	osd_w_videoram
	addq.w	#1,d6
	dbf		d1,1b
	bsr		osd_break
	rts                                    	| [ret]

move_snobee_pack_ice_1_233E:
	lea	snobee_1_struct_8D00(pc),a2        	| [ld   ix,snobee_1_struct_8D00]
	jra	l_2360                             	| [jr   $2360]

move_snobee_pack_ice_2_2344:
	lea	snobee_2_struct_8D20(pc),a2        	| [ld   ix,snobee_2_struct_8D20]
	jra	l_2360                             	| [jr   $2360]

move_snobee_pack_ice_3_234A:
	lea	snobee_3_struct_8D40(pc),a2        	| [ld   ix,snobee_3_struct_8D40]
	jra	l_2360                             	| [jr   $2360]

move_snobee_pack_ice_4_2350:
	lea	snobee_4_struct_8D60(pc),a2        	| [ld   ix,snobee_4_struct_8D60]
	jra	l_2360                             	| [jr   $2360]

move_pengo_pack_ice_2356:
	lea	pengo_struct_8D80(pc),a2           	| [ld   ix,pengo_struct_8D80]
	jra	l_2360                             	| [jr   $2360]

move_pengo_pack_ice_235C:
	lea	moving_block_struct_8DA0(pc),a2    	| [ld   ix,moving_block_struct_8DA0]
l_2360:
	move.b	(char_state,a2),d0              	| state, only from pack_ice screen (states are different: only 3 states) [ld   a,(ix+char_state)]
	lea	table_2369(pc),a1                  	| [ld   de,table_2369]
	jra	indirect_jump_2D8F                 	| [jp   indirect_jump_2D8F]
table_2369:
	.long	l_2373
	.long	l_23e7
	.long	l_236f

l_236f:
	jbsr	l_23ff                            	| [call $23FF]
	rts                                    	| [ret]

l_2373:
	lea	table_23B7(pc),a0                  	| [ld   hl,table_23B7]
	move.b	(char_id,a2),d0                 	| [ld   a,(ix+char_id)]
	subq.b	#1,d0                           	| [dec  a]
	lsl.b	#3,d0                            	| [add  a,a]
												| [add  a,a]
												| [add  a,a]
	clr.w	d3                               	| [ld   d,$00]
	move.b	d0,d3                           	| [ld   e,a]
	add.w	d3,a0								| [add  hl,de]
	move.b	(a0)+,d0                         	| [ld   a,(hl)]
	move.b	d0,(x_pos,a2)                   	| [ld   (ix+x_pos),a]
												| [inc  hl]
	move.b	(a0)+,d0                         	| [ld   a,(hl)]
	move.b	d0,(y_pos,a2)                   	| [ld   (ix+y_pos),a]
												| [inc  hl]
	move.b	(a0)+,d0                         	| [ld   a,(hl)]
	add.b	d0,d0                            	| [add  a,a]
	add.b	d0,d0                            	| [add  a,a]
	move.b	d0,(animation_frame,a2)         	| [ld   (ix+animation_frame),a]
												| [inc  hl]
	move.b	(a0)+,d0                         	| [ld   a,(hl)]
	move.b	d0,(char_color,a2)              	| [ld   (ix+char_color),a]
									| [inc  hl]
	move.b	(a0)+,d0                         	| [ld   a,(hl)]
	move.b	d0,(facing_direction,a2)        	| [ld   (ix+facing_direction),a]
												| [inc  hl]
	move.b	(a0)+,d0                         	| [ld   a,(hl)]
	move.b	d0,(instant_move_period,a2)     	| [ld   (ix+instant_move_period),a]
	                           	| [inc  hl]
	clr.b	(current_period_counter,a2)      	| [ld   (ix+current_period_counter),$00]
	move.w	(a0)+,d0                         	| [ld   a,(hl)]
	sub.w	#0x6800,d0			| sub base address, now this is an offset
	move.w	d0,(path_address_pointer_or_misc_flags,a2)                    	| [ld   (ix+$10),a]
												| [inc  hl]
												| [ld   a,(hl)]
												| [ld   (ix+$11),a]
												| [inc  hl]
	clr.b	(0x12,a2)                        	| [ld   (ix+$12),$00]
	addq.b	#1,(char_state,a2)              	| [inc  (ix+char_state)]
	rts                                    	| [ret]

* x,y,frame,color,facing direction,move period,pointer on move table
* (endianness of 16-bit pointer has been corrected)

table_23B7:
	.byte	0x78,0x50,0x0E,0x02,0x01,0x0C,0x68,0x00
	.byte	0x78,0x50,0x0E,0x03,0x01,0x0C,0x6B,0x00
	.byte	0x78,0x50,0x0E,0x04,0x01,0x0C,0x69,0x00
	.byte	0x78,0x50,0x0E,0x05,0x01,0x0C,0x6A,0x20
	.byte	0x78,0x50,0x0E,0x08,0x01,0x0C,0x6D,0x00
	.byte	0x78,0x50,0x0E,0x0C,0x01,0x0C,0x6E,0x00


l_23e7:
	jbsr	l_23ff                            	| [call $23FF]
	addq.b	#1,(current_period_counter,a2)  	| [inc  (ix+current_period_counter)]
	move.b	(current_period_counter,a2),d0  	| [ld   a,(ix+current_period_counter)]
	cmp.b	(instant_move_period,a2),d0      	| [cp   (ix+instant_move_period)]
	bcc.b	0f
	rts                                    	| [ret  c]
0:
	clr.b	(current_period_counter,a2)      	| [ld   (ix+current_period_counter),$00]
	jbsr	l_2435                            	| [call $2435]
	jbsr	l_24a0                            	| [call $24A0]
	rts                                    	| [ret]

l_23ff:
	move.b	counter_lsb_8824,d0             	| [ld   a,(counter_lsb_8824)]
	and.b	#0x07,d0                         	| [and  $07]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
 * counter 1 out of 8 xxx
	addq.b	#1,(alive_walk_counter,a2)      	| [inc  (ix+alive_walk_counter)]
	move.b	(animation_frame,a2),d0         	| [ld   a,(ix+animation_frame)]
	and.b	#0xF8,d0                         	| [and  $F8]
	btst.b	#2,(alive_walk_counter,a2)      	| [bit  2,(ix+alive_walk_counter)]
	jne	l_2415                             	| [jr   nz,$2415]
	bset.b	#2,d0                           	| [set  2,a]
l_2415:
	move.b	d0,(animation_frame,a2)         	| [ld   (ix+animation_frame),a]
	move.b	(facing_direction,a2),d0        	| [ld   a,(ix+facing_direction)]
	cmp.b	#0x03,d0                         	| [cp   $03]
	jne	l_2423                             	| [jr   nz,$2423]
	bset.b	#1,(animation_frame,a2)         	| [set  1,(ix+animation_frame)]
l_2423:
	btst.b	#0,(0x12,a2)                    	| [bit  0,(ix+$12)]
	jeq	l_242d                             	| [jr   z,$242D]
	bset.b	#1,(animation_frame,a2)         	| [set  1,(ix+animation_frame)]
l_242d:
	jbsr	display_character_sprite_39AB     	| [call display_character_sprite_39AB]
	rts                                    	| [ret]

	jbsr	l_3985                            	| [call $3985]
	rts                                    	| [ret]

* this is wrong 0x10,0x11 is a 16-bit pointer on smth
l_2435:
	lea		misc_table_6800(pc),a0
	add.w	(path_address_pointer_or_misc_flags,a2),a0                    	| [ld   l,(ix+$10)]
	move.b	(a0),d0                         	| [ld   a,(hl)]
	move.b	d0,d1                           	| [ld   b,a]
	and.b	#0xC0,d0                         	| [and  $C0]
	jne	l_244f                             	| [jr   nz,$244F]
	move.b	d1,d0                           	| [ld   a,b]
	and.b	#0x07,d0                         	| [and  $07]
	move.b	d0,(facing_direction,a2)        	| [ld   (ix+facing_direction),a]
	addq.w	#1,(path_address_pointer_or_misc_flags,a2)                    	| [ld   (ix+$10),l]

	rts                                    	| [ret]
l_244f:
	rol.b	#2,d0                            	| [rlca]
											| [rlca]
	and.b	#0x03,d0                         	| [and  $03]
	lea	table_2468(pc),a1                  	| [ld   de,table_2468]
	jbsr	indirect_jump_2D8F                	| [call indirect_jump_2D8F]
											| [ld   l,(ix+$10)]
											| [ld   h,(ix+$11)]
											| [inc  hl]
	addq.w	#1,(path_address_pointer_or_misc_flags,a2)                    	| [ld   (ix+$10),l]
	                    	| [ld   (ix+$11),h]
	jra	l_2435                             	| [jr   $2435]

table_2468:
	.long	l_249f
	.long	l_2475
	.long	l_248e
	.long	l_2470

l_2470:
	addq.b	#1,(char_state,a2)              	| [inc  (ix+char_state)]
	move.l	(sp)+,a0                        	| [pop  hl]
	rts                                    	| [ret]

l_2475:
	lea		misc_table_6800(pc),a0
	add.w	(path_address_pointer_or_misc_flags,a2),a0                    	| [ld   l,(ix+$10)]
	move.b	(a0),d0                         	| [ld   a,(hl)]
	lsl.b	#3,d0                            	| [add  a,a]
												| [add  a,a]
												| [add  a,a]
	move.b	d0,(animation_frame,a2)         	| [ld   (ix+animation_frame),a]
	clr.b	(0x12,a2)                        	| [ld   (ix+$12),$00]
	btst.b	#5,(a0)                         	| [bit  5,(hl)]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	move.b	#0xFF,(0x12,a2)                 	| [ld   (ix+$12),$FF]
	rts                                    	| [ret]

l_248e:
	lea		misc_table_6800(pc),a0
	add.w	(path_address_pointer_or_misc_flags,a2),a0                   	| [ld   l,(ix+$10)]
	move.b	(a0),d0                         	| [ld   a,(hl)]
	and.b	#0x0F,d0                         	| [and  $0F]
	move.b	d0,(instant_move_period,a2)     	| [ld   (ix+instant_move_period),a]
	clr.b	(current_period_counter,a2)      	| [ld   (ix+current_period_counter),$00]
	rts                                    	| [ret]

l_249f:
	rts                                    	| [ret]

l_24a0:
	lea	display_snobee_sprite_24BD(pc),a0  	| [ld   hl,display_snobee_sprite_24BD]
	move.l	a0,-(sp)                        	| [push hl]
	move.b	(facing_direction,a2),d0        	| [ld   a,(ix+facing_direction)]
	lea	move_table_24AD(pc),a1             	| [ld   de,move_table_24AD]
	jra	indirect_jump_2D8F                 	| [jp   indirect_jump_2D8F]

move_table_24AD:
	.long	decrease_y_24C0
	.long	increase_y_24C4
	.long	decrease_x_24C8
	.long	increase_x_24CC
	.long	dec_y_inc_x_24D0
	.long	dec_y_dec_x_24D7
	.long	inc_y_inc_x_24DE
	.long	inc_y_dec_x_24E5


display_snobee_sprite_24BD:
	jra	display_snobee_sprite_33CE         	| [jp   display_snobee_sprite_33CE]

decrease_y_24C0:
	subq.b	#1,(y_pos,a2)                   	| [dec  (ix+y_pos)]
	rts                                    	| [ret]

increase_y_24C4:
	addq.b	#1,(y_pos,a2)                   	| [inc  (ix+y_pos)]
	rts                                    	| [ret]

decrease_x_24C8:
	subq.b	#1,(x_pos,a2)                   	| [dec  (ix+x_pos)]
	rts                                    	| [ret]

increase_x_24CC:
	addq.b	#1,(x_pos,a2)                   	| [inc  (ix+x_pos)]
	rts                                    	| [ret]

dec_y_inc_x_24D0:
	jbsr	decrease_y_24C0                   	| [call decrease_y_24C0]
	jbsr	increase_x_24CC                   	| [call increase_x_24CC]
	rts                                    	| [ret]

dec_y_dec_x_24D7:
	jbsr	decrease_y_24C0                   	| [call decrease_y_24C0]
	jbsr	decrease_x_24C8                   	| [call decrease_x_24C8]
	rts                                    	| [ret]

inc_y_inc_x_24DE:
	jbsr	increase_y_24C4                   	| [call increase_y_24C4]
	jbsr	increase_x_24CC                   	| [call increase_x_24CC]
	rts                                    	| [ret]

inc_y_dec_x_24E5:
	jbsr	increase_y_24C4                   	| [call increase_y_24C4]
	jbsr	decrease_x_24C8                   	| [call decrease_x_24C8]
	rts                                    	| [ret]

cycle_sky_color_24EC:
	move.b	#0x0C,d1                        	| [ld   b,$0C]
l_24ee:
	move.w	d1,-(sp)                        	| [push bc]
	move.b	d1,d0                           	| [ld   a,b]
	jbsr	set_sky_color_24FC                	| [call set_sky_color_24FC]
	move.b	#0x09,d0                        	| [ld   a,$09]
	jbsr	delay_28D1                        	| [call delay_28D1]
	move.w	(sp)+,d1                        	| [pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_24ee                             	| [djnz $24EE]
	rts                                    	| [ret]

set_sky_color_24FC:
	and.b	#0x0F,d0                         	| [and  $0F]
	or.b	#0x10,d0                          	| [or   $10]
	move.w	#0x8440,d6                      	| attribute memory [ld   hl,$8440]
									| [ld   de,$0015]
	move.w	#0x1C-1,d2                        	| [ld   c,$1C]
l_2508:
	move.w	#0x0B-1,d1                        	| [ld   b,$0B]
l_250a:
	jbsr	osd_w_colorram					| [ld   (hl),a]
	addq.w	#1,d6                           	| [inc  hl]
	dbf	D1,l_250a                             	| [djnz $250A]
	add.w  #0x15,d6
	dbf	d2,l_2508                             	| [jr   nz,$2508]
	move.w	#0x87C0,d6                      	| [ld   hl,$87C0]
	move.b	#0x3F-1,d1                        	| [ld   b,$3F]
l_2517:
	jbsr	osd_w_colorram                         	| [ld   (hl),a]
	addq.w	#1,d6                           	| [inc  hl]
	dbf	d1,l_2517                             	| [djnz $2517]
	rts                                    	| [ret]


* set default hiscores all to 20000
* (would be a good location to load highscores)
init_highscore_table_2540:
	move.w	#0x7D0,d0                      	| 20000 [ld   hl,0x07D0]
	move.w	d0,hiscore_pos_5_8840+0x18      	| best score [ld   (hiscore_pos_5_8840+0x18),hl]
	move.w	d0,hiscore_pos_5_8840+0x12      	| 2nd score [ld   (hiscore_pos_5_8840+0x12),hl]
	move.w	d0,hiscore_pos_5_8840+0xC       	| ... [ld   (hiscore_pos_5_8840+0xC),hl]
	move.w	d0,hiscore_pos_5_8840+6         	| [ld   (hiscore_pos_5_8840+6),hl]
	move.w	d0,hiscore_pos_5_8840           	| [ld   (hiscore_pos_5_8840),hl]
* set text attributes for names
	lea	high_score_names_8842(pc),a0       	| [ld   hl,high_score_names_8842]
	move.b	#0x01,d0                        	| [ld   a,0x01]
	move.b	#0x05,d1                        	| [ld   b,0x05]
l_255c:
	move.b	d0,(a0)                         	| [ld   (hl),a]
	addq.w	#6,a0
	subq.b	#1,d1                           	| [...]
	jne	l_255c                             	| [djnz 0x255C]
* set default names (AKIRA)
	lea	hiscore_pos_5_8840+0x18+3(pc),a0   	| [ld   hl,hiscore_pos_5_8840+0x18+3]
	move.b	#0x41,d0                        	| AAA [ld   a,0x41]
	jbsr	set_3_chars_2589                  	| [call set_3_chars_2589]
	lea	hiscore_pos_5_8840+0x12+3(pc),a0   	| [ld   hl,hiscore_pos_5_8840+0x12+3]
	move.b	#0x4B,d0                        	| KKK [ld   a,0x4B]
	jbsr	set_3_chars_2589                  	| [call set_3_chars_2589]
	lea	hiscore_pos_5_8840+0xC+3(pc),a0    	| [ld   hl,hiscore_pos_5_8840+0xC+3]
	move.b	#0x49,d0                        	| III [ld   a,0x49]
	jbsr	set_3_chars_2589                  	| [call set_3_chars_2589]
	lea	hiscore_pos_5_8840+9(pc),a0        	| [ld   hl,hiscore_pos_5_8840+9]
	move.b	#0x52,d0                        	| RRR [ld   a,0x52]
	jbsr	set_3_chars_2589                  	| [call set_3_chars_2589]
	lea	hiscore_pos_5_8840+3(pc),a0        	| [ld   hl,hiscore_pos_5_8840+3]
	move.b	#0x41,d0                        	| AAA [ld   a,0x41]
	jbsr	set_3_chars_2589                  	| [call set_3_chars_2589]
	rts                                    	| [ret]

set_3_chars_2589:
	move.b	d0,(a0)+                         	| [ld   (hl),a]
	                           	| [inc  hl]
	move.b	d0,(a0)+                         	| [ld   (hl),a]
									| [inc  hl]
	move.b	d0,(a0)                         	| [ld   (hl),a]
	rts                                    	| [ret]

l_258f:
	jbsr	compute_score_insertion_position_2648	| [call compute_score_insertion_position_2648]
	move.b	score_insertion_position_885F,d0	| [ld   a,(score_insertion_position_885F)]
	cmp.b	#0x06,d0                         	| [cp   $06]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	jbsr	clear_screen_and_colors_28E5      	| [call clear_screen_and_colors_28E5]
	jbsr	clear_sprites_31B7                	| [call clear_sprites_31B7]
	move.b	#0x09,d1                        	| 0xA in MAME menu [ld   b,$09]
	jbsr	play_sfx_1889                     	| play highscore entry music [call play_sfx_1889]
	jbsr	create_highscore_entry_269E       	| [call create_highscore_entry_269E]
	lea	todays_best_text_27F7+0x81A-0x7F7(pc),a0	| [ld   hl,todays_best_text_27F7+$81A-$7F7]
	move.b	#0x08,d1                        	| [ld   b,$08]
	jbsr	print_b_lines_277B                	| [call print_b_lines_277B]
												| [ld   hl,$0606]
	move.w	#0x0606,cursor_x_8800                	| [ld   (cursor_x_8800),hl]
	move.b	#0x10,d0                        	| [ld   a,$10]
	move.b	d0,cursor_color_8802            	| [ld   (cursor_color_8802),a]
	jbsr	get_current_player_score_ptr_in_de_268D	| [call get_current_player_score_ptr_in_de_268D]
	exg	d3,d6                             	| [ex   de,hl]
	jbsr	convert_number_2B40               	| [call convert_number_2B40]
	jbsr	write_5_digits_to_screen_2C54     	| [call write_5_digits_to_screen_2C54]
	move.b	#0x30,d0                        	| [ld   a,$30]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
											| [ld   hl,$060F]
	move.w	#0x0F06,cursor_x_8800                	| [ld   (cursor_x_8800),hl]
	jbsr	get_level_number_288F             	| [call get_level_number_288F]
	clr.w	d6                               	| [ld   h,$00]
	move.b	d0,d6                           	| [ld   l,a]
	jbsr	convert_number_2B40               	| [call convert_number_2B40]
	jbsr	write_2_digits_to_screen_2C6F     	| [call write_2_digits_to_screen_2C6F]
									| [ld   hl,$0616]
	move.w	#0x1606,cursor_x_8800                	| [ld   (cursor_x_8800),hl]
	move.b	#0x41,d0                        	| [ld   a,$41]
	move.b	#0x03,d1                        	| [ld   b,$03]
l_25e4:
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	subq.b	#1,d1                           	| [...]
	jne	l_25e4                             	| [djnz $25E4]
	move.b	score_insertion_position_885F,d0	| [ld   a,(score_insertion_position_885F)]
	subq.b	#1,d0                           	| [dec  a]
	move.b	d0,d1                           	| [ld   b,a]
	add.b	d0,d0                            	| [add  a,a]
	add.b	d1,d0                            	| [add  a,b]
	add.b	#0x0E,d0                         	| [add  a,$0E]
	move.b	d0,d3                           	| [ld   d,a]
	lsl.w	#8,d3
	move.b	#0x16,d3                        	| [ld   e,$16]
	movem.w	d3/d4,-(sp)                    	| [push de]
	move.w	d3,-(sp)                        	| [push de]
	move.w	(sp)+,a3                        	| [pop  iy]
	lea	0x0616,a2                      	| [ld   ix,$0616]  this is a value
	move.b	#0x02,d4                        	| [ld   e,$02]
	move.w	d3,cursor_x_8800                	| [ld   (cursor_x_8800),de]
	move.b	#0x18,d0                        	| [ld   a,$18]
	move.b	#0x17,d1                        	| [ld   b,$17]
l_2606:
	jbsr	set_attribute_at_current_pos_292D 	| [call set_attribute_at_current_pos_292D]
	subq.b	#1,d1                           	| [...]
	jne	l_2606                             	| [djnz $2606]
	move.b	score_insertion_position_885F,d0	| [ld   a,(score_insertion_position_885F)]
	move.b	d0,d1                           	| [ld   b,a]
	move.b	#0x05,d0                        	| [ld   a,$05]
	sub.b	d1,d0                            	| [sub  b]
	add.b	d0,d0                            	| [add  a,a]
	move.b	d0,d1                           	| [ld   b,a]
	add.b	d0,d0                            	| [add  a,a]
	add.b	d1,d0                            	| [add  a,b]
	clr.w	d3                               	| [ld   d,$00]
	move.b	d0,d3                           	| [ld   e,a]
	lea	high_score_names_8842+1,a0     	| [ld   hl,high_score_names_8842+1]
	add.w	d3,a0					| [add  hl,de]

	move.l	a0,-(sp)                        	| [push hl]
	jbsr	l_26cf                            	| [call $26CF]
	move.l	(sp)+,a0                        	| [pop  hl]
	move.b	currently_active_letter_885E,d0 	| [ld   a,(currently_active_letter_885E)]
	move.b	d0,(a0)                         	| [ld   (hl),a]
	addq.w	#1,a0                           	| [inc  hl]
	addq.w	#1,a2                           	| [inc  ix]
	addq.w	#1,a3                           	| [inc  iy]

	move.l	a0,-(sp)                        	| [push hl]
	jbsr	l_26cf                            	| [call $26CF]
	move.l	(sp)+,a0                        	| [pop  hl]
	move.b	currently_active_letter_885E,d0 	| [ld   a,(currently_active_letter_885E)]
	move.b	d0,(a0)+                         	| [ld   (hl),a]
	                           	| [inc  hl]
	addq.w	#1,a2                           	| [inc  ix]
	addq.w	#1,a3                           	| [inc  iy]

	move.l	a0,-(sp)                        	| [push hl]
	jbsr	l_26cf                            	| [call $26CF]
	move.l	(sp)+,a0                        	| [pop  hl]
	move.b	currently_active_letter_885E,d0 	| [ld   a,(currently_active_letter_885E)]
	move.b	d0,(a0)                         	| [ld   (hl),a]
	move.b	#0x80,d0                        	| [ld   a,$80]
	jbsr	delay_28D1                        	| [call delay_28D1]
	rts                                    	| [ret]

compute_score_insertion_position_2648:
	move.b	#0x06,d0                        	| [ld   a,$06]
	move.b	d0,score_insertion_position_885F	| [ld   (score_insertion_position_885F),a]
	jbsr	get_current_player_score_ptr_in_de_268D	| [call get_current_player_score_ptr_in_de_268D]
	move.w	hiscore_pos_5_8840(pc),a0       	| [ld   hl,(hiscore_pos_5_8840)]
	jbsr	compare_hl_to_de_2D99             	| [call compare_hl_to_de_2D99]
	bcs.b	0f
	rts                                    	| [ret  nc]
0:
	move.b	#0x05,d0                        	| [ld   a,$05]
	move.b	d0,score_insertion_position_885F	| [ld   (score_insertion_position_885F),a]
	move.w	hiscore_pos_5_8840+6(pc),a0     	| [ld   hl,(hiscore_pos_5_8840+6)]
	jbsr	compare_hl_to_de_2D99             	| [call compare_hl_to_de_2D99]
	bcs.b	0f
	rts                                    	| [ret  nc]
0:
	move.b	#0x04,d0                        	| [ld   a,$04]
	move.b	d0,score_insertion_position_885F	| [ld   (score_insertion_position_885F),a]
	move.w	hiscore_pos_5_8840+12(pc),a0    	| [ld   hl,(hiscore_pos_5_8840+12)]
	jbsr	compare_hl_to_de_2D99             	| [call compare_hl_to_de_2D99]
	bcs.b	0f
	rts                                    	| [ret  nc]
0:
	move.b	#0x03,d0                        	| [ld   a,$03]
	move.b	d0,score_insertion_position_885F	| [ld   (score_insertion_position_885F),a]
	move.w	hiscore_pos_5_8840+0x12(pc),a0  	| pos 2 [ld   hl,(hiscore_pos_5_8840+$12)]
	jbsr	compare_hl_to_de_2D99             	| [call compare_hl_to_de_2D99]
	bcs.b	0f
	rts                                    	| [ret  nc]
0:
	move.b	#0x02,d0                        	| [ld   a,$02]
	move.b	d0,score_insertion_position_885F	| [ld   (score_insertion_position_885F),a]
	move.w	hiscore_pos_5_8840+0x18(pc),a0  	| pos 1 [ld   hl,(hiscore_pos_5_8840+$18)]
	jbsr	compare_hl_to_de_2D99             	| [call compare_hl_to_de_2D99]
	bcs.b	0f
	rts                                    	| [ret  nc]
0:
	move.b	#0x01,d0                        	| [ld   a,$01]
	move.b	d0,score_insertion_position_885F	| [ld   (score_insertion_position_885F),a]
	rts                                    	| [ret]

get_current_player_score_ptr_in_de_268D:
	move.b	player_number_8816,d0           	| [ld   a,(player_number_8816)]
	btst.b	#0,d0                           	| is this player 1 or 2? [bit  0,a]
	jeq	l_2699                             	| [jr   z,$2699]
	move.w	player_2_score_8810(pc),a1      	| [ld   de,(player_2_score_8810)]
	rts                                    	| [ret]
l_2699:
	move.w	player_1_score_880E(pc),a1      	| [ld   de,(player_1_score_880E)]
	rts                                    	| [ret]

create_highscore_entry_269E:
* make room for newly attained highscore
	lea	hiscore_pos_5_8840(pc),a1          	| [ld   de,hiscore_pos_5_8840]
	lea	hiscore_pos_5_8840+6(pc),a0        	| [ld   hl,hiscore_pos_5_8840+6]
	move.b	score_insertion_position_885F,d0	| [ld   a,(score_insertion_position_885F)]
	move.b	d0,d1                           	| [ld   b,a]
	move.b	#0x05,d0                        	| [ld   a,$05]
	sub.b	d1,d0                            	| [sub  b]
	jeq	l_26b6                             	| [jr   z,$26B6]
	add.b	d0,d0                            	| [add  a,a]
	move.b	d0,d1                           	| [ld   b,a]
	add.b	d0,d0                            	| [add  a,a]
	add.b	d1,d0                            	| [add  a,b]
	clr.b	d1                               	| [ld   b,$00]
	move.b	d0,d2                           	| [ld   c,a]
	jbsr	ldir                              	| [ldir]
l_26b6:
	exg	a1,a0                              	| [ex   de,hl]

	move.l	a0,-(sp)                        	| [push hl]
	jbsr	get_current_player_score_ptr_in_de_268D	| [call get_current_player_score_ptr_in_de_268D]
	move.l	(sp)+,a0                        	| [pop  hl]
	move.b	d4,(a0)+                         	| [ld   (hl),e]
	                           	| [inc  hl]
	move.b	d3,(a0)+                         	| [ld   (hl),d]
	                           	| [inc  hl]

	move.l	a0,-(sp)                        	| [push hl]
* also note down act
	jbsr	get_level_number_288F             	| [call get_level_number_288F]
	move.l	(sp)+,a0                        	| [pop  hl]
	move.b	d0,(a0)+                         	| [ld   (hl),a]
	                           	| [inc  hl]
* put space in name, will be filled later
	move.b	#0x20,d0                        	| [ld   a,$20]
	move.b	d0,(a0)+                         	| [ld   (hl),a]
	                           	| [inc  hl]
	move.b	d0,(a0)+                         	| [ld   (hl),a]
	                           	| [inc  hl]
	move.b	d0,(a0)                         	| [ld   (hl),a]
	rts                                    	| [ret]

l_26cf:
	move.b	#0x10,d0                        	| [ld   a,$10]
	move.b	d0,cursor_color_8802            	| [ld   (cursor_color_8802),a]
	lea	currently_active_letter_885E,a0	| [ld   hl,currently_active_letter_885E]
	move.b	#0x41,(a0)                      	| [ld   (hl),$41]
* loop to select current letter in name
l_26d9:
	jbsr	write_active_letter_to_screen_2756	| [call write_active_letter_to_screen_2756]
	move.b	#0x0A,d0                        	| [ld   a,$0A]
	jbsr	delay_28D1                        	| [call delay_28D1]
	move.b	#0x0C,d1                        	| [ld   b,$0C]
l_26e3:
	movem.w	d1/d2,-(sp)                    	| [push bc]
	jbsr	read_player_inputs_2AFB           	| [call read_player_inputs_2AFB]
	not.b	d0                               	| flip bits [cpl]
	movem.w	(sp)+,d1/d2                    	| [pop  bc]
	and.b	#0x8C,d0                         	| [and  $8C]
	jeq	l_26f4                             	| [jr   z,$26F4]
	move.b	#0x01,d0                        	| [ld   a,$01]
	jbsr	delay_28D1                        	| [call delay_28D1]
	subq.b	#1,d1                           	| [...]
	jne	l_26e3                             	| [djnz $26E3]
l_26f4:
	jbsr	read_player_inputs_2AFB           	| [call read_player_inputs_2AFB]
	not.b	d0                               	| [cpl]
	btst.b	#7,d0                           	| [bit  7,a]
	jne	l_274a                             	| [jr   nz,$274A]
	btst.b	#2,d0                           	| [bit  2,a]
	jne	l_2730                             	| [jr   nz,$2730]
	btst.b	#3,d0                           	| [bit  3,a]
	jne	l_273d                             	| [jr   nz,$273D]
	move.b	sound_channel_0_struct_8C60,d0  	| [ld   a,(sound_channel_0_struct_8C60)]
	tst.b	d0                               	| [and  a]
	jne	l_2712                             	| [jr   nz,$2712]
	move.l	(sp)+,a0                        	| [pop  hl]
	move.l	(sp)+,a0                        	| [pop  hl]
	move.b	#0x40,d0                        	| [ld   a,$40]
	jbsr	delay_28D1                        	| [call delay_28D1]
	rts                                    	| [ret]
l_2712:
	jbsr	increase_counter_0875             	| [call increase_counter_0875]
	move.b	counter_msb_8825,d0             	| [ld   a,(counter_msb_8825)]
	and.b	#0x07,d0                         	| [and  $07]
	jne	l_26f4                             	| [jr   nz,$26F4]
	move.b	#0x10,d1                        	| [ld   b,$10]
	move.b	counter_msb_8825,d0             	| [ld   a,(counter_msb_8825)]
	btst.b	#3,d0                           	| [bit  3,a]
	jne	l_2727                             	| [jr   nz,$2727]
	move.b	#0x16,d1                        	| [ld   b,$16]
l_2727:
	move.b	d1,d0                           	| [ld   a,b]
	move.b	d0,cursor_color_8802            	| [ld   (cursor_color_8802),a]
	jbsr	write_active_letter_to_screen_2756	| [call write_active_letter_to_screen_2756]
	jra	l_26f4                             	| [jr   $26F4]
l_2730:
	lea	currently_active_letter_885E,a0	| [ld   hl,currently_active_letter_885E]
	subq.b	#1,(a0)                         	| [dec  (hl)]
	move.b	#0x40,d0                        	| [ld   a,$40]
	cmp.b	(a0),d0                          	| [cp   (hl)]
	jne	l_26d9                             	| [jr   nz,$26D9]
	move.b	#0x5B,(a0)                      	| [ld   (hl),$5B]
	jra	l_26d9                             	| [jr   $26D9]
l_273d:
	lea	currently_active_letter_885E,a0	| [ld   hl,currently_active_letter_885E]
	addq.b	#1,(a0)                         	| [inc  (hl)]
	move.b	#0x5C,d0                        	| did we reach after Z yet? [ld   a,$5C]
	cmp.b	(a0),d0                          	| [cp   (hl)]
	jne	l_26d9                             	| [jr   nz,$26D9]
	move.b	#0x41,(a0)                      	| wrap to A [ld   (hl),$41]
	jra	l_26d9                             	| [jr   $26D9]
l_274a:
	jbsr	display_highs_2763                	| [call display_highs_2763]
	move.b	#0x18,d0                        	| [ld   a,$18]
	move.b	d0,cursor_color_8802            	| [ld   (cursor_color_8802),a]
	jbsr	write_active_letter_to_screen_2756	| [call write_active_letter_to_screen_2756]
	rts                                    	| [ret]

* < ix contains XY of letter to insert in name
write_active_letter_to_screen_2756:

	move.w	a2,-(sp)                        	| ix contains X,Y [push ix]
l_2758:
	move.w	(sp)+,d6                        	| get ix in hl (interface needs it) [pop  hl]
	move.b	d6,cursor_y_8801
	lsr.w	#8,d6
	move.b	d6,cursor_x_8800		          	| [ld   (cursor_x_8800),hl]
	move.b	currently_active_letter_885E,d0 	| currently active letter [ld   a,(currently_active_letter_885E)]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	rts                                    	| [ret]

display_highs_2763:
	move.b	#0x18,d0                        	| [ld   a,$18]
	move.b	d0,cursor_color_8802            	| [ld   (cursor_color_8802),a]

	move.w	a3,-(sp)                        	| [push iy]
	jra	l_2758                             	| [jr   $2758]
l_276c:
	lea	todays_best_text_27F7(pc),a0       	| [ld   hl,todays_best_text_27F7]
	move.b	#0x02,d1                        	| [ld   b,$02]
l_2771:
	jbsr	print_line_typewriter_style_29F4  	| [call print_line_typewriter_style_29F4]
	subq.b	#1,d1                           	| [...]
	jne	l_2771                             	| [djnz $2771]
	lea	score_act_text_2845(pc),a0         	| [ld   hl,score_act_text_2845]
	move.b	#0x06,d1                        	| [ld   b,$06]
print_b_lines_277B:
	jbsr	print_line_typewriter_style_29F4  	| [call print_line_typewriter_style_29F4]
	subq.b	#1,d1                           	| [...]
	jne	print_b_lines_277B                 	| [djnz print_b_lines_277B]
	move.b	#0x11,d0                        	| [ld   a,$11]
	move.b	d0,cursor_color_8802            	| [ld   (cursor_color_8802),a]
	move.b	#0x06,d1
	move.b	#0x0E,d2                    	| [ld   de,$0E06]
	lea	hiscore_pos_5_8840+0x18,a0     	| [ld   hl,hiscore_pos_5_8840+$18]
	jbsr	write_best_score_27B3             	| [call write_best_score_27B3]
	move.b	#0x06,d1
	move.b	#0x11,d2      		  	| [ld   de,$1106]
	lea	hiscore_pos_5_8840+0x12,a0     	| [ld   hl,hiscore_pos_5_8840+$12]
	jbsr	write_best_score_27B3             	| [call write_best_score_27B3]
	move.b	#0x06,d1
	move.b	#0x14,d2      		  	| [ld   de,$1406]
	lea	hiscore_pos_5_8840+12,a0       	| [ld   hl,hiscore_pos_5_8840+12]
	jbsr	write_best_score_27B3             	| [call write_best_score_27B3]
	move.b	#0x06,d1
	move.b	#0x17,d2      		  	| [ld   de,$1706]
	lea	hiscore_pos_5_8840+6,a0        	| [ld   hl,hiscore_pos_5_8840+6]
	jbsr	write_best_score_27B3             	| [call write_best_score_27B3]
	move.b	#0x06,d1
	move.b	#0x1A,d2      		  	| [ld   de,$1A06]
	lea	hiscore_pos_5_8840,a0          	| [ld   hl,hiscore_pos_5_8840]
	jbsr	write_best_score_27B3             	| [call write_best_score_27B3]
	rts                                    	| [ret]

* < DE: XY
* < HL: address of score
write_best_score_27B3:
	move.b	d4,cursor_x_8800                	| [ld   (cursor_x_8800),de]
	move.b	d3,cursor_y_8801                	| [ld   (cursor_x_8800),de]
	move.b	(a0)+,d4                         	| [ld   e,(hl)]
	                           	| [inc  hl]
	move.b	(a0)+,d3                         	| [ld   d,(hl)]
	                           	| [inc  hl]
	move.l	a0,-(sp)                        	| [push hl]
												| [ex   de,hl]
	move.b	d3,d6
	lsl.w	#8,d6
	move.b	d4,d6
	jbsr	convert_number_2B40               	| [call convert_number_2B40]
	jbsr	write_5_digits_to_screen_2C54     	| [call write_5_digits_to_screen_2C54]
	move.b	#0x30,d0                        	| [ld   a,$30]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	move.b	#0x03,d1                        	| [ld   b,$03]
l_27ca:
	jbsr	put_blank_at_current_pos_2900     	| [call put_blank_at_current_pos_2900]
	subq.b	#1,d1                           	| [...]
	jne	l_27ca                             	| [djnz $27CA]
	move.l	(sp)+,a0                        	| [pop  hl]
	move.b	(a0)+,d0                         	| [ld   a,(hl)]
	move.l	a0,-(sp)                        	| [push hl]
	clr.w	d6                               	| [ld   h,$00]
	move.b	d0,d6                           	| [ld   l,a]
	jbsr	convert_number_2B40               	| [call convert_number_2B40]
	jbsr	write_2_digits_to_screen_2C6F     	| [call write_2_digits_to_screen_2C6F]
	move.b	#0x05,d1                        	| [ld   b,$05]
l_27de:
	jbsr	put_blank_at_current_pos_2900     	| [call put_blank_at_current_pos_2900]
	subq.b	#1,d1                           	| [...]
	jne	l_27de                             	| [djnz $27DE]
	move.l	(sp)+,a0                        	| [pop  hl]
	jbsr	l_27e8                            	| [call $27E8]
	rts                                    	| [ret]
l_27e8:
	move.b	(a0),d0                         	| [ld   a,(hl)]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	addq.w	#1,a0                           	| [inc  hl]
	move.b	(a0),d0                         	| [ld   a,(hl)]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	addq.w	#1,a0                           	| [inc  hl]
	move.b	(a0),d0                         	| [ld   a,(hl)]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	rts                                    	| [ret]
todays_best_text_27F7:
	.byte	0x07,0x08,0x18,0x54,0x4F,0x44,0x41,0x59,0x3E,0x53,0x20,0x20,0x42,0x45,0x53,0x54  	| ...TODAY>S  BEST
	.byte	0x20,0xB5,0x07,0x05,0x10,0x4C,0x49,0x53,0x54,0x20,0x4F,0x46,0x20,0x50,0x4C,0x41  	|  µ...LIST OF PLA
	.byte	0x59,0x45,0xD2,0x05,0x02,0x18,0x45,0x4E,0x54,0x45,0x52,0x20,0x59,0x4F,0x55,0x52  	| YEÒ...ENTER YOUR
	.byte	0x20,0x49,0x4E,0x49,0x54,0x49,0x41,0x4C,0xD3,0x07,0x04,0x17,0x53,0x43,0x4F,0x52  	|  INITIALÓ...SCOR
	.byte	0x45,0x20,0x20,0x20,0x41,0x43,0x54,0x20,0x20,0x20,0x4E,0x41,0x4D,0xC5   			| E   ACT   NAMÅ..
score_act_text_2845:
	.byte	0x07,0x0B,0x19,0x53,0x43,0x4F,0x52,0x45,0x20,0x20,0x20,0x41,0x43,0x54,0x20,0x20,0x20,0x4E   | .SCORE   ACT   N
	.byte	0x41,0x4D,0xC5,0x02,0x0E,0x11,0x31,0x53,0xD4,0x02,0x11,0x11,0x32,0x4E,0xC4,0x02  			| AMÅ...1SÔ...2NÄ.
	.byte	0x14,0x11,0x33,0x52,0xC4,0x02,0x17,0x11,0x34,0x54,0xC8,0x02,0x1A,0x11,0x35,0x54  			| ..3RÄ...4TÈ...5TH
	.byte	0xC8
	.align	2

get_level_number_288F:
	lea	level_number_player1_8812,a0   	| [ld   hl,level_number_player1_8812]
	move.b	player_number_8816,d0           	| [ld   a,(player_number_8816)]
	btst.b	#0,d0                           	| [bit  0,a]
	jeq	l_289c                             	| [jr   z,$289C]
	lea	level_number_player2_8813,a0   	| [ld   hl,level_number_player2_8813]
l_289c:
	move.b	(a0),d0                         	| [ld   a,(hl)]
	rts                                    	| [ret]

get_nb_lives_289E:
	lea	lives_counter_p1_8814,a0       	| [ld   hl,lives_counter_p1_8814]
	move.b	player_number_8816,d0           	| [ld   a,(player_number_8816)]
	btst.b	#0,d0                           	| [bit  0,a]
	jeq	l_28ab                             	| [jr   z,$28AB]
	lea	lives_counter_p2_8815,a0       	| [ld   hl,lives_counter_p2_8815]
l_28ab:
	move.b	(a0),d0                         	| [ld   a,(hl)]
	and.b	#0x7F,d0                         	| [and  $7F]
	rts                        


add_to_current_player_score_28AF:
	tst.b	currently_playing_8819       	| [ld   a,(currently_playing_8819)]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	move.b	player_number_8816,d0           	| [ld   a,(player_number_8816)]
	btst.b	#0,d0                           	| [bit  0,a]
	jeq	l_28c6                             	| [jr   z,$28C6]
	move.w	player_2_score_8810,d6      	| [ld   hl,(player_2_score_8810)]
	add.w	d3,d6							| [add  hl,de]
	move.w	d6,player_2_score_8810          	| [ld   (player_2_score_8810),hl]
	jbsr	update_and_display_p1_score_2C24  	| [call update_and_display_p1_score_2C24]
	rts                                    	| [ret]

* add de to player 1 score
l_28c6:
	move.w	player_1_score_880E,d6      	| [ld   hl,(player_1_score_880E)]
	add.w	d3,d6							| [add  hl,de]
	move.w	d6,player_1_score_880E          	| [ld   (player_1_score_880E),hl]
	jbsr	update_and_display_p1_score_2BAE  	| [call update_and_display_p1_score_2BAE]
	rts                                    	| [ret]


 * a:	value to wait (1 = 1/5th of seconds roughly speaking)
delay_28D1:
	move.b	d0,delay_timer_8820             	| [ld   (delay_timer_8820),a]
l_28d4:
	move.b	delay_timer_8820,d0             	| [ld   a,(delay_timer_8820)]
	jne	l_28d4                             	| [jr   nz,0x28D4]
	rts                                    	| [ret]


clear_screen_and_colors_28E5:
	* not very useful to transcode that part. Just re-code it
	move.w	#0x8000,d6
	move.w	#0x3FF,d1
	move.b	#0x20,d0
0:
	jbsr	osd_w_videoram
	addq.w	#1,d6
	dbf		d1,0b
* same thing with attributes
	move.w	#0x3FF,d1
	clr		d0
0:
	jbsr	osd_w_colorram
	addq.w	#1,d6
	dbf		d1,0b
	rts


put_blank_at_current_pos_2900:
	move.w	d0,-(sp)                        	| [push af]
	move.b	#0x20,d0                        	| [ld   a,$20]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	move.w	(sp)+,d0                        	| [pop  af]
	rts                                    	| [ret]
move_cursor_b_290B:
	move.w	d0,-(sp)                        	| [push af]
	move.l	a0,-(sp)                        	| [push hl]
	lea	cursor_x_8800(pc),a0               	| [ld   hl,cursor_x_8800]
	move.b	(a0),d0                         	| [ld   a,(hl)]
	sub.b	d1,d0                            	| [sub  b]
	move.b	d0,(a0)+                         	| [ld   (hl),a]
										| [inc  hl]
	addq.b	#1,(a0)                         	| [inc  (hl)]
	move.l	(sp)+,a0                        	| [pop  hl]
	move.w	(sp)+,d0                        	| [pop  af]
	move.w	(sp)+,d1                        	| [pop  bc]
	rts                                    	| [ret]


move_cursor_1_2919:
	move.w	d1,-(sp)                        	| [push bc]
	move.b	#0x01,d1                        	| [ld   b,$01]
	jra	move_cursor_b_290B         	| [jr   move_cursor_b_290B]

move_cursor_2_291E:
	move.w	d1,-(sp)                        	| [push bc]
	move.b	#0x02,d1                        	| [ld   b,$02]
	jra	move_cursor_b_290B         	| [jr   move_cursor_b_290B]

move_cursor_4_2923:
	move.w	d1,-(sp)                        	| [push bc]
	move.b	#0x04,d1                        	| [ld   b,$04]
	jra	move_cursor_b_290B         	| [jr   move_cursor_b_290B]

move_cursor_1A_2928:
	move.w	d1,-(sp)                        	| [push bc]
	move.b	#0x1A,d1                        	| [ld   b,$1A]
	jra	move_cursor_b_290B         	| [jr   move_cursor_b_290B]

* < A: attribute code to put at current screen address
* (doesn't write at this address but in attributes at +0x400)
* updates current position

set_attribute_at_current_pos_292D:
	movem.w	d0-d3,-(sp)                        	| [push af]
	                     	| [push bc]
	                     	| [push bc]
	                     	| [push de]
	move.l	a0,-(sp)                        	| [push hl]
	move.w	d0,-(sp)                        	| [push af]
	move.b	cursor_x_8800,D2            	| get current X & Y [ld   bc,(cursor_x_8800)]
	move.b	cursor_y_8801,D1            	| get current X & Y [ld   bc,(cursor_x_8800)]
	jbsr	convert_coords_to_screen_address_296F	| [call convert_coords_to_screen_address_296F]
	move.w	(sp)+,d0                        	| [pop  af]
	jra	l_294f                             	| [jr   0x294F]

* < A: tile code to put at current screen address with current color
* updates current position

set_tile_at_current_pos_293C:
	movem.w	d0-d3/d6,-(sp)                        	| store a lot of registers :) [push af]
											| [push bc]
											| [push bc]
											| [push de]
	                        	| [push hl]
	move.w	d0,-(sp)                        	| save A again [push af]
	move.b	cursor_x_8800,D2            	| get current X & Y [ld   bc,(cursor_x_8800)]
	move.b	cursor_y_8801,D1            	| get current X & Y [ld   bc,(cursor_x_8800)]
	jbsr	convert_coords_to_screen_address_296F	| convert to address in HL [call convert_coords_to_screen_address_296F]
	move.w	(sp)+,d0                        	| restore A [pop  af]
	jbsr	osd_w_videoram                    	| put value of A at screen XY [ld   (hl),a]
	move.b	cursor_color_8802,d0            	| get current attribute [ld   a,(cursor_color_8802)]
	and.b	#0x1F,d0                         	| mask attribute bits [and  0x1F]
l_294f:
    add.w	#0x400,d6		                  	| address of attributes = screen + 0x400 [ld   de,0x0400]
	jbsr	osd_w_colorram                         	| store attribute for tile [ld   (hl),a]
												| [ld   a,c]
	addq.b	#1,d2                           	| X += 1 [inc  a]
												| [ld   c,a]
	cmp.b	#0x1D,d2                         	| X > 0x1C (end of row) ? [cp   0x1D]
	jcs	l_2966                             	| no, store X and Y and go out [jr   c,0x2966]
	clr.b	d2                               	| set C (X) to 0 [ld   c,0x00]
	addq.b	#1,d1                           	| [inc  a]	                           	| X += 1 [ld   b,a]
	cmp.b	#0x24,d1                         	| Y > 0x24 (end of screen) ? [cp   0x24]
	jcs	l_2966                             		| no, leave it [jr   c,0x2966]
	clr.b	d1                               	| start of line [ld   b,0x00]
l_2966:
	bsr		set_current_cursor_from_bc	    	| update current cursor pos [ld   (cursor_x_8800),bc]
										| [pop  hl]
	movem.w	(sp)+,d0-d3/d6                        	| [pop  de]
	                        	| [pop  bc]
	                        	| [pop  bc]
	                        	| [pop  af]
	rts                                    	| [ret]

* converts coordinates to screen address
* 8000 is bottom of screen
* < B: X (D1)
* < C: Y (D2)
* > HL (D6)
convert_coords_to_screen_address_296F:
	move.b	d1,d0                           	| load B into A [ld   a,b]
	cmp.b	#0x20,d0                         	| is A < 0x20 [cp   0x20]
	jcc	l_2989                             	| if A >= 0x20 goto 0x2989 [jr   nc,0x2989]
	move.b	d2,d0                           	| load C (Y) into A [ld   a,c]
	cmp.b	#0x1C,d0                         	| compare [cp   0x1C]
	jcc	l_29b2                             	| if A >= 0x1C goto 0x29B2 [jr   nc,0x29B2]
	add.b	d0,d0                            	| multiply a by 2 [add  a,a]
	clr.w	d3                               	| [ld   d,0x00]
	move.b	d0,d3                           	| extend a into DE [ld   e,a]
	lea	screen_line_address_table_29B6(pc),a0	| [ld   hl,screen_line_address_table_29B6]
	move.w	(a0,d3.w),d3						| to get an entry into address table
	move.b	(a0),d4                         	| load e [ld   e,(hl)]
	clr		d6                               	| [ld   h,0x00]
	move.b	d1,d6                           	| [ld   l,b]
* acts like multiply table for Y plus X
	add.w	d3,d6							| [add  hl,de]
	rts                                    	| [ret]
* handle limit cases
l_2989:
	cmp.b	#0x22,d0                         	| [cp   0x22]
	jcc	l_2999                             	| [jr   nc,0x2999]
	move.w	#0x8002,d6                      	| [ld   hl,0x8002]
	btst.b	#0,d0                           	| [bit  0,a]
	jeq	l_2997                             	| [jr   z,0x2997]
	move.w	#0x8022,d6                     	| [ld   hl,0x8022]
l_2997:
	jra	l_29a7                             	| [jr   0x29A7]
l_2999:
	cmp.b	#0x24,d0                         	| [cp   0x24]
	jcc	l_29b2                             	| [jr   nc,0x29B2]
	move.w	#0x83C2,d6                      	| set screen address to 83C2 [ld   hl,0x83C2]
	btst.b	#0,d0                           	| [bit  0,a]
	jeq	l_29a7                             	| [jr   z,0x29A7]
	move.w	#0x83E2,d6                      	| set screen address to 83E2 [ld   hl,0x83E2]
l_29a7:
	move.b	#0x1B,d0                        	| [ld   a,0x1B]
	cmp.b	d2,d0                            	| [cp   c]
	jcs	l_29b2                             	| [jr   c,0x29B2]
	sub.b	d2,d0                            	| [sub  c]
	clr		d3                               	| [ld   d,0x00]
	move.b	d0,d3                           	| [ld   e,a]
	add.w	d3,d6								| [add hl,de]
	rts                                    	| [ret]
l_29b2:
	move.w	#0x8000,d6      	| [ld   hl,video_tile_memory_8000]
	rts                                    	| [ret]

screen_line_address_table_29B6:
	.word	0x83a0,0x8380,0x8360,0x8340,0x8320,0x8300,0x82e0,0x82c0
	.word	0x82a0,0x8280,0x8260,0x8240,0x8220,0x8200,0x81e0,0x81c0
	.word	0x81a0,0x8180,0x8160,0x8140,0x8120,0x8100,0x80e0,0x80c0
	.word	0x80a0,0x8080,0x8060,0x8040,0x8020,0x8000,0x8000

* prints a line with a possible delay between each character
* HL (a0) contains pointer on coordinates + color & attributes + text
* and is updated on exit
* if text attribute bit 7 is set, then each character is printed with a delay
* making a typewriter effect
 
print_line_typewriter_style_29F4:
	move.b	(a0)+,d0                         	| load text X [ld   a,(hl)]
	move.b	d0,cursor_x_8800                	| store in current X [ld   (cursor_x_8800),a]
	                           	| [inc  hl]
	move.b	(a0)+,d0                         	| load text Y [ld   a,(hl)]
	move.b	d0,cursor_y_8801                	| store in current Y [ld   (cursor_y_8801),a]
	                           	| [inc  hl]
	move.b	(a0)+,d0                         	| load text color [ld   a,(hl)]
	move.b	d0,cursor_color_8802            	| store in current color [ld   (cursor_color_8802),a]
	                           	| [inc  hl]
l_2a03:
	move.b	(a0),d0                         	| get character [ld   a,(hl)]
	btst.b	#7,d0                           	| [bit  7,a]
	jne	l_2a1a                             	| [jr   nz,0x2A1A]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	addq.w	#1,a0                           	| [inc  hl]
	move.b	cursor_color_8802,d0            	| [ld   a,(cursor_color_8802)]
	btst.b	#7,d0                           	| stop when last bit is set [bit  7,a]
	jeq	l_2a03                             	| [jr   z,0x2A03]
	move.b	#0x04,d0                        	| [ld   a,0x04]
	jbsr	delay_28D1                        	| [call delay_28D1]
	jra	l_2a03                             	| [jr   0x2A03]
l_2a1a:
	and.b	#0x7F,d0                         	| [and  0x7F]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	addq.w	#1,a0                           	| [inc  hl]
	move.b	cursor_color_8802,d0            	| [ld   a,(cursor_color_8802)]
	btst.b	#7,d0                           	| [bit  7,a]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	move.b	#0x04,d0                        	| [ld   a,0x04]
	jbsr	delay_28D1                        	| [call delay_28D1]
	rts                                    	| [ret]
	
l_2a2c:
	lea	push_string_2A7D(pc),a0            	| [ld   hl,push_string_2A7D]
	jbsr	print_line_typewriter_style_29F4                   	| [call print_line_typewriter_style_29F4]
	lea	push_string_2A7D+0x87-0x7D(pc),a0    	| [ld   hl,start_button_string_2A87]
	jbsr	print_line_typewriter_style_29F4                   	| [call print_line_typewriter_style_29F4]
	lea	push_string_2A7D+0x97-0x7D(pc),a0	| [ld   bc,one_or_two_player_string_2A97]
	move.b	#0x01,d3                        	| [ld   d,0x01]
	move.b	number_of_credits_8808,d0       	| [ld   a,(number_of_credits_8808)]
	cmp.b	d3,d0                            	| [cp   d]
	jne	l_2a46                             	| [jr   nz,0x2A46]
	lea	push_string_2A7D+0xA8-0x7D(pc),a0 	| [ld   bc,one_player_only_string_2AA8]
l_2a46:
	jbsr	print_line_typewriter_style_29F4                   	| [call print_line_typewriter_style_29F4]
	lea	push_string_2A7D+0xB8-0x7D(pc),a0          	| [ld   hl,credit_string_2AB8]
	jbsr	print_line_typewriter_style_29F4                   	| [call print_line_typewriter_style_29F4]
	jbsr	display_number_of_credits_2B7A    	| [call display_number_of_credits_2B7A]
	lea	copyright_string_2ACE(pc),a0       	| [ld   hl,copyright_string_2ACE]
	jbsr	print_line_typewriter_style_29F4                   	| [call print_line_typewriter_style_29F4]
	lea	bonus_for_30000_pts_2ADC(pc),a0    	| [ld   hl,bonus_for_30000_pts_2ADC]
	jbsr	print_line_typewriter_style_29F4                   	| [call print_line_typewriter_style_29F4]
**	lea	for_50000_pts_2AF3(pc),a0          	| [ld   hl,for_50000_pts_2AF3]
**	jbsr	osd_get_dip
**	move.b	dip_switches_9040,d0            	| [ld   a,(dip_switches_9040)]
**	btst.b	#0,d0                           	| [bit  0,a]
* if DSW is set accordignly, overwrite "30000" string with "50000"
**	beq	0f
**	jbsr	print_line_typewriter_style_29F4                   	| [call nz,print_line_typewriter_style_29F4]
*0:
	move.b	#0x0B,d0                        	| [ld   a,0x0B]
	move.b	d0,cursor_color_8802            	| [ld   (cursor_color_8802),a]
											| [ld   h,0x14]
											| [ld   l,0x03]
	move.w	#0x0314,cursor_x_8800                	| [ld   (cursor_x_8800),hl]
	move.b	#0x24,d0                        	| [ld   a,0x24]
	jbsr	set_2x2_tile_2F00                 	| [call set_2x2_tile_2F00]
	rts                                    	| [ret]
	
push_string_2A7D:
	.byte	0x0A,0x09,0x17,0x50,0x20,0x55,0x20,0x53,0x20
	.byte	0xC8,0x07,0x0C,0x10,0x53,0x54,0x41  | . .P U S H...STA
	.byte	0x52,0x54,0x20,0x20,0x42,0x55,0x54,0x54,0x4F,0xCE,0x07,0x0F,0x18,0x31,0x20,0x4F   | RT  BUTTON...1 O
	.byte	0x52,0x20,0x32,0x20,0x50,0x4C,0x41,0x59,0x45,0x52,0xD3,0x07,0x0F,0x18,0x31,0x20   | R 2 PLAYERS...1
	.byte	0x50,0x4C,0x41,0x59,0x45,0x52,0x20,0x4F,0x4E,0x4C,0xD9,0x07,0x12,0x10,0x43,0x52   | PLAYER ONLY...CR
	.byte	0x45,0x44,0x49,0x54,0xA0,0x07,0x0F,0x10,0x46,0x52,0x45,0x45,0x20,0x50,0x4C,0x41   | EDITS...FREE PLA
	.byte	0xD9

copyright_string_2ACE:
	.byte	0x08,0x19,0x10,0x40,0x20,0x53,0x45,0x47,0x41,0x20,0x31,0x39,0x38,0xB2
bonus_for_30000_pts_2ADC:
	.byte	0x06,0x15,0x18,0x42,0x4F,0x4E,0x55,0x53,0x20,0x46,0x4F,0x52,0x20,0x33,0x30,0x30,0x30   |..BONUS FOR 3000
	.byte	0x30,0x20,0x50,0x54,0x53,0xBA
for_50000_pts_2AF3:
	.byte	0x10,0x15,0x18,0x35,0x30,0x30,0x30,0xB0  | 0 PTS....50000

	.align	2


* > A (active low): control bits
read_player_inputs_2AFB:
	move.b	cocktail_mode_8818,d0           	| [ld   a,(cocktail_mode_8818)]
	tst.b	d0                               	| [and  a]
	jeq	l_2b0c                             	| [jr   z,$2B0C]
	move.b	player_number_8816,d0           	| [ld   a,(player_number_8816)]
	and.b	#0x01,d0                         	| [and  $01]
	jeq	l_2b0c                             	| [jr   z,$2B0C]
* read player 2 joystick
	**move.b	0x9080,d0                       	| [ld   a,($9080)]
	rts                                    	| [ret]
* read player 1 joystick
l_2b0c:
	**move.b	coin_input_90C0,d0              	| [ld   a,(coin_input_90C0)]
	rts                                    	| [ret]


update_all_scores_2B10:
	lea	score_titles_string_2B20,a0    	| [ld   hl,score_titles_string_2B20]
	jbsr	print_line_typewriter_style_29F4                   	| [call print_line_typewriter_style_29F4]
	jbsr	write_hiscore_to_screen_2B93      	| [call write_hiscore_to_screen_2B93]
	jbsr	update_and_display_p1_score_2BAE  	| [call update_and_display_p1_score_2BAE]
	jbsr	update_and_display_p2_score_2C24  	| [call update_and_display_p2_score_2C24]
	rts                                    	| [ret]

score_titles_string_2B20:
	dc.b	0x01,0x22,0x11,0x31,0x50,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	dc.b	0x48,0x49,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x32,0xD0   | 01 21 10 43 52 45 44 49 D4        2Ð.!.CREDIÔ
	.align	2

* < HL (d6): write pseudo-BCD 4 digits at current cursor
* updates number_buffer_8803
convert_number_2B40:
	move.l	a2,-(sp)                        	| [push ix]
	move.l	a3,-(sp)                        	| [push iy]
	lea	powers_of_ten_table_2B70(pc),a3    	| [ld   iy,powers_of_ten_table_2B70]
	lea	number_buffer_8803,a2          	| [ld   ix,number_buffer_8803]
l_2b4c:
	clr.b	d0                               	| [xor  a]
	move.w	(a3),d3                    	| [ld   e,(iy+$00)]
												| [ld   d,(iy+$01)]
l_2b53:
											| [and  a]
	sub.w	d3,d6							| [sbc  hl,de] with C cleared, no sub hl,de instruction
	jcs	l_2b5b                             	| [jr   c,$2B5B]
	addq.b	#1,d0                           	| [inc  a]
	jra	l_2b53                             	| [jr   $2B53]
l_2b5b:
	add.w	d3,d6						| [add  hl,de]
	or.b	#0x30,d0                          	| add '0' character [or   $30]
	move.b	d0,(a2)+                    	| store in buffer [ld   (ix+$00),a]
	                           	| [inc  ix]
	addq.w	#2,a3                           	| [inc  iy]*2
	btst.b	#0,d3                           	| [bit  0,e]
	jeq	l_2b4c                             	| [jr   z,$2B4C]
	move.l	(sp)+,a3                        	| [pop  iy]
	move.l	(sp)+,a2                        	| [pop  ix]
	rts                                    	| [ret]
powers_of_ten_table_2B70:
	.word	10000,1000,100,10,1


display_number_of_credits_2B7A:
	clr		d6                               	| [ld   h,$00]
	move.b	number_of_credits_8808,d6       	| [ld   a,(number_of_credits_8808)]
												| [ld   l,a]
	jbsr	convert_number_2B40               	| [call convert_number_2B40]
												| [ld   h,$12]
												| [ld   l,$0F]
	move.w	#0x0F12,cursor_x_8800                	| [ld   (cursor_x_8800),hl]
	move.b	#0x10,d0                        	| [ld   a,$10]
	move.b	d0,cursor_color_8802            	| [ld   (cursor_color_8802),a]
	jbsr	write_2_digits_to_screen_2C6F     	| [call write_2_digits_to_screen_2C6F]
	rts        


write_hiscore_to_screen_2B93:
	move.w	high_score_880C,d6          	| [ld   hl,(high_score_880C)]
	jbsr	convert_number_2B40               	| [call convert_number_2B40]
												| [ld   h,$22]
												| [ld   l,$0C]
	* Y=$22: top of screen!!
	move.w	#0x0C22,cursor_x_8800                	| [ld   (cursor_x_8800),hl]
	move.b	#0x10,d0                        	| [ld   a,$10]
	move.b	d0,cursor_color_8802            	| [ld   (cursor_color_8802),a]
	jbsr	write_5_digits_to_screen_2C54     	| [call write_5_digits_to_screen_2C54]
	move.b	#0x30,d0                        	| write the fixed '0' for score [ld   a,$30]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	rts                                    	| [ret]

update_and_display_p1_score_2BAE:
	move.w	player_1_score_880E,d6      	| [ld   hl,(player_1_score_880E)]
	jbsr	convert_number_2B40               	| [call convert_number_2B40]
												| [ld   h,$22]
												| [ld   l,$03]
	move.w	#0x0322,cursor_x_8800                	| [ld   (cursor_x_8800),hl]
	move.b	#0x10,d0                        	| [ld   a,$10]
	move.b	d0,cursor_color_8802            	| [ld   (cursor_color_8802),a]
	jbsr	write_5_digits_to_screen_2C54     	| [call write_5_digits_to_screen_2C54]
	move.b	#0x30,d0                        	| write the fixed '0' for score [ld   a,$30]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	jbsr	check_p1_score_for_extra_life_2BAE	| [call check_p1_score_for_extra_life_2BAE]
	move.w	high_score_880C,d6    		      	| [ld   hl,(high_score_880C)]
	move.w	player_1_score_880E,d3    		  	| [ld   de,(player_1_score_880E)]
	jbsr	compare_hl_to_de_2D99             	| [call compare_hl_to_de_2D99]
	bcs.b	0f
	rts                                    	| [ret  nc]
0:
	move.w	d3,high_score_880C              	| [ld   (high_score_880C),de]
	jbsr	write_hiscore_to_screen_2B93      	| [call write_hiscore_to_screen_2B93]
	rts                                    	| [ret]

check_p1_score_for_extra_life_2BAE:
	lea	lives_counter_p1_8814,a0       	| [ld   hl,lives_counter_p1_8814]
	btst.b	#7,(a0)                         	| [bit  7,(hl)]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	move.w	d6,-(sp)                        	| [push hl]
	move.w	player_1_score_880E,d6      	| [ld   hl,(player_1_score_880E)]
	move.w	#0x0BB8,d3                      	| [ld   de,$0BB8]
*	move.b	dip_switches_9040,d0            	| [ld   a,(dip_switches_9040)]
*	btst.b	#0,d0                           	| [bit  0,a]
*	jeq	l_2bf5                             	| [jr   z,$2BF5]
*	move.w	#0x1388,d3                      	| 5000 [ld   de,$1388]
*l_2bf5:
	jbsr	compare_hl_to_de_2D99             	| [call compare_hl_to_de_2D99]
	movem.w	(sp)+,d6                        	| [pop  hl]
	bcc.b	0f
	rts                                    	| [ret  c]
0:
l_2bfa:
	addq.b	#1,(a0)                         	| [inc  (hl)]
	bset.b	#7,(a0)                         	| [set  7,(hl)]
	jbsr	draw_lives_2D13                            	| [call $2D13]
	move.b	#0x01,d1                        	| [ld   b,$01]
	jbsr	sound_18AF                            	| [call $18AF]
	rts                                    	| [ret]

check_p2_score_for_extra_life_2C06:
	lea	lives_counter_p2_8815,a0 		      	| [ld   hl,lives_counter_p2_8815]
	btst.b	#7,(a0)                         	| [bit  7,(hl)]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	move.w	d6,-(sp)                        	| [push hl]
	move.w	player_2_score_8810,d6      	| [ld   hl,(player_2_score_8810)]
	move.w	#0x0BB8,d3                      	| [ld   de,$0BB8]
*	move.b	dip_switches_9040,d0            	| [ld   a,(dip_switches_9040)]
*	btst.b	#0,d0                           	| [bit  0,a]
*	jeq	l_2c1d                             	| [jr   z,$2C1D]
*	move.w	#0x1388,d3                      	| 5000 [ld   de,$1388]
*l_2c1d:
	jbsr	compare_hl_to_de_2D99             	| [call compare_hl_to_de_2D99]
	movem.w	(sp)+,d6                        	| [pop  hl]
	bcc.b	0f
	rts                                    	| [ret  c]
0:
	jra	l_2bfa                             	| [jr   $2BFA]

update_and_display_p2_score_2C24:
	move.w	player_2_score_8810,d6      	| [ld   hl,(player_2_score_8810)]
	jbsr	convert_number_2B40               	| [call convert_number_2B40]
											| [ld   h,$22]
											| [ld   l,$15]
	move.w	#0x1522,cursor_x_8800                	| [ld   (cursor_x_8800),hl]
	move.b	#0x10,d0                        	| [ld   a,$10]
	move.b	d0,cursor_color_8802            	| [ld   (cursor_color_8802),a]
	jbsr	write_5_digits_to_screen_2C54     	| [call write_5_digits_to_screen_2C54]
	move.b	#0x30,d0                        	| [ld   a,$30]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	jbsr	check_p2_score_for_extra_life_2C06	| [call check_p2_score_for_extra_life_2C06]
	move.w	high_score_880C,d6          	| [ld   hl,(high_score_880C)]
	move.w	player_2_score_8810,d3      	| [ld   de,(player_2_score_8810)]
	jbsr	compare_hl_to_de_2D99             	| [call compare_hl_to_de_2D99]
	bcs.b	0f
	rts                                    	| [ret  nc]
0:
	move.w	d3,high_score_880C              	| [ld   (high_score_880C),de]
	jbsr	write_hiscore_to_screen_2B93      	| [call write_hiscore_to_screen_2B93]
	rts                                    	| [ret]

update_and_display_p1_score_2C24:
	move.w	player_2_score_8810(pc),a0      	| [ld   hl,(player_2_score_8810)]
	jbsr	convert_number_2B40               	| [call convert_number_2B40]
												| [ld   h,$22]
												| [ld   l,$15]
	move.w	#0x1522,cursor_x_8800                	| [ld   (cursor_x_8800),hl]
	move.b	#0x10,d0                        	| [ld   a,$10]
	move.b	d0,cursor_color_8802            	| [ld   (cursor_color_8802),a]
	jbsr	write_5_digits_to_screen_2C54     	| [call write_5_digits_to_screen_2C54]
	move.b	#0x30,d0                        	| [ld   a,$30]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	jbsr	check_p2_score_for_extra_life_2C06	| [call check_p2_score_for_extra_life_2C06]
	move.w	high_score_880C(pc),d6          	| [ld   hl,(high_score_880C)]
	move.w	player_2_score_8810(pc),d3      	| [ld   de,(player_2_score_8810)]
	jbsr	compare_hl_to_de_2D99             	| [call compare_hl_to_de_2D99]
	bcs.b	0f
	rts                                    	| [ret  nc]
0:
	move.w	d3,high_score_880C              	| [ld   (high_score_880C),de]
	jbsr	write_hiscore_to_screen_2B93      	| [call write_hiscore_to_screen_2B93]
	rts                                    	| [ret]

write_5_digits_to_screen_2C54:
	move.b	#0x05,d1                        	| write 5 numbers [ld   b,$05]
	lea	number_buffer_8803,a0          	| source [ld   hl,number_buffer_8803]
l_2c59:
	move.b	(a0),d0                         	| [ld   a,(hl)]
	cmp.b	#0x30,d0                         	| compare to '0' [cp   $30]
	jne	l_2c67                             	| different from 0, write all numbers [jr   nz,$2C67]
* do not write leading zeroes
	move.b	#0x20,d0                        	| [ld   a,$20]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	addq.w	#1,a0                           	| [inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_2c59                             	| [djnz $2C59]
	rts                                    	| [ret]
l_2c67:
	move.b	(a0),d0                         	| [ld   a,(hl)]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	addq.w	#1,a0                           	| [inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_2c67                             	| [djnz $2C67]
	rts                                    	| [ret]

write_2_digits_to_screen_2C6F:
	move.b	#0x02,d1                        	| write 2 numbers [ld   b,$02]
	lea	number_buffer_8803+3,a0        	| source [ld   hl,number_buffer_8803+3]
	jra	l_2c59      

* draws SEGA, ACT x, and flags
draw_status_bar_2C76:
	lea	sega_1982_string_2CF4(pc),a0       	| [ld   hl,sega_1982_string_2CF4]
	jbsr	print_line_typewriter_style_29F4  	| [call print_line_typewriter_style_29F4]
	lea	act_string_2D02(pc),a0             	| [ld   hl,act_string_2D02]
	jbsr	print_line_typewriter_style_29F4  	| [call print_line_typewriter_style_29F4]
	jbsr	get_level_number_288F             	| [call get_level_number_288F]
	clr.w	d6                               	| [ld   h,$00]
	move.b	d0,d6                           	| [ld   l,a]
	jbsr	convert_number_2B40               	| [call convert_number_2B40]
	jbsr	write_2_digits_to_screen_2C6F     	| [call write_2_digits_to_screen_2C6F]
											| X,Y [ld   hl,$2107]
	move.w	#0x0721,cursor_x_8800                	| [ld   (cursor_x_8800),hl]
	move.b	#0x0A,d0                        	| [ld   a,$0A]
	move.b	d0,cursor_color_8802            	| [ld   (cursor_color_8802),a]
	jbsr	get_level_number_288F             	| [call get_level_number_288F]
l_2c9c:
	cmp.b	#0x06,d0                         	| [cp   $06]
	jcs	l_2ca4                             	| [jr   c,$2CA4]
	subq.b	#0x05,d0                        	| [sub  $05]
	jra	l_2c9c                             	| [jr   $2C9C]
l_2ca4:
	move.b	d0,d1                           	| [ld   b,a]
l_2ca5:
	move.w	d1,-(sp)                    	| [push bc]
	move.b	#0x0E,d0                        	| [ld   a,$0E]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	move.b	#0x0F,d0                        	| [ld   a,$0F]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	move.w	(sp)+,d1                    	| [pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_2ca5                             	| [djnz $2CA5]
	clr.b	d1                               	| [ld   b,$00]
	jbsr	get_level_number_288F             	| [call get_level_number_288F]
l_2cb8:
	cmp.b	#0x06,d0                         	| [cp   $06]
	jcs	l_2cc1                             	| [jr   c,$2CC1]
	subq.b	#0x05,d0                        	| [sub  $05]
	addq.b	#1,d1                           	| [inc  b]
	jra	l_2cb8                             	| [jr   $2CB8]
l_2cc1:
	subq.b	#1,d1                           	| [dec  b]
	addq.b	#1,d1                           	| [inc  b]
	bne.b	0f
	rts                                    	| [ret  z]
0:
l_2cc4:
	movem.w	d1/d2,-(sp)                    	| [push bc]
	move.b	d1,d0                           	| [ld   a,b]
	subq.b	#1,d0                           	| [dec  a]
	clr.w	d3                               	| [ld   d,$00]
	move.b	d0,d3                           	| [ld   e,a]
	lea	x_table_2D08(pc),a0                	| [ld   hl,x_table_2D08]
	add.w	d3,a0							| [add  hl,de]
	move.b	(a0),d0                         	| [ld   a,(hl)]
	move.b	#0x23,d5                        	| [ld   h,$23]
	move.b	d0,d6                           	| [ld   l,a]
* draw a penguin holding the "5 levels" flag
	bsr		set_current_cursor_from_hl        	| [ld   (cursor_x_8800),hl]
												| [ld   (cursor_x_8800),hl]
	move.l	a0,-(sp)                        	| [push hl]
	move.b	#0x08,d0                        	| [ld   a,$08]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	move.b	#0x09,d0                        	| [ld   a,$09]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	move.l	(sp)+,a0                        	| [pop  hl]
	clr.b	d5                               	| [ld   h,$00]
	bsr		set_current_cursor_from_hl        	| [ld   (cursor_x_8800),hl]
												| [ld   (cursor_x_8800),hl]
	move.b	#0x0A,d0                        	| [ld   a,$0A]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	move.b	#0x0B,d0                        	| [ld   a,$0B]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	movem.w	(sp)+,d1/d2                    	| [pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_2cc4                             	| draws flags as long as needed [djnz $2CC4]
	rts                                    	| [ret]
sega_1982_string_2CF4:
	dc.b	0x11,0x21,0x10,0x40	| attributes + copyright char
	.ascii	"SEGA 198"
	dc.b	0xB2
act_string_2D02:
	dc.b	0x01,0x21,0x10
	.ascii	"AC"
	dc.b	0xD4
x_table_2D08:
	dc.b 	0x1A,0x18,0x16,0x14
	.align	2
draw_lives_2D0C:
	jbsr	get_nb_lives_289E                 	| [call get_nb_lives_289E]
	tst.b	d0                               	| [and  a]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	jra	l_2d18                             	| [jr   $2D18]
draw_lives_2D13:
	jbsr	get_nb_lives_289E                 	| [call get_nb_lives_289E]
	subq.b	#1,d0                           	| [dec  a]
	bne.b	0f
	rts                                    	| [ret  z]
0:
l_2d18:
	cmp.b	#0x05,d0                         	| [cp   $05]
	jcs	l_2d1e                             	| [jr   c,$2D1E]
	move.b	#0x04,d0                        	| [ld   a,$04]
l_2d1e:
	move.b	d0,d1                           	| [ld   b,a]
	move.b	#0x0B,d0                        	| [ld   a,$0B]
	move.b	d0,cursor_color_8802            	| [ld   (cursor_color_8802),a]
	move.b	#0x24,d2                        	| pengo life upper left tile [ld   c,$24]
l_2d26:
	move.w	d1,-(sp)                        	| [push bc]
	move.b	d1,d0                           	| [ld   a,b]
	subq.b	#1,d0                           	| [dec  a]
	add.b	d0,d0                            	| [add  a,a]
	move.w	#0x23,d5							| [ld   h,$23]
	move.b	d0,d6								| [ld   l,a]
	move.w	d5,cursor_x_8800                	| [ld   (cursor_x_8800),hl]
	move.w	d5,-(sp)                        	| [push hl]
	move.b	d2,d0                           	| [ld   a,c]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	addq.b	#1,d0                           	| [inc  a]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	move.w	(sp)+,d5                        	| [pop  hl]
	clr.b	d5                               	| [ld   h,$00]
	move.b	d5,cursor_x_8800                	| [ld   (cursor_x_8800),hl]
	move.b	d6,cursor_y_8801                	| [ld   (cursor_x_8800),hl]
	addq.b	#1,d0                           	| [inc  a]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	addq.b	#1,d0                           	| [inc  a]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	move.w	(sp)+,d1                        	| [pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_2d26                             	| [djnz $2D26]
	rts                                    	| [ret]

display_eggs_2D4B:
	move.b	total_eggs_to_hatch_8DC0,d0     	| [ld   a,(total_eggs_to_hatch_8DC0)]
	move.b	d0,d1                           	| [ld   b,a]
	move.b	#0x0C,d0                        	| [ld   a,$0C]
	sub.b	d1,d0                            	| [sub  b]
	lsr.b	#1,d0                            	| [srl  a]
	add.b	#0x08,d0                         	| [add  a,$08]
	clr.b	d5                               	| [ld   h,$00]
	move.b	d0,d6                           	| [ld   l,a]
	move.b	d6,cursor_y_8801                	| [ld   (cursor_x_8800),hl]
	move.b	d5,cursor_x_8800                	| [ld   (cursor_x_8800),hl]
	move.b	#0x10,d0                        	| [ld   a,$10]
	move.b	d0,cursor_color_8802            	| [ld   (cursor_color_8802),a]
	move.l	a0,-(sp)                        	| [push hl]
	move.b	#0x16,d0                        	| [ld   a,$16]
l_2d64:
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	subq.b	#1,d1                           	| [...]
	jne	l_2d64                             	| [djnz $2D64]
	move.l	(sp)+,a0                        	| [pop  hl]
	move.b	remaining_eggs_to_hatch_8DC1,d0 	| [ld   a,(remaining_eggs_to_hatch_8DC1)]
	move.b	d0,d1                           	| [ld   b,a]
	move.b	total_eggs_to_hatch_8DC0,d0     	| [ld   a,(total_eggs_to_hatch_8DC0)]
	sub.b	d1,d0                            	| [sub  b]
	move.b	d0,d1                           	| [ld   b,a]
	move.b	d6,cursor_y_8801                	| [ld   (cursor_x_8800),hl]
	move.b	d5,cursor_x_8800                	| [ld   (cursor_x_8800),hl]
l_2d76:
	jbsr	put_blank_at_current_pos_2900     	| [call put_blank_at_current_pos_2900]
	subq.b	#1,d1                           	| [...]
	jne	l_2d76                             	| [djnz $2D76]
	rts                                    	| [ret]

* return random 8 bit value
 *
 * can be translated in python as follows


* completely recoding it

get_random_value_2D7C:
	movem.w	d1/d2/d6,-(sp)                        	| [push bc]
*    b = (hl) >> 8
	move.w	random_seed_8826,d6
	move.w	d6,d1
	lsr.w	#8,d1
*    c = (hl & 0xFF)
	move.b	d6,d2
*    hl = (hl * 2)
	add.w	d6,d6
*    bc = (b << 8) + c
	lsl.w	#8,d1
	add.b	d2,d1
*    hl = (hl + bc) & 0xFFFF
	add.w	d1,d6
*    a = c
	move.b	d2,d0
	move.w	d6,d2
*    h = (hl & 0xFF00) >> 8
	lsr.w	#8,d2
*    a = (a + h) & 0xFF
	add.b	d2,d0
*    hl = (hl & 0xFF) + (a<<8)
	move.b	d0,d2
	lsl.w	#8,d2
	and.w	#0xFF,d6
	add.w	d2,d6
	move.w	d6,random_seed_8826
	movem.w	(sp)+,d1/d2/d6
	rts
	
	
* kinds of jmp (de,a*2) (68k instruction)
* < de / A1:	jump table
* < a / D0.B:	index
indirect_jump_2D8F:
	and.w	#0xFF,d0
	add.w	d0,d0
	add.w	d0,d0
	move.l	(a1,d0.w),a0
	jmp		(a0)                               	| [jp   (hl)]


* computes D-H, then E-L if D-H != 0
* < HL (d6)
* < DE (d3)
* < Z if equal, NZ otherwise, C flag set for first different value
compare_hl_to_de_2D99:
	cmp.w	d3,d6
	rts                                    	| [ret]

draw_maze_2DA1:
	jbsr	draw_borders_2E5D                 	| [call draw_borders_2E5D]
	jbsr	l_2ecd                            	| [call $2ECD]
	jbsr	show_maze_with_line_delay_effect_2F14	| [call show_maze_with_line_delay_effect_2F14]

	move.b	#0x01,d1                        	| draw maze sound [ld   b,$01]
	jbsr	play_sfx_1889                     	| sound routine [call play_sfx_1889]

 * install a modifiable routine in ram_code_8C24 (self-modifying code used
 * for maze path drawing)

	move.b	#0x0D,d1                        	| [ld   b,$0D]
	lea	to_copy_2E39(pc),a1                	| [ld   de,to_copy_2E39]
	lea	ram_code_8C24(pc),a0               	| [ld   hl,ram_code_8C24]
l_2dbe:
	move.b	(a1),d0                         	| [ld   a,(de)]
	move.b	d0,(a0)                         	| [ld   (hl),a]
	addq.w	#1,a1                           	| [inc  de]
	addq.w	#1,a0                           	| [inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_2dbe                             	| [djnz $2DBE]

 * initialize
	lea	maze_data_8C20,a2              	| [ld   ix,maze_data_8C20]
	clr.b	(0x3f,a2)                        	| [ld   (ix+$3f),$00]
	clr.w   (2,a2)		|  first hole at 0,0
	jbsr	draw_one_hole_311D                	|  first hole in block path drawn at 0,0 [call draw_one_hole_311D]
 * will try to initiate paths every 2 blocks (vertically and horizontally)
 * in the end, there won't be any 2x2 zone with more than 2 blocks
 * in it (vertically or horizontally)
 *
 * very smart!!!!

	move.b	#0x08,d1                        	| loop done 8 times [ld   b,$08]

* loop to draw the paths of the maze maze here

l_2dd7:
	move.l	a4,-(sp)                        	| [push bc]
	move.b	#0x07,d2                        	|  inside loop done 7 times [ld   c,$07]

* draw one path
l_2dda:
	movem.w	d1/d2,-(sp)                    	| [push bc]
	move.b	#0x09,d0                        	| [ld   a,$09]
	sub.b	d1,d0                            	| [sub  b]
	move.b	d0,(0x01,a2)                    	| [ld   (ix+$01),a]
	move.b	#0x08,d0                        	| [ld   a,$08]
	sub.b	d2,d0                            	| [sub  c]
	move.b	d0,(0x00,a2)                    	| [ld   (ix+$00),a]
	bsr		load_maze_data
 * can something be drawn from this point?
	jbsr	is_way_clear_30CA                 	| [call is_way_clear_30CA]
	jne	l_2e19                             	| blocked:	 OK [jr   nz,$2E19]
	jbsr	is_way_up_clear_308E              	| [call is_way_up_clear_308E]
	jne	draw_it_2E04                       	| [jr   nz,draw_it_2E04]
	jbsr	is_way_down_clear_3097            	| [call is_way_down_clear_3097]
	jne	draw_it_2E04                       	| [jr   nz,draw_it_2E04]
	jbsr	is_way_left_clear_309E            	| [call is_way_left_clear_309E]
	jne	draw_it_2E04                       	| [jr   nz,draw_it_2E04]
	jbsr	is_way_right_clear_30A5           	| [call is_way_right_clear_30A5]
	jeq	l_2e19                             	| clear in all directions:	cannot draw [jr   z,$2E19]

draw_it_2E04:
	bsr		load_maze_data
	move.b	d2,d0                           	| [ld   a,c]
	subq.b	#0x01,d0                        	| [sub  $01]
	add.b	d0,d0                            	| [add  a,a]
	move.b	d0,(animation_frame,a2)         	| [ld   (ix+animation_frame),a]
	move.b	d1,d0                           	| [ld   a,b]
	subq.b	#0x01,d0                        	| [sub  $01]
	add.b	d0,d0                            	| [add  a,a]
	move.b	d0,(0x03,a2)                    	| [ld   (ix+$03),a]
	jbsr	draw_one_path_in_maze_2E46        	| [call draw_one_path_in_maze_2E46]
l_2e19:
	movem.w	(sp)+,d1/d2                    	| [pop  bc]
	subq.b	#1,d2                           	| [dec  c]
	jne	l_2dda                             	| [jr   nz,$2DDA]
	movem.w	(sp)+,d1/d2                    	| [pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_2dd7                             	| [djnz $2DD7]

* the maze is drawn

	move.b	#0xC3,d0                        	| [ld   a,$C3]
	sub.b	(0x3f,a2),d0                     	| [sub  (ix+$3f)]
	move.b	d0,(0x3f,a2)                    	| [ld   (ix+$3f),a]
	move.b	#0x10,d0                        	| [ld   a,$10]
	move.b	d0,cursor_color_8802            	| [ld   (cursor_color_8802),a]
	jbsr	compute_eggs_locations_2FB2       	| [call compute_eggs_locations_2FB2]
	move.b	#0x09,d0                        	| [ld   a,$09]
	move.b	d0,cursor_color_8802            	| [ld   (cursor_color_8802),a]
	jbsr	draw_diamonds_2F3A                	| [call draw_diamonds_2F3A]
	rts                                    	| [ret]

to_copy_2E39:
**	.byte	0xEB            ex,0xde,hl
**	move.b	(a0),d1                         	| [ld   b,(hl)]
**	jra	(a0)                               	| [jp   (hl)]
**nop
**	sub.b	d0,d0                            	| [sub  a]
**	move.b	d0,d0                           	| [ld   a,a]
**rst  $10
**rst  $30
**	move.b	d0,d3                           	| [ld   d,a]
**rst  $30
**	move.b	d0,d3                           	| [ld   d,a]
**rst  $30
**	and.b	d1,d0                            	| [and  b]
 * < a:	0:	draw up, 1 down, 2 left, 3 right

draw_one_path_in_maze_2E46:
 * this routine calls itself
 * unless path cannot be drawn in required direction
 * in which case stack is popped in the jumped routines
 * and we return to the caller

	lea	draw_one_path_in_maze_2E46(pc),a1  	| [ld   de,draw_one_path_in_maze_2E46]
	move.l	a1,-(sp)                        	| [push de]
	jbsr	get_random_value_2D7C             	| [call get_random_value_2D7C]
	and.b	#0x03,d0                         	| [and  $03]
	lea	table_2E55(pc),a1                  	| [ld   de,table_2E55]
	jra	indirect_jump_2D8F                 	| [jp   indirect_jump_2D8F]
table_2E55:
	.long	_00_path_draw_up_3040
	.long	_01_path_draw_down_304F
	.long	_02_path_draw_left_305E
	.long	_03_path_draw_right_306D
	
draw_borders_2E5D:
	move.b	currently_playing_8819,d0       	| [ld   a,(currently_playing_8819)]
	tst.b	d0                               	| [and  a]
	jeq	draw_borders_2E6A                             	| [jr   z,$2E6A]
	clr.b	d0                               	| [ld   a,$00]
	move.b	d0,cursor_color_8802            	| [ld   (cursor_color_8802),a]
	jra	l_2e6f                             	| [jr   $2E6F]

draw_borders_2E6A:
	move.b	#0x09,d0                        	| [ld   a,$09]
	move.b	d0,cursor_color_8802            	| [ld   (cursor_color_8802),a]
l_2e6f:
	move.b	#0x10,d4                        	| [ld   e,$10]
	jbsr	draw_vertical_walls_2E81          	| [call draw_vertical_walls_2E81]
	move.b	#0x11,d4                        	| [ld   e,$11]
	jbsr	draw_horizontal_walls_2E92        	| [call draw_horizontal_walls_2E92]
	rts                                    	| [ret]
* used to replace walls by stars when diamonds are aligned
draw_borders_2E7A:
	jbsr	draw_vertical_walls_2E81          	| [call draw_vertical_walls_2E81]
	jbsr	draw_horizontal_walls_2E92        	| [call draw_horizontal_walls_2E92]
	rts                                    	| [ret]

draw_vertical_walls_2E81:
	move.b	#0x0,d1                      	| [ld   bc,$0100]
	move.b	#0x1,d2                      	| [ld   bc,$0100]
	move.b	#0x1C,d3                        	| [ld   d,$1C]
	jbsr	write_character_and_code_at_xy_2EA3	| [call write_character_and_code_at_xy_2EA3]
	move.b	#0x0,d1                      	| [ld   bc,$2000]
	move.b	#0x20,d2                      	| [ld   bc,$2000]
	move.b	#0x1C,d3                        	| [ld   d,$1C]
	jbsr	write_character_and_code_at_xy_2EA3	| [call write_character_and_code_at_xy_2EA3]
	rts                                    	| [ret]

* BC: X,Y
* D: number of repeats
* E: character to set (with current cursor color)
fill_line_with_character_current_color_2EB8:
	move.w	d3,-(sp)                        	| [push de]
	jbsr	convert_coords_to_screen_address_296F	| [call convert_coords_to_screen_address_296F]
	move.w	(sp)+,d3                        	| [pop  de]
	move.b	d4,d0
	jbsr		osd_w_videoram					| [ld   (hl),e]
												| [push de]
											| [ld   de,$0400]
	add.w	#0x400,d6						| add  hl,de
	move.b	cursor_color_8802,d0            	| [ld   a,(cursor_color_8802)]
	jbsr		osd_w_colorram                         	| [ld   (hl),a]
										| [pop  de]
	addq.b	#1,d1                           	| [inc  b]
	subq.b	#1,d3                           	| [dec  d]
	jne	fill_line_with_character_current_color_2EB8	| [jr   nz,fill_line_with_character_current_color_2EB8]
	rts                                    	| [ret]


draw_horizontal_walls_2E92:
	move.b	#0x0,d1                      	| [ld   bc,$0100]
	move.b	#0x1,d2                      	| [ld   bc,$0100]
	move.b	#0x20,d3                        	| [ld   d,$20]
	jbsr	fill_line_with_character_current_color_2EB8	| [call fill_line_with_character_current_color_2EB8]
	move.b	#0x1B,d2                      	| [ld   bc,$2000]
	move.b	#0x01,d3                        	| [ld   d,$1C]
	move.b	#0x20,d3                        	| [ld   d,$20]
	jbsr	fill_line_with_character_current_color_2EB8	| [call fill_line_with_character_current_color_2EB8]
	rts                                    	| [ret]

* < A: code
* < B: X
* < C: Y
* < E: character

write_character_and_code_at_xy_2EA3:
	move.w	d3,-(sp)                        	| [push de]
	jbsr	convert_coords_to_screen_address_296F	| [call convert_coords_to_screen_address_296F]
	move.w	(sp)+,d3                        	| [pop  de]
	move.b	d4,d0                         	| [ld   (hl),e]
	jbsr	osd_w_videoram
												| [ld   de,$0400]
	add.w	#0x400,d6							| [add  hl,de]
	move.b	cursor_color_8802,d0            	| [ld   a,(cursor_color_8802)]
	jbsr	osd_w_colorram                         	| [ld   (hl),a]
												| [pop  de]
	addq.b	#1,d2                           	| [inc  c]
	subq.b	#1,d3                           	| [dec  d]
	jne	write_character_and_code_at_xy_2EA3	| [jr   nz,write_character_and_code_at_xy_2EA3]
	rts                                    	| [ret]
	

l_2ecd:
	move.b	#0x09,d1                        	| [ld   b,$09]
	move.b	currently_playing_8819,d0       	| [ld   a,(currently_playing_8819)]
	tst.b	d0                               	| [and  a]
	jeq	l_2ed7                             	| [jr   z,$2ED7]
	clr.b	d1                               	| [ld   b,$00]
l_2ed7:
	move.b	d1,d0                           	| [ld   a,b]
	move.b	d0,cursor_color_8802            	| [ld   (cursor_color_8802),a]
	move.b	#0x0F,d1                        	| [ld   b,$0F]
l_2edd:
	movem.w	d1/d2,-(sp)                    	| [push bc]
	move.l	a4,-(sp)                        	| [push bc]
	move.b	#0x0D,d2                        	| [ld   c,$0D]
l_2ee0:
	movem.w	d1/d2,-(sp)                    	| [push bc]
	move.b	#0x0F,d0                        	| [ld   a,$0F]
	sub.b	d1,d0                            	| [sub  b]
	add.b	d0,d0                            	| [add  a,a]
	addq.b	#0x02,d0                        	| [add  a,$02]
	move.b	d0,d1                           	| [ld   b,a]
	move.b	#0x0D,d0                        	| [ld   a,$0D]
	sub.b	d2,d0                            	| [sub  c]
	add.b	d0,d0                            	| [add  a,a]
	addq.b	#0x01,d0                        	| [add  a,$01]
	move.b	d0,d2                           	| [ld   c,a]
	bsr		set_current_cursor_from_bc                	| [ld   (cursor_x_8800),bc]
	jbsr	draw_ice_block_tile_2EFE          	| [call draw_ice_block_tile_2EFE]
	movem.w	(sp)+,d1/d2                    	| [pop  bc]
	subq.b	#1,d2                           	| [dec  c]
	jne	l_2ee0                             	| [jr   nz,$2EE0]
	move.l	(sp)+,a4                        	| [pop  bc]
	movem.w	(sp)+,d1/d2                    	| [pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_2edd                             	| [djnz $2EDD]
	rts                                    	| [ret]


draw_ice_block_tile_2EFE:
	move.b	#0x18,d0                        	| [ld   a,$18]
* writes 2x2 4 characters, using consecutive tile codes
* < A: start tile code
set_2x2_tile_2F00:
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	addq.b	#1,d0                           	| [inc  a]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	addq.b	#1,d0                           	| [inc  a]
	jbsr	move_cursor_2_291E        	| [call move_cursor_2_291E]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	addq.b	#1,d0                           	| [inc  a]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	addq.b	#1,d0                           	| [inc  a]
	rts                                    	| [ret]

show_maze_with_line_delay_effect_2F14:
	move.b	currently_playing_8819,d0       	| [ld   a,(currently_playing_8819)]
	tst.b	d0                               	| [and  a]
	bne.b	0f
	rts                                    	| [ret  z]
0:
* called only when playing
	move.b	#0x20,d1                        	| [ld   b,$20]
l_2f1b:
	movem.w	d1/d2,-(sp)                    	| [push bc]
	clr.b	d2                               	| [ld   c,$00]
	bsr		set_current_cursor_from_bc         	| [ld   (cursor_x_8800),bc]
	jbsr	draw_attribute_9_line_2F2E        	| [call draw_attribute_9_line_2F2E]
	move.b	#0x01,d0                        	| [ld   a,$01]
	jbsr	delay_28D1                        	| [call delay_28D1]
	movem.w	(sp)+,d1/d2                    	| [pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_2f1b                             	| [djnz $2F1B]
	rts                                    	| [ret]
	
draw_attribute_9_line_2F2E:
	move.b	#0x09,d0                        	| [ld   a,$09]
draw_attribute_line_2F30:
	move.b	#0x1C,d1                        	| [ld   b,$1C]
l_2f32:
	movem.w	d1/d2,-(sp)                    	| [push bc]
	jbsr	set_attribute_at_current_pos_292D 	| [call set_attribute_at_current_pos_292D]
	movem.w	(sp)+,d1/d2                    	| [pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_2f32                             	| [djnz $2F32]
	rts                                    	| [ret]

draw_diamonds_2F3A:
	jbsr	get_random_xy_grid_in_bc_2F84     	| [call get_random_xy_grid_in_bc_2F84]
	jbsr	look_for_hidden_egg_300A          	| [call look_for_hidden_egg_300A]
	jne	draw_diamonds_2F3A                 	| [jr   c,draw_diamonds_2F3A]
	move.b	d1,diamond_block_1_xy_8DB0      	| [ld   (diamond_block_1_xy_8DB0),bc]
	move.b	d2,diamond_block_1_xy_8DB0+1      	| [ld   (diamond_block_1_xy_8DB0),bc]
	jbsr	set_diamond_position_2FA9         	| [call set_diamond_position_2FA9]

l_2f49:
	bsr		get_random_xy_grid_in_bc_2F84     	| [call get_random_xy_grid_in_bc_2F84]
	move.w	diamond_block_1_xy_8DB0,d6  	| [ld   hl,(diamond_block_1_xy_8DB0)]
	move.b	d1,d3                           	| [ld   d,b]
	lsr.w	#8,d3
	move.b	d2,d3                           	| [ld   e,c]
	jbsr	compare_hl_to_de_2D99             	| [call compare_hl_to_de_2D99]
	jeq	l_2f49                             	| [jr   z,$2F49]
	jbsr	look_for_hidden_egg_300A          	| [call look_for_hidden_egg_300A]
	jne	l_2f49                             	| [jr   c,$2F49]
	* no egg: ok
	move.b	d1,diamond_block_2_xy_8DB2      	| [ld   (diamond_block_2_xy_8DB2),bc]
	move.b	d2,diamond_block_2_xy_8DB2+1      	| [ld   (diamond_block_2_xy_8DB2),bc]
	jbsr	set_diamond_position_2FA9         	| [call set_diamond_position_2FA9]

l_2f62:
	jbsr	get_random_xy_grid_in_bc_2F84     	| [call get_random_xy_grid_in_bc_2F84]
	move.w	diamond_block_1_xy_8DB0,d6  	| [ld   hl,(diamond_block_1_xy_8DB0)]
	move.b	d1,d3                           	| [ld   d,b]
	lsr.w	#8,d3
	move.b	d2,d3                           	| [ld   e,c]
	jbsr	compare_hl_to_de_2D99             	| [call compare_hl_to_de_2D99]
	jeq	l_2f62                             	| [jr   z,$2F62]
	move.w	diamond_block_2_xy_8DB2,d6  	| [ld   hl,(diamond_block_2_xy_8DB2)]
	jbsr	compare_hl_to_de_2D99             	| [call compare_hl_to_de_2D99]
	jeq	l_2f62                             	| [jr   z,$2F62]
	jbsr	look_for_hidden_egg_300A          	| [call look_for_hidden_egg_300A]
	jne	l_2f62                             	| [jr   c,$2F62]
	move.b	d1,diamond_block_3_xy_8DB4      	| [ld   (diamond_block_3_xy_8DB4),bc]
	move.b	d2,diamond_block_3_xy_8DB4+1      	| [ld   (diamond_block_3_xy_8DB4),bc]
	jbsr	set_diamond_position_2FA9         	| [call set_diamond_position_2FA9]
	rts                                    	| [ret]

 * return x,y random in b,c
get_random_xy_grid_in_bc_2F84:
	jbsr	get_random_x_06_2F95              	| [call get_random_x_06_2F95]
	add.b	d0,d0                            	| [add  a,a]
	add.b	d0,d0                            	| [add  a,a]
	addq.b	#0x03,d0                        	| [add  a,$03]
	move.b	d0,d2                           	| [ld   c,a]
	jbsr	get_random_y_07_2F9F              	| [call get_random_y_07_2F9F]
	add.b	d0,d0                            	| [add  a,a]
	add.b	d0,d0                            	| [add  a,a]
	addq.b	#0x04,d0                        	| [add  a,$04]
	move.b	d0,d1                           	| [ld   b,a]
	rts                                    	| [ret]

get_random_x_06_2F95:
	jbsr	get_random_value_2D7C             	| [call get_random_value_2D7C]
	and.b	#0x07,d0                         	| [and  $07]
	cmp.b	#0x06,d0                         	| [cp   $06]
	jcc	get_random_x_06_2F95               	| [jr   nc,get_random_x_06_2F95]
	rts                                    	| [ret]
get_random_y_07_2F9F:
	jbsr	get_random_value_2D7C             	| [call get_random_value_2D7C]
	and.b	#0x07,d0                         	| [and  $07]
	cmp.b	#0x07,d0                         	| [cp   $07]
	jcc	get_random_y_07_2F9F               	| [jr   nc,get_random_y_07_2F9F]
	rts                                    	| [ret]


* < BC: X,Y where to draw diamond
set_diamond_position_2FA9:
	bsr		set_current_cursor_from_bc        	| [ld   (cursor_x_8800),bc]
	move.b	#0x1C,d0                        	| [ld   a,$1C]
	jra	set_2x2_tile_2F00                  	| [jp   set_2x2_tile_2F00]
	
compute_eggs_locations_2FB2:
	move.b	total_eggs_to_hatch_8DC0,d0     	| how many eggs in that level [ld   a,(total_eggs_to_hatch_8DC0)]
* draw remaining eggs in status panel
* compute start X for the first egg
	move.b	d0,d1                           	| [ld   b,a]
	move.b	#0x0C,d0                        	| [ld   a,$0C]
	sub.b	d1,d0                            	| [sub  b]
	lsr.b	#1,d0                            	| [srl  a]
	add.b	#0x08,d0                         	| [add  a,$08]
	                               	
	move.b	d0,d6                           	| set X [ld   l,a]
	lsl.w	#8,d6			| Y=0 [ld   h,$00]
	move.w	d6,cursor_x_8800                	| [ld   (cursor_x_8800),hl]
	move.b	#0x16,d0                        	| small egg character [ld   a,$16]
l_2fc5:
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	subq.b	#1,d1                           	| [...]
	jne	l_2fc5                             	| [djnz $2FC5]
* clear the 25 slots for eggs to hatch
	lea	remaining_eggs_to_hatch_8DC1,a0	| [ld   hl,remaining_eggs_to_hatch_8DC1]
	move.b	#0x19,d1                        	| [ld   b,$19]
	clr.b	d0                               	| [xor  a]
l_2fd0:
	move.b	d0,(a0)                         	| [ld   (hl),a]
	addq.w	#1,a0                           	| [inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_2fd0                             	| [djnz $2FD0]
	move.b	total_eggs_to_hatch_8DC0,d0     	| [ld   a,(total_eggs_to_hatch_8DC0)]
	move.b	d0,d1                           	| [ld   b,a]
l_2fd8:
	movem.w	d1/d2,-(sp)                    	| [push bc]
l_2fd9:
	jbsr	get_random_xy_grid_in_bc_2F84     	| [call get_random_xy_grid_in_bc_2F84]
	move.b	d1,d5                           	| [ld   h,b]
	move.b	d2,d6                           	| [ld   l,c]
* avoid pengo starting position (4 blocks)
	move.w	#0x0B0C,d3                      	| [ld   de,$0C0B]
	jbsr	compare_hl_to_de_2D99             	| [call compare_hl_to_de_2D99]
	jeq	l_2fd9                             	| [jr   z,$2FD9]
	move.w	#0x0F0C,d3                      	| [ld   de,$0C0F]
	jbsr	compare_hl_to_de_2D99             	| [call compare_hl_to_de_2D99]
	jeq	l_2fd9                             	| [jr   z,$2FD9]
	move.w	#0x0B10,d3                      	| [ld   de,$100B]
	jbsr	compare_hl_to_de_2D99             	| [call compare_hl_to_de_2D99]
	jeq	l_2fd9                             	| [jr   z,$2FD9]
	move.w	#0x0F10,d3                      	| [ld   de,$100F]
	jbsr	compare_hl_to_de_2D99             	| [call compare_hl_to_de_2D99]
	jeq	l_2fd9                             	| [jr   z,$2FD9]
	jbsr	look_for_hidden_egg_300A          	| [call look_for_hidden_egg_300A]
	jcs	l_2fd9                             	| [jr   c,$2FD9]
	jbsr	insert_egg_302D                   	| [call insert_egg_302D]
	movem.w	(sp)+,d1/d2                    	| [pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_2fd8                             	| [djnz $2FD8]
	rts                                    	| [ret]


* < BC: coords to look for hidden egg
* > carry set (changed by Z not set) if matches hidden egg
look_for_hidden_egg_300A:
	move.b	d1,d3                           	| [ld   d,b]
	move.b	d2,d4                           	| [ld   e,c]
	move.b	total_eggs_to_hatch_8DC0,d0     	| [ld   a,(total_eggs_to_hatch_8DC0)]
	move.b	d0,d1                           	| loop nb eggs times [ld   b,a]
	lea	egg_location_table_8DC2,a0     	| [ld   hl,egg_location_table_8DC2]
l_3013:
	movem.w	d1/d2,-(sp)                    	| [push bc]

	move.l	a0,-(sp)                        	| [push hl]
	move.b	(a0)+,d2                         	| get egg X [ld   c,(hl)]
												| [inc  hl]
	move.b	(a0),d1                         	| get egg Y [ld   b,(hl)]
	move.b	d1,d5                           	| [ld   h,b]
	move.b	d2,d6                           	| [ld   l,c]
	jbsr	compare_hl_to_de_2D99             	| [call compare_hl_to_de_2D99]
	jeq	l_3029                             	| [jr   z,$3029]
	move.l	(sp)+,a0                        	| [pop  hl]
	movem.w	(sp)+,d1/d2                    	| [pop  bc]
	addq.w	#2,a0                           	| advance to next egg in table [inc  hl]
											| [inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_3013                             	| [djnz $3013]
	move.b	d3,d1                           	| [ld   b,d]
	move.b	d4,d2                           	| [ld   c,e]
	clr.b	d7                               	| [xor  a]
	rts                                    	| [ret]
l_3029:
	move.l	(sp)+,a0                        	| [pop  hl]
	movem.w	(sp)+,d1/d2                    	| [pop  bc]
	st.b	d7								| scf		; set carry flag
	rts                                    	| [ret]

* < BC X,Y of egg to insert
insert_egg_302D:
	clr.w	d0
	move.b	remaining_eggs_to_hatch_8DC1,d0 	| [ld   a,(remaining_eggs_to_hatch_8DC1)]
	add.b	d0,d0                            	| [add  a,a]
											| adapting stuff using d & e to use d0 directly
	lea	egg_location_table_8DC2(pc),a0     	| [ld   hl,egg_location_table_8DC2]
	add.w	d0,a0							| [add  hl,de]
	move.b	d2,(a0)+                         	| store coordinates [ld   (hl),c]
												| [inc  hl]
	move.b	d1,(a0)                         	| [ld   (hl),b]
	lea	remaining_eggs_to_hatch_8DC1,a0	| [ld   hl,remaining_eggs_to_hatch_8DC1]
	addq.b	#1,(a0)                         	| add 1 egg [inc  (hl)]
	rts                                    	| [ret]

_00_path_draw_up_3040:
	jbsr	is_way_up_clear_308E              	| [call is_way_up_clear_308E]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	jbsr	set_way_up_clear_30AC             	| [call set_way_up_clear_30AC]
	addq.b	#1,(0x01,a2)                    	| ylen++ [inc  (ix+$01)]
	jbsr	draw_2_holes_up_30E9              	| [call draw_2_holes_up_30E9]
	jra	handle_path_end_307C               	| [jr   handle_path_end_307C]

_01_path_draw_down_304F:
	jbsr	is_way_down_clear_3097            	| [call is_way_down_clear_3097]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	jbsr	set_way_down_clear_30B5           	| [call set_way_down_clear_30B5]
	subq.b	#1,(0x01,a2)                    	| ylen-- [dec  (ix+$01)]
	jbsr	draw_2_holes_down_30F6            	| [call draw_2_holes_down_30F6]
	jra	handle_path_end_307C               	| [jr   handle_path_end_307C]

_02_path_draw_left_305E:
	jbsr	is_way_left_clear_309E            	| [call is_way_left_clear_309E]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	jbsr	set_way_left_clear_30BC           	| [call set_way_left_clear_30BC]
	subq.b	#1,(0x00,a2)                    	| xlen-- [dec  (ix+$00)]
	jbsr	draw_2_holes_left_3103            	| [call draw_2_holes_left_3103]
	jra	handle_path_end_307C               	| [jr   handle_path_end_307C]


_03_path_draw_right_306D:
	jbsr	is_way_right_clear_30A5           	| [call is_way_right_clear_30A5]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	jbsr	set_way_right_clear_30C3          	| [call set_way_right_clear_30C3]
	addq.b	#1,(0x00,a2)                    	| xlen++ [inc  (ix+$00)]
	jbsr	draw_2_holes_right_3110           	| [call draw_2_holes_right_3110]
	jra	handle_path_end_307C               	| [jr   handle_path_end_307C]


handle_path_end_307C:
 * can something still be done at this point?
	jbsr	is_way_up_clear_308E              	| [call is_way_up_clear_308E]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	jbsr	is_way_down_clear_3097            	| [call is_way_down_clear_3097]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	jbsr	is_way_left_clear_309E            	| [call is_way_left_clear_309E]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	jbsr	is_way_down_clear_3097            	| [call is_way_down_clear_3097]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
 * all blocks around have been cleared or reached boundary:
 * give up this path
 * end of path:	pop & return from "draw_one_path_in_maze_2E46"
	move.l	(sp)+,a1                        	| [pop  de]
	rts                                    	| [ret]


is_way_up_clear_308E:
	bsr		load_maze_data
	addq.b	#1,d1                           	| [inc  b]
l_3093:
	jbsr	is_way_clear_30CA                 	| [call is_way_clear_30CA]
	rts                                    	| [ret]

is_way_down_clear_3097:
	bsr		load_maze_data
	subq.b	#1,d1                           	| [dec  b]
	jra	l_3093                             	| [jr   $3093]

is_way_left_clear_309E:
	bsr		load_maze_data
	subq.b	#1,d2                           	| [dec  c]
	jra	l_3093                             	| [jr   $3093]

is_way_right_clear_30A5:
	bsr		load_maze_data
	addq.b	#1,d2                           	| [inc  c]
	jra	l_3093                             	| [jr   $3093]

set_way_up_clear_30AC:
	bsr		load_maze_data
	addq.b	#1,d1                           	| [inc  b]
l_30b1:
	jbsr	set_way_clear_30D2                	| [call set_way_clear_30D2]
	rts                                    	| [ret]

set_way_down_clear_30B5:
	bsr		load_maze_data
	subq.b	#1,d1                           	| [dec  b]
	jra	l_30b1                             	| [jr   $30B1]

set_way_left_clear_30BC:
	bsr		load_maze_data
	subq.b	#1,d2                           	| [dec  c]
	jra	l_30b1                             	| [jr   $30B1]

set_way_right_clear_30C3:
	bsr		load_maze_data
	addq.b	#1,d2                           	| [inc  c]
	jra	l_30b1                             	| [jr   $30B1]

 * those routines below use a self-modifying code technique to
 * change opcode and op value (bit & res and value)
 * 30CA tests if way is clear
 * 30D2 clears bits to mark that way is clear
 *
 * this kind of technique is used in tree scan recursive algorithms

 * returns z if way is clear, nz if not
is_way_clear_30CA:
	move.b	#0x46,d3                        	| z80 operand mask [ld   d,$46]
	jra	l_30d4                             	| [jr   $30D4]
 * 30CE is not used
	move.b	#0xC6,d3                        	| z80 operand mask [ld   d,$C6]
	jra	l_30d4                             	| [jr   $30D4]

set_way_clear_30D2:
	move.b	#0x86,d3                        	| z80 operand mask [ld   d,$86]
l_30d4:
	lea	maze_hole_wall_bit_table_8C27(pc),a0	| [ld   hl,maze_hole_wall_bit_table_8C27]
	move.b	d2,d0                           	| [ld   a,c]
	not.b	d0                               	| [cpl]
	and.b	#0x07,d0                         	| [and  $07]
	rol.b	#3,d0                            	| [rlca]
	or.b	d3,d0                             	| [or   d]
	*ld   ram_code_8C24+1,a ; change operand of the bit/res/ld opcode
	clr.b	d3                               	| [ld   d,$00]
	move.b	d1,d4                           	| [ld   e,b]
	*add  hl,de
	illegal			| TODO handle this mess
	*jra	ram_code_8C24                      	| calls self-modifying code bit/res test routine!! [jp   ram_code_8C24]

* 8C24:
* bit <xxx>,(hl)
* or
* res <xxx>,(hl)
* ret

* < ix: maze structure
draw_2_holes_up_30E9:
	addq.b	#1,(0x03,a2)                    	| [inc  (ix+$03)]
	jbsr	draw_one_hole_311D                	| [call draw_one_hole_311D]
	addq.b	#1,(0x03,a2)                    	| [inc  (ix+$03)]
	jbsr	draw_one_hole_311D                	| [call draw_one_hole_311D]
	rts                                    	| [ret]

* < ix: maze structure
draw_2_holes_down_30F6:
	subq.b	#1,(0x03,a2)                    	| [dec  (ix+$03)]
	jbsr	draw_one_hole_311D                	| [call draw_one_hole_311D]
	subq.b	#1,(0x03,a2)                    	| [dec  (ix+$03)]
	jbsr	draw_one_hole_311D                	| [call draw_one_hole_311D]
	rts                                    	| [ret]

* < ix: maze structure
draw_2_holes_left_3103:
	subq.b	#1,(0x02,a2)                    	| [dec  (ix+$02)]
	jbsr	draw_one_hole_311D                	| [call draw_one_hole_311D]
	subq.b	#1,(0x02,a2)                    	| [dec  (ix+$02)]
	jbsr	draw_one_hole_311D                	| [call draw_one_hole_311D]
	rts                                    	| [ret]

* < ix: maze structure
draw_2_holes_right_3110:
	addq.b	#1,(0x02,a2)                    	| [inc  (ix+$02)]
	jbsr	draw_one_hole_311D                	| [call draw_one_hole_311D]
	addq.b	#1,(0x02,a2)                    	| [inc  (ix+$02)]
	jbsr	draw_one_hole_311D                	| [call draw_one_hole_311D]
	rts                                    	| [ret]

draw_one_hole_311D:
	move.w	maze_data_8C20+2,d2           
	move.w	maze_data_8C20+3,d1           	| | [ld   bc,(maze_data_8C20+2)]
	move.b	d2,d0                           	| [ld   a,c]
	add.b	d0,d0                            	| [add  a,a]
	addq.b	#1,d0                           	| [inc  a]
	move.b	d0,d2                           	| [ld   c,a]
	move.b	d1,d0                           	| [ld   a,b]
	add.b	d0,d0                            	| [add  a,a]
	sub.b	#0x1E,d0                         	| [sub  $1E]
	neg.b	d0                               	| [neg]
	move.b	d0,d1                           	| [ld   b,a]
	bsr		set_current_cursor_from_bc                	| [ld   (cursor_x_8800),bc]
	move.b	#0x20,d0                        	| [ld   a,$20]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	addq.b	#1,d1                           	| [inc  b]
	bsr		set_current_cursor_from_bc                	| [ld   (cursor_x_8800),bc]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	addq.b	#1,(0x3f,a2)                    	| [inc  (ix+$3f)]
	move.b	currently_playing_8819,d0       	| [ld   a,(currently_playing_8819)]
	tst.b	d0                               	| [and  a]
	beq	0f
	jbsr	l_314e                            	| [call nz,$314E]
0:
	rts                                    	| [ret]
l_314e:
	move.b	#0x02,d0                        	| [ld   a,$02]
	jbsr	delay_28D1                        	| [call delay_28D1]
	rts                                    	| [ret]


* < A: sprite number to display
* < HL: points on X,Y
display_sprite_3154:
	lea	sprite_ram_9020(pc),a3             	| [ld   iy,sprite_ram_9020]
	add.b	d0,d0                            	| [add  a,a]
	clr.b	d3                               	| [ld   d,$00]
	move.b	d0,d3                           	| [ld   e,a]
	add.w	d3,a3								| [add  iy,de]

	move.b	(a0),d0                         	| [ld   a,(hl)]
	not.b	d0                               	| [cpl]
l_316a:
	move.b	d0,(0x00,a3)                    	| [ld   (iy+$00),a]
	addq.w	#1,a0                           	| [inc  hl]

	move.b	(a0),d0                         	| [ld   a,(hl)]
	not.b	d0                               	| 255-Y [cpl]
	addq.b	#1,d0                           	| [inc  a]
l_317b:
	move.b	d0,(0x01,a3)                    	| [ld   (iy+$01),a]
	rts                                    	| [ret]

* < HL: pengo/snobee struct 8Dxx
* < A: pengo sprite index
display_character_sprite_318A:
	lea	sprite_ram_8FF2-2,a3          	| [ld   iy,stack_pointer_8FF0]
	addq.w	#2,a0                           	| [inc  hl]
											  | skip coordinates [inc  hl]
	add.b	d0,d0                            	| we only read sprite index & color [add  a,a]
	clr.b	d3                               	| [ld   d,$00]
	move.b	d0,d3                           	| [ld   e,a]
	add.w	d3,a3								| [add  iy,de]
	move.b	(a0),d3                         	| [ld   d,(hl)]

	move.b	d3,(0x00,a3)                    	| [ld   (iy+$00),d]
	addq.w	#1,a0                           	| [inc  hl]
	move.b	(a0),d0                         	| [ld   a,(hl)]
	move.b	d0,(0x01,a3)                    	| [ld   (iy+$01),a]
	rts                                    	| [ret]
	
clear_sprites_31B7:
	lea	sprite_ram_9020,a0             	| [ld   hl,sprite_ram_9020]
	move.b	#0x10,d1                        	| [ld   b,$10]
l_31bc:
	clr.b	(a0)+                             	| [ld   (hl),$00]
	subq.b	#1,d1                           	| [...]
	jne	l_31bc                             	| [djnz $31BC]
	rts                                    	| [ret]

init_pengo_structure_31C2:
	lea	pengo_struct_8D80(pc),a2           	| [ld   ix,pengo_struct_8D80]
	move.b	#0x78,(x_pos,a2)                	| x [ld   (ix+x_pos),$78]
	move.b	#0x70,(y_pos,a2)                	| y [ld   (ix+y_pos),$70]
	move.b	#0x08,(animation_frame,a2)      	| animation frame [ld   (ix+animation_frame),$08]
	move.b	#0x0B,(char_color,a2)           	| color [ld   (ix+char_color),$0B]
	move.b	#0x01,(facing_direction,a2)     	| looking down [ld   (ix+facing_direction),$01]
	move.b	#0x0A,(instant_move_period,a2)  	|  speed (fixed) [ld   (ix+instant_move_period),$0A]
	clr.b	(current_period_counter,a2)      	| [ld   (ix+current_period_counter),$00]
	clr.b	(0x09,a2)                        	| [ld   (ix+$09),$00]
	clr.b	(ai_mode,a2)                     	| [ld   (ix+ai_mode),$00]
	move.b	#0x01,(char_state,a2)           	| [ld   (ix+char_state),$01]
	rts                                    	| [ret]

init_snobee_positions_31EF:
	lea	snobee_1_struct_8D00(pc),a2        	| [ld   ix,snobee_1_struct_8D00]
	jbsr	l_320c                            	| [call $320C]
	lea	snobee_2_struct_8D20(pc),a2        	| [ld   ix,snobee_2_struct_8D20]
	jbsr	l_320c                            	| [call $320C]
	lea	snobee_3_struct_8D40(pc),a2        	| [ld   ix,snobee_3_struct_8D40]
	jbsr	l_320c                            	| [call $320C]
	lea	snobee_4_struct_8D60(pc),a2        	| [ld   ix,snobee_4_struct_8D60]
	jbsr	l_320c                            	| [call $320C]
	rts                                    	| [ret]

l_320c:
	jbsr	l_322f                            	| [call $322F]
	jbsr	set_initial_snobee_directions_and_count_323A	| [call set_initial_snobee_directions_and_count_323A]
	jbsr	compute_snobee_speed_324E         	| [call compute_snobee_speed_324E]
	move.b	(instant_move_period,a2),d0     	| [ld   a,(ix+instant_move_period)]
 * copy speed values
	move.b	d0,(move_period,a2)             	| [ld   (ix+move_period),a]
	clr.b	(current_period_counter,a2)      	| [ld   (ix+current_period_counter),$00]
	move.b	#0xFF,(0x08,a2)                 	| [ld   (ix+$08),$FF]
	clr.b	(0x09,a2)                        	| [ld   (ix+$09),$00]
	move.b	#0xFF,(0x15,a2)                 	| [ld   (ix+$15),$FF]
	jbsr	l_326e                            	| [call $326E]
	rts                                    	| [ret]

l_322f:
	clr.b	d0                               	| [xor  a]
	move.b	d0,(x_pos,a2)                   	| [ld   (ix+x_pos),a]
	move.b	d0,(y_pos,a2)                   	| [ld   (ix+y_pos),a]
	jbsr	display_snobee_sprite_33CE        	| [call display_snobee_sprite_33CE]
	rts                                    	| [ret]

set_initial_snobee_directions_and_count_323A:
	jbsr	get_random_value_2D7C             	| [call get_random_value_2D7C]
	and.b	#0x03,d0                         	| [and  $03]
	move.b	d0,(facing_direction,a2)        	| [ld   (ix+facing_direction),a]
	jbsr	get_level_number_288F             	| [call get_level_number_288F]
	subq.b	#1,d0                           	| [dec  a]
	and.b	#0x07,d0                         	| [and  $07]
	addq.b	#0x01,d0                        	| [add  a,$01]
	move.b	d0,(char_color,a2)              	| also sets color [ld   (ix+char_color),a]
	rts                                    	| [ret]

compute_snobee_speed_324E:
	jbsr	get_level_number_288F				| [call get_level_number_288F]
	subq.b	#1,d0                           	| [dec  a]
	lsr.b	#2,d0                            	| [srl  a]
	move.b	d0,d1                           	| [ld   b,a]
	move.b	currently_playing_8819,d0       	| [ld   a,(currently_playing_8819)]
	tst.b	d0                               	| [and  a]
	jeq	l_3267                             	| [jr   z,$3267]
	**move.b	dip_switches_9040,d0            	| [ld   a,(dip_switches_9040)]
	clr.b	d0		| TEMP
	not.b	d0                               	| [cpl]
	rol.b	#2,d0                            	| [rlca]
											| [rlca]
	and.b	#0x03,d0                         	| [and  $03]
 * a = 3 for hardest, 0 for easy
	add.b	d1,d0                            	| [add  a,b]
	move.b	d0,d1                           	| [ld   b,a]
l_3267:
	move.b	#0x0C,d0                        	| [ld   a,$0C]
	sub.b	d1,d0                            	| [sub  b]
	move.b	d0,(instant_move_period,a2)     	| [ld   (ix+instant_move_period),a]
	rts                                    	| [ret]

l_326e:
	move.b	#0x0E,(char_state,a2)           	| [ld   (ix+char_state),$0E]
	jbsr	get_level_number_288F             	| [call get_level_number_288F]
	cmp.b	#0x05,d0                         	| [cp   $05]
	bcs.b	0f
	rts                                    	| [ret  nc]
0:
	move.b	(char_id,a2),d0                 	| [ld   a,(ix+char_id)]
	cmp.b	#0x04,d0                         	| [cp   $04]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	clr.b	(char_state,a2)                  	| [ld   (ix+char_state),$00]
	rts                                    	| [ret]

init_moving_block_3283:
	lea	moving_block_struct_8DA0(pc),a2    	| [ld   ix,moving_block_struct_8DA0]
	clr.b	(x_pos,a2)                       	| [ld   (ix+x_pos),$00]
	clr.b	(y_pos,a2)                       	| [ld   (ix+y_pos),$00]
	move.b	#0x09,(char_color,a2)           	| [ld   (ix+char_color),$09]
	move.b	#0x03,(instant_move_period,a2)  	| [ld   (ix+instant_move_period),$03]
	clr.b	(current_period_counter,a2)      	| [ld   (ix+current_period_counter),$00]
	clr.b	(0x16,a2)                        	| [ld   (ix+$16),$00]
	clr.b	(0x17,a2)                        	| [ld   (ix+$17),$00]
	clr.b	(char_state,a2)                  	| [ld   (ix+char_state),$00]
	jbsr	display_character_sprite_39AB     	| [call display_character_sprite_39AB]
	rts 		| [ret]
* 5 slots of 5-byte states for breaking blocks
* only 5 blocks can be broken at the same time by 4 snobees
* and 1 pengo
l_32ab:
	clr.b	d0                               	| [xor  a]
	lea	breaking_block_slots_8CC0(pc),a0   	| [ld   hl,breaking_block_slots_8CC0]
									| [ld   de,$0005]
	move.b	#0x05,d1                        	| [ld   b,$05]
l_32b4:
	move.b	d0,(a0)                         	| [ld   (hl),a]
	addq.w	#5,a0								| [add  hl,de]
	move.b	d0,(a0)+                         	| [ld   (hl),a]
												| [inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_32b4                             	| [djnz $32B4]
	move.b	d0,(a0)                         	| [ld   (hl),a]
	rts                                    	| [ret]

l_32bc:
	move.b	game_playing_8817,d0            	| [ld   a,(game_playing_8817)]
	tst.b	d0                               	| [and  a]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	move.b	timer_16bit_8822,d0             	| [ld   a,(timer_16bit_8822)]
	and.b	#0x1F,d0                         	| [and  0x1F]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	move.b	#0x01,d1                      	| [ld   bc,0x2201]
	move.b	#0x22,d2                      	| [ld   bc,0x2201]
	move.b	player_number_8816,d0           	| [ld   a,(player_number_8816)]
	btst.b	#0,d0                           	| [bit  0,a]
	jeq	l_32d4                             	| [jr   z,0x32D4]
	move.b	#0x13,d1                      	| [ld   bc,0x2213]
	move.b	#0x22,d2                      	| [ld   bc,0x2213]
l_32d4:
	move.b	timer_16bit_8822,d0             	| [ld   a,(timer_16bit_8822)]
	btst.b	#5,d0                           	| [bit  5,a]
	jeq	l_32ea                             	| [jr   z,0x32EA]
	jbsr	convert_coords_to_screen_attributes_address_4BDC	| [call convert_coords_to_screen_attributes_address_4BDC]
	moveq	#0x11,d0                             | [ld   (hl),0x11]
	jbsr	osd_w_colorram                      	
	addq.b	#1,d2                           	| [inc  c]
	jbsr	convert_coords_to_screen_attributes_address_4BDC	| [call convert_coords_to_screen_attributes_address_4BDC]
	moveq	#0x11,d0                             | [ld   (hl),0x11]
	jbsr	osd_w_colorram                      	
	jbsr	l_32f9                            	| [call 0x32F9]
	rts                                    	| [ret]
l_32ea:
	jbsr	convert_coords_to_screen_attributes_address_4BDC	| [call convert_coords_to_screen_attributes_address_4BDC]
	moveq	#0,d0                             	| [ld   (hl),0x00]
	jbsr	osd_w_colorram
	addq.b	#1,d2                           	| [inc  c]
	jbsr	convert_coords_to_screen_attributes_address_4BDC	| [call convert_coords_to_screen_attributes_address_4BDC]
	moveq	#0,d0                             	| [ld   (hl),0x00]
	jbsr	osd_w_colorram
	jbsr	l_32fd                            	| [call 0x32FD]
	rts                                    	| [ret]
l_32f9:
	move.b	#0x10,d0                        	| [ld   a,0x10]
	jra	l_32ff                             	| [jr   0x32FF]
l_32fd:
	move.b	#0x0C,d0                        	| [ld   a,0x0C]
l_32ff:
	                       	| [ld   l,0x08]+[ld  h,0]
	move.w	#0x0800,cursor_x_8800                	| [ld   (cursor_x_8800),hl]
	move.b	#0x0C,d1                        	| [ld   b,0x0C]
l_3308:
	jbsr	set_attribute_at_current_pos_292D 	| [call set_attribute_at_current_pos_292D]
	subq.b	#1,d1                           	| [...]
	jne	l_3308                             	| [djnz 0x3308]
	rts       	

l_330e:
	lea	snobee_1_struct_8D00(pc),a2        	| [ld   ix,snobee_1_struct_8D00]
	jra	l_3324                             	| [jr   $3324]
l_3314:
	lea	snobee_2_struct_8D20(pc),a2        	| [ld   ix,snobee_2_struct_8D20]
	jra	l_3324                             	| [jr   $3324]
l_331a:
	lea	snobee_3_struct_8D40(pc),a2        	| [ld   ix,snobee_3_struct_8D40]
	jra	l_3324                             	| [jr   $3324]
l_3320:
	lea	snobee_4_struct_8D60(pc),a2        	| [ld   ix,snobee_4_struct_8D60]
l_3324:
	move.b	(char_state,a2),d0              	| [ld   a,(ix+char_state)]
	lea	snobee_jump_table_332D(pc),a1      	| [ld   de,snobee_jump_table_332D]
	jra	indirect_jump_2D8F                 	| [jp   indirect_jump_2D8F]

snobee_jump_table_332D:
	.long	_00_snobee_do_nothing_3353
	.long	_01_snobee_not_moving_3377
	.long	_02_snobee_moving_33A5
	.long	_03_snobee_aligns_for_stunned_3AAD
	.long	_04_snobee_stunned_39B5
	.long	_05_snobee_blinking_stunned_39F3
	.long	_06_stunned_picked_3A6C
	.long	disable_snobee_3359
	.long	chicken_mode_3372
	.long	l_3ad7
	.long	l_3b46
	.long	l_3b7d
	.long	l_3bb4
	.long	disable_snobee_3359
	.long	l_3c4b
	.long	l_3ceb
	.long	l_336d
	.long	l_3d2c
	.long	chicken_mode_3372

_00_snobee_do_nothing_3353:
 * active loop to keep roughly the same game speed
 * regardless of the number of currently active monsters
	move.b	#0x05,d1                        	| [ld b,$05]
	subq.b	#1,d1                           	| [dec  b]
l_3355:
	subq.b	#1,d1                           	| [...]
	jne	l_3355                             	| [djnz $3355]
	rts                                           	| [ret]

do_nothing_3358:
	rts                                    	| [ret]

disable_snobee_3359:
	clr.b	(x_pos,a2)                       	| [ld   (ix+x_pos),$00]
	clr.b	(y_pos,a2)                       	| [ld   (ix+y_pos),$00]
	jbsr	display_snobee_sprite_33CE        	| [call display_snobee_sprite_33CE]
	addq.b	#1,(char_state,a2)              	| [inc  (ix+char_state)]
	rts                                    	| [ret]

reset_state_to_default_3368:
	clr.b	(char_state,a2)                  	| [ld   (ix+char_state),$00]
	rts                                    	| [ret]

l_336d:
	move.b	#0x01,(char_state,a2)           	| [ld   (ix+char_state),$01]
	rts                                    	| [ret]

chicken_mode_3372:
	move.b	#0x0E,(char_state,a2)           	| [ld   (ix+char_state),$0E]
	rts                                    	| [ret]

_01_snobee_not_moving_3377:
	jbsr	l_3957                            	| [call $3957]
	btst.b	#0,(0x09,a2)                    	| [bit  0,(ix+$09)]
	bne	0f
	jbsr	l_3385                            	| [call z,$3385]
0:
	jbsr	l_338e                            	| [call $338E]
	rts                                    	| [ret]

l_3385:
	move.b	#0x04,(stunned_push_block_counter,a2)	| [ld   (ix+stunned_push_block_counter),$04]
	move.b	#0x0F,(0x09,a2)                 	| [ld   (ix+$09),$0F]
	rts                                    	| [ret]
l_338e:
	move.b	counter_lsb_8824,d0             	| [ld   a,(counter_lsb_8824)]
	tst.b	d0                               	| [and  a]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	move.b	(stunned_push_block_counter,a2),d0	| [ld   a,(ix+stunned_push_block_counter)]
	subq.b	#1,d0                           	| [dec  a]
	jeq	l_339d                             	| [jr   z,$339D]
	move.b	d0,(stunned_push_block_counter,a2)	| [ld   (ix+stunned_push_block_counter),a]
	rts                                    	| [ret]
l_339d:
	clr.b	(0x09,a2)                        	| [ld   (ix+$09),$00]
	addq.b	#1,(char_state,a2)              	| [inc  (ix+char_state)]
	rts                                    	| [ret]

_02_snobee_moving_33A5:
 * is period time reached?
	jbsr	l_3957                            	| [call $3957]
	addq.b	#1,(current_period_counter,a2)  	| [inc  (ix+current_period_counter)]
	move.b	(current_period_counter,a2),d0  	| [ld   a,(ix+current_period_counter)]
	cmp.b	(instant_move_period,a2),d0      	|  snobee period (copied from ix+move_period) [cp   (ix+instant_move_period)]
	bcc.b	0f
	rts                                    	| [ret  c]
0:
 * period time reached:	 time to move the snobee
	clr.b	(current_period_counter,a2)      	| [ld   (ix+current_period_counter),$00]
 * call the main A.I. routine

	jbsr	handle_snobee_direction_change_33D8	| [call handle_snobee_direction_change_33D8]
move_snobee_forward_33B9:
	lea	display_snobee_sprite_33CE(pc),a0  	| [ld   hl,display_snobee_sprite_33CE]
	move.l	a0,-(sp)                        	| [push hl]
	move.b	(facing_direction,a2),d0        	| snobee direction [ld   a,(ix+facing_direction)]
	lea	snobee_move_table_33C6(pc),a1      	| [ld   de,snobee_move_table_33C6]
	jra	indirect_jump_2D8F                 	| [jp   indirect_jump_2D8F]
snobee_move_table_33C6:
	.long	snobee_try_to_move_up_3922
	.long	snobee_try_to_move_down_392C
	.long	snobee_try_to_move_left_3936
	.long	snobee_try_to_move_right_3940
	
display_snobee_sprite_33CE:
	move.b	(char_id,a2),d0                 	| load sprite index [ld   a,(ix+char_id)]
	move.l	a2,a0                        	| [push ix]
											| [pop  hl]
	jbsr	display_sprite_3154               	| [call display_sprite_3154]
	rts


handle_snobee_direction_change_33D8:
	move.b	(x_pos,a2),d0                   	| load X [ld   a,(ix+x_pos)]
	and.b	#0x0F,d0                         	| [and  $0F]
	cmp.b	#0x08,d0                         	| not at the limit [cp   $08]
	beq.b	0f
	rts                                    	| [ret  nz]
0:

	move.b	(y_pos,a2),d0                   	| load Y [ld   a,(ix+y_pos)]
	and.b	#0x0F,d0                         	| [and  $0F]
	beq.b	0f
	rts                                    	| not at the limit [ret  nz]
0:

 * x and y coords are aligned for possible direction change
 * direction change can take place

	move.b	elapsed_minutes_since_start_of_round_8C5D,d0	| [ld   a,(elapsed_minutes_since_start_of_round_8C5D)]
	cmp.b	#0x02,d0                         	| [cp   $02]
	jcc	snobees_play_chicken_3403          	| after 2 minutes, snobees run to the corners and disappear [jr   nc,snobees_play_chicken_3403]

	move.b	remaining_alive_snobees_8D98,d0 	| [ld   a,(remaining_alive_snobees_8D98)]
	cmp.b	#0x03,d0                         	| [cp   $03]
	jcc	l_342e                             	| > 3 :	go [jr   nc,$342E]
	cmp.b	#0x02,d0                         	| [cp   $02]
	jne	l_33fc                             	| [jr   nz,$33FC]
 * only 2 snobees remaining
 * reset counter
	clr.b	d0                               	| [xor  a]
	move.b	d0,five_second_counter_8823     	| [ld   (five_second_counter_8823),a]
l_33fc:
	move.b	five_second_counter_8823,d0     	| [ld   a,(five_second_counter_8823)]
	cmp.b	#0x03,d0                         	| [cp   $03]
	jcs	l_342e                             	| [jr   c,$342E]
 * after 15 seconds, the last snobee runs and disappears
snobees_play_chicken_3403:
	move.b	(ai_mode,a2),d0                 	| [ld   a,(ix+ai_mode)]
	cmp.b	#0x09,d0                         	| [cp   $09]
	jcc	apply_snobee_behaviour_3461        	| already in one of the "chicken" states [jr   nc,apply_snobee_behaviour_3461]
 * set chicken state
	move.b	#0x07,(move_period,a2)          	| set speed to very fast fleeing snobee [ld   (ix+move_period),$07]
 * choose a corner to flee to
	jbsr	get_random_value_2D7C             	| [call get_random_value_2D7C]
	and.b	#0x03,d0                         	| [and  $03]
	add.b	#0x09,d0                         	| [add  a,$09]
	move.b	d0,(ai_mode,a2)                 	| set A.I. "flee" mode [ld   (ix+ai_mode),a]

	move.b	#0x03,d0                        	| [ld   a,$03]
	move.b	d0,game_phase_8CBB              	| [ld   (game_phase_8CBB),a]
	st.b	d1                                	| [ld   b,$FF]
	jbsr	play_sfx_1889                     	| [call play_sfx_1889]
	move.b	#0x09,d1                        	| super fast game music [ld   b,$09]
	jbsr	play_sfx_1889                     	| [call play_sfx_1889]
	move.b	#0x01,d1                        	| [ld   b,$01]
	jbsr	update_sound_18c7                 	| [call update_sound_18c7]
	jra	apply_snobee_behaviour_3461        	| [jr   apply_snobee_behaviour_3461]

 * normal movement

 * compute difficulty level from level number
 * level 01:	3
 * level 08:	4
 * level 12:	5
 * level 15:	6

l_342e:
	jbsr	get_level_number_288F             	| [call get_level_number_288F]
	subq.b	#1,d0                           	| level - 1 [dec  a]
	ror.b	#1,d0                            	| level * 64 [rrca]
	ror.b	#1,d0                            	| [rrca]
	and.b	#0x03,d0                         	| level & 0x3 [and  $03]
	addq.b	#0x03,d0                        	| level += 3 [add  a,$03]
	move.b	d0,d1                           	| [ld   b,a]
	move.b	remaining_alive_snobees_8D98,d0 	| [ld   a,(remaining_alive_snobees_8D98)]
	cmp.b	d1,d0                            	| [cp   b]
	jcc	l_344b                             	| jump if more alive snobees than the difficulty value [jr   nc,$344B]
 * all snobees take A.I. mode "block breaking"
	jbsr	compute_snobee_speed_324E         	| [call compute_snobee_speed_324E]
	subq.b	#0x01,d0                        	| [sub  $01]
	move.b	d0,(move_period,a2)             	| change/adjust speed [ld   (ix+move_period),a]
	move.b	#0x02,(ai_mode,a2)              	| breaking block mode [ld   (ix+ai_mode),$02]

l_344b:
	move.b	elapsed_minutes_since_start_of_round_8C5D,d0	| [ld   a,(elapsed_minutes_since_start_of_round_8C5D)]
	cmp.b	#0x01,d0                         	| [cp   $01]
	jcs	apply_snobee_behaviour_3461        	| [jr   c,apply_snobee_behaviour_3461]
	move.w	d0,-(sp)                        	| [push af]
 * after 1 minute, accelerate snobees & set A.I. mode to breaking block mode
	jbsr	compute_snobee_speed_324E         	| [call compute_snobee_speed_324E]
	subq.b	#0x01,d0                        	| [sub  $01]
	move.l	(sp)+,a4                        	| [pop  bc]
	movem.w	(sp)+,d1/d2                    	| [pop  bc]
	sub.b	d1,d0                            	| [sub  b]
	move.b	d0,(move_period,a2)             	| change/adjust speed [ld   (ix+move_period),a]
	move.b	#0x02,(ai_mode,a2)              	| breaking block mode [ld   (ix+ai_mode),$02]

apply_snobee_behaviour_3461:
	move.b	(ai_mode,a2),d0                 	| [ld   a,(ix+ai_mode)]
	lea	snobee_behaviour_table_346A(pc),a1 	| [ld   de,snobee_behaviour_table_346A]
	jra	indirect_jump_2D8F                 	| [jp   indirect_jump_2D8F]

snobee_behaviour_table_346A:
	.long	_00_snobee_mode_block_avoid_351E
	.long	_01_snobee_mode_roaming_3649
	.long	_02_snobee_mode_block_eat_3843   	|   block breaking mode
	.long	_03_snobee_mode_pengo_hunt_1_on_x_378A
	.long	_04_snobee_mode_pengo_hunt_2_on_y_37C2
	.long	_05_snobee_mode_pengo_hunt_3_37FA	|  the most aggressive mode
	.long	_01_snobee_mode_roaming_3649
	.long	_01_snobee_mode_roaming_3649
	.long	_05_snobee_mode_pengo_hunt_3_37FA
	.long	chicken_mode_reach_border_348C
	.long	chicken_mode_reach_border_348C
	.long	chicken_mode_reach_border_348C
	.long	chicken_mode_reach_border_348C
	.long	chicken_mode_go_up_to_corner_34D0
	.long	chicken_mode_go_down_to_corner_3503
	.long	chicken_mode_go_left_to_corner_350C
	.long	chicken_mode_go_right_to_corner_3515


chicken_mode_reach_border_348C:
	move.b	(y_pos,a2),d0                   	| [ld   a,(ix+y_pos)]
	cmp.b	#0xF0,d0                         	| [cp   $F0]
	jeq	l_34bf                             	| [jr   z,$34BF]
	cmp.b	#0x10,d0                         	| [cp   $10]
	jeq	l_34bf                             	| [jr   z,$34BF]
	move.b	(x_pos,a2),d0                   	| [ld   a,(ix+x_pos)]
	cmp.b	#0xD8,d0                         	| [cp   $D8]
	jeq	l_34b0                             	| [jr   z,$34B0]
	cmp.b	#0x18,d0                         	| [cp   $18]
	jeq	l_34b0                             	| [jr   z,$34B0]
	move.b	(ai_mode,a2),d0                 	| [ld   a,(ix+ai_mode)]
	sub.b	#0x09,d0                         	| [sub  $09]
	and.b	#0x03,d0                         	| [and  $03]
	move.b	d0,(facing_direction,a2)        	| [ld   (ix+facing_direction),a]
	jbsr	l_38d6                            	| [call $38D6]
	rts                                    	| [ret]

l_34b0:
	jbsr	get_random_value_2D7C             	| [call get_random_value_2D7C]
	and.b	#0x01,d0                         	| [and  $01]
	move.b	d0,(facing_direction,a2)        	| [ld   (ix+facing_direction),a]
	add.b	#0x0D,d0                         	| [add  a,$0D]
	move.b	d0,(ai_mode,a2)                 	|  select corner to flee [ld   (ix+ai_mode),a]
	move.l	(sp)+,a0                        	| [pop  hl]
	rts                                    	| [ret]

 * change direction by a random value but only left/right
l_34bf:
	jbsr	get_random_value_2D7C             	| [call get_random_value_2D7C]
	and.b	#0x01,d0                         	| [and  $01]
	addq.b	#0x02,d0                        	| [add  a,$02]
	move.b	d0,(facing_direction,a2)        	| [ld   (ix+facing_direction),a]
	add.b	#0x0D,d0                         	| [add  a,$0D]
	move.b	d0,(ai_mode,a2)                 	|  select corner to flee [ld   (ix+ai_mode),a]
	move.l	(sp)+,a0                        	| [pop  hl]
	rts                                    	| [ret]

chicken_mode_go_up_to_corner_34D0:
	move.b	(y_pos,a2),d0                   	| [ld   a,(ix+y_pos)]
	cmp.b	#0x10,d0                         	| [cp   $10]
	jeq	l_34f3                             	| [jr   z,$34F3]
l_34d7:
	jbsr	get_div8_ix_coords_3E78           	| [call get_div8_ix_coords_3E78]
	move.b	(facing_direction,a2),d0        	| [ld   a,(ix+facing_direction)]
	lea	is_grid_free_jump_table_43A1(pc),a1	| [ld   de,is_grid_free_jump_table_43A1]
	jbsr	indirect_jump_2D8F                	| [call indirect_jump_2D8F]
	cmp.b	#0x1C,d0                         	| [cp   $1C]
	jeq	l_34f3                             	| [jr   z,$34F3]
	cmp.b	#0x1D,d0                         	| [cp   $1D]
	jeq	l_34f3                             	| [jr   z,$34F3]
	cmp.b	#0x1E,d0                         	| [cp   $1E]
	jeq	l_34f3                             	| [jr   z,$34F3]
	jbsr	l_38d6                            	| [call $38D6]
	rts                                    	| [ret]

l_34f3:
	move.b	#0xC8,(animation_frame,a2)      	| [ld   (ix+animation_frame),$C8]
	move.b	#0x06,(intermission_dance_push_anim_counter,a2)	| [ld   (ix+intermission_dance_push_anim_counter),$06]
	move.b	d0,(move_period,a2)             	| [ld   (ix+move_period),a]
	move.b	#0x11,(char_state,a2)           	| [ld   (ix+char_state),$11]
	rts                                    	| [ret]

chicken_mode_go_down_to_corner_3503:
	move.b	(y_pos,a2),d0                   	| [ld   a,(ix+y_pos)]
	cmp.b	#0xF0,d0                         	| [cp   $F0]
	jeq	l_34f3                             	| [jr   z,$34F3]
	jra	l_34d7                             	| [jr   $34D7]
chicken_mode_go_left_to_corner_350C:
	move.b	(x_pos,a2),d0                   	| [ld   a,(ix+x_pos)]
	cmp.b	#0x18,d0                         	| [cp   $18]
	jeq	l_34f3                             	| [jr   z,$34F3]
	jra	l_34d7                             	| [jr   $34D7]
chicken_mode_go_right_to_corner_3515:
	move.b	(x_pos,a2),d0                   	| [ld   a,(ix+x_pos)]
	cmp.b	#0xD8,d0                         	| [cp   $D8]
	jeq	l_34f3                             	| [jr   z,$34F3]
	jra	l_34d7                             	| [jr   $34D7]

_00_snobee_mode_block_avoid_351E:
	jbsr	find_an_empty_space_3608          	| [call find_an_empty_space_3608]
	move.b	(path_address_pointer_or_misc_flags,a2),d2	| [ld   c,(ix+path_address_pointer_or_misc_flags)]
	lea	moving_block_struct_8DA0(pc),a3    	| [ld   iy,moving_block_struct_8DA0]
	move.b	(facing_direction,a3),d0        	| [ld   a,(iy+facing_direction)]
	lea	table_3531(pc),a1                  	| [ld   de,table_3531]
	jra	indirect_jump_2D8F                 	| [jp   indirect_jump_2D8F]
table_3531:
	.long	snobee_avoids_block_up_3539
	.long	snobee_avoids_block_down_355D
	.long	snobee_avoids_block_left_3573
	.long	snobee_avoids_block_right_3589

snobee_avoids_block_up_3539:
	move.b	#0x03,d1                        	| [ld   b,$03]
	btst.b	#7,d2                           	| [bit  7,c]
	jne	l_354d                             	| [jr   nz,$354D]
	move.b	#0x02,d1                        	| [ld   b,$02]
	btst.b	#6,d2                           	| [bit  6,c]
	jne	l_354d                             	| [jr   nz,$354D]
	clr.b	d1                               	| [ld   b,$00]
	btst.b	#4,d2                           	| [bit  4,c]
	jne	l_3559                             	| [jr   nz,$3559]
	move.b	#0x01,d1                        	| [ld   b,$01]
l_354d:
	move.b	(backup_ai_mode,a2),d0          	| [ld   a,(ix+backup_ai_mode)]
	move.b	d0,(ai_mode,a2)                 	| sets saved A.I. mode [ld   (ix+ai_mode),a]
	move.b	(move_period,a2),d0             	| [ld   a,(ix+move_period)]
	move.b	d0,(instant_move_period,a2)     	| [ld   (ix+instant_move_period),a]
l_3559:
	move.b	d1,(facing_direction,a2)        	| [ld   (ix+facing_direction),b]
	rts                                    	| [ret]

snobee_avoids_block_down_355D:
	move.b	#0x02,d1                        	| [ld   b,$02]
	btst.b	#6,d2                           	| [bit  6,c]
	jne	l_354d                             	| [jr   nz,$354D]
	move.b	#0x03,d1                        	| [ld   b,$03]
	btst.b	#7,d2                           	| [bit  7,c]
	jne	l_354d                             	| [jr   nz,$354D]
	move.b	#0x01,d1                        	| [ld   b,$01]
	btst.b	#5,d2                           	| [bit  5,c]
	jne	l_3559                             	| [jr   nz,$3559]
	clr.b	d1                               	| [ld   b,$00]
	jra	l_354d                             	| [jr   $354D]

snobee_avoids_block_left_3573:
	clr.b	d1                               	| [ld   b,$00]
	btst.b	#4,d2                           	| [bit  4,c]
	jne	l_354d                             	| [jr   nz,$354D]
	move.b	#0x01,d1                        	| [ld   b,$01]
	btst.b	#5,d2                           	| [bit  5,c]
	jne	l_354d                             	| [jr   nz,$354D]
	move.b	#0x02,d1                        	| [ld   b,$02]
	btst.b	#6,d2                           	| [bit  6,c]
	jne	l_3559                             	| [jr   nz,$3559]
	move.b	#0x03,d1                        	| [ld   b,$03]
	jra	l_354d                             	| [jr   $354D]

snobee_avoids_block_right_3589:
	move.b	#0x01,d1                        	| [ld   b,$01]
	btst.b	#5,d2                           	| [bit  5,c]
	jne	l_354d                             	| [jr   nz,$354D]
	clr.b	d1                               	| [ld   b,$00]
	btst.b	#4,d2                           	| [bit  4,c]
	jne	l_354d                             	| [jr   nz,$354D]
	move.b	#0x03,d1                        	| [ld   b,$03]
	btst.b	#7,d2                           	| [bit  7,c]
	jne	l_3559                             	| [jr   nz,$3559]
	move.b	#0x02,d1                        	| [ld   b,$02]
	jra	l_354d                             	| [jr   $354D]

avoids_moving_block_359F:
	lea	moving_block_struct_8DA0(pc),a3    	| [ld   iy,moving_block_struct_8DA0]
	move.b	(facing_direction,a3),d0        	| block direction [ld   a,(iy+facing_direction)]
	lea	jump_table_35AC(pc),a1             	| [ld   de,jump_table_35AC]
	jra	indirect_jump_2D8F                 	| [jp   indirect_jump_2D8F]
jump_table_35AC:
	.long	snobee_threatened_by_moving_block_up_35B4
	.long	snobee_threatened_by_moving_block_down_35D8
	.long	snobee_threatened_by_moving_block_left_35E8
	.long	snobee_threatened_by_moving_block_right_35F8


snobee_threatened_by_moving_block_up_35B4:
	move.b	(0x00,a3),d0                    	| [ld   a,(iy+$00)]
	cmp.b	(x_pos,a2),d0                    	| [cp   (ix+x_pos)]
	beq.b	0f
	rts                                    	| not same x:	no danger [ret  nz]
0:
	move.b	(0x01,a3),d0                    	| [ld   a,(iy+$01)]
	cmp.b	(y_pos,a2),d0                    	| [cp   (ix+y_pos)]
	bcc.b	0f
	rts                                    	| y block > y snobee no danger [ret  c]
0:
 * danger: try to avoid the block (block has speed 3, snobee has speed 5 which is slower but can be enough to avoid the block in some cases)

snobee_tries_to_avoid_block_35C2:
	move.b	(ai_mode,a2),d0                 	| [ld   a,(ix+ai_mode)]
	move.b	d0,(backup_ai_mode,a2)                    	| backup A.I. mode [ld   (ix+$1d),a]
	clr.b	(ai_mode,a2)                     	| set block avoidance mode [ld   (ix+ai_mode),$00]
	move.b	#0x05,d0                        	| fast speed [ld   a,$05]
	move.b	d0,(instant_move_period,a2)     	| set speed [ld   (ix+instant_move_period),a]
	clr.b	(current_period_counter,a2)      	| [ld   (ix+current_period_counter),$00]
	move.l	(sp)+,a0                        	| [pop  hl]
	move.l	(sp)+,a0                        	| [pop  hl]
	rts                                    	| [ret]

snobee_threatened_by_moving_block_down_35D8:
	move.b	(x_pos,a3),d0                   	| [ld   a,(iy+x_pos)]
	cmp.b	(x_pos,a2),d0                    	| [cp   (ix+x_pos)]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	move.b	(y_pos,a3),d0                   	| [ld   a,(iy+y_pos)]
	cmp.b	(y_pos,a2),d0                    	| [cp   (ix+y_pos)]
	bcs.b	0f
	rts                                    	| [ret  nc]
0:
	jra	snobee_tries_to_avoid_block_35C2   	| [jr   snobee_tries_to_avoid_block_35C2]

snobee_threatened_by_moving_block_left_35E8:
	move.b	(y_pos,a3),d0                   	| [ld   a,(iy+y_pos)]
	cmp.b	(y_pos,a2),d0                    	| [cp   (ix+y_pos)]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	move.b	(x_pos,a3),d0                   	| [ld   a,(iy+x_pos)]
	cmp.b	(x_pos,a2),d0                    	| [cp   (ix+x_pos)]
	bcc.b	0f
	rts                                    	| [ret  c]
0:
	jra	snobee_tries_to_avoid_block_35C2   	| [jr   snobee_tries_to_avoid_block_35C2]

snobee_threatened_by_moving_block_right_35F8:
	move.b	(y_pos,a3),d0                   	| [ld   a,(iy+y_pos)]
	cmp.b	(y_pos,a2),d0                    	| [cp   (ix+y_pos)]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	move.b	(x_pos,a3),d0                   	| [ld   a,(iy+x_pos)]
	cmp.b	(x_pos,a2),d0                    	| [cp   (ix+x_pos)]
	bcs.b	0f
	rts                                    	| [ret  nc]
0:
	jra	snobee_tries_to_avoid_block_35C2   	| [jr   snobee_tries_to_avoid_block_35C2]

* look for a possible escape slot for snobee
find_an_empty_space_3608:
	clr.b	(path_address_pointer_or_misc_flags,a2)	| [ld   (ix+path_address_pointer_or_misc_flags),$00]
	jbsr	get_div8_ix_coords_3E78           	| [call get_div8_ix_coords_3E78]
	jbsr	is_upper_grid_free_390F           	| [call is_upper_grid_free_390F]
	jne	l_361b                             	| [jr   nz,$361B]
	bset.b	#4,(path_address_pointer_or_misc_flags,a2)	| [set  4,(ix+path_address_pointer_or_misc_flags)]
	addq.b	#1,(path_address_pointer_or_misc_flags,a2)	| [inc  (ix+path_address_pointer_or_misc_flags)]
l_361b:
	jbsr	get_div8_ix_coords_3E78           	| [call get_div8_ix_coords_3E78]
	jbsr	is_lower_grid_free_3917           	| [call is_lower_grid_free_3917]
	jne	l_362a                             	| [jr   nz,$362A]
	bset.b	#5,(path_address_pointer_or_misc_flags,a2)	| [set  5,(ix+path_address_pointer_or_misc_flags)]
	addq.b	#1,(path_address_pointer_or_misc_flags,a2)	| [inc  (ix+path_address_pointer_or_misc_flags)]
l_362a:
	jbsr	get_div8_ix_coords_3E78           	| [call get_div8_ix_coords_3E78]
	jbsr	is_left_grid_free_391B            	| [call is_left_grid_free_391B]
	jne	l_3639                             	| [jr   nz,$3639]
	bset.b	#6,(path_address_pointer_or_misc_flags,a2)	| [set  6,(ix+path_address_pointer_or_misc_flags)]
	addq.b	#1,(path_address_pointer_or_misc_flags,a2)	| [inc  (ix+path_address_pointer_or_misc_flags)]
l_3639:
	jbsr	get_div8_ix_coords_3E78           	| [call get_div8_ix_coords_3E78]
	jbsr	is_right_grid_free_391E           	| [call is_right_grid_free_391E]
	jne	l_3648                             	| [jr   nz,$3648]
	bset.b	#7,(path_address_pointer_or_misc_flags,a2)	| [set  7,(ix+path_address_pointer_or_misc_flags)]
	addq.b	#1,(path_address_pointer_or_misc_flags,a2)	| [inc  (ix+path_address_pointer_or_misc_flags)]
l_3648:
	rts                                    	| [ret]

_01_snobee_mode_roaming_3649:
	move.b	block_moving_flag_8DBF,d0     	| [ld   a,($block_moving_flag_8DBF)]
	cmp.b	#0x02,d0                         	| [cp   $02]
	bne	0f
	jbsr	avoids_moving_block_359F          	| [call z,avoids_moving_block_359F]
0:
 * update speed
	move.b	(move_period,a2),d0             	| [ld   a,(ix+move_period)]
	move.b	d0,(instant_move_period,a2)     	| [ld   (ix+instant_move_period),a]
	jbsr	find_an_empty_space_3608                            	| [call $3608]
	move.b	(path_address_pointer_or_misc_flags,a2),d0	| [ld   a,(ix+path_address_pointer_or_misc_flags)]
	and.b	#0x0F,d0                         	| [and  $0F]
	lea	table_3665(pc),a1                  	| [ld   de,table_3665]
	jra	indirect_jump_2D8F                 	| [jp   indirect_jump_2D8F]
table_3665:
	.long	l_366f
	.long	l_3675
	.long	l_36e0
	.long	l_371d
	.long	l_3752

l_366f:
	move.b	#0x02,(ai_mode,a2)              	|  sets block breaking mode [ld   (ix+ai_mode),$02]
	move.l	(sp)+,a0                        	| [pop  hl]
	rts                                    	| [ret]

l_3675:
	move.b	(path_address_pointer_or_misc_flags,a2),d0	| [ld   a,(ix+path_address_pointer_or_misc_flags)]
	move.b	#0x03,d1                        	| [ld   b,$03]
l_367a:
	rol.b	#1,d0                            	| [rlca]
	jcs	l_367f                             	| [jr   c,$367F]
	subq.b	#1,d1                           	| [...]
	jne	l_367a                             	| [djnz $367A]
l_367f:
	move.b	d1,(facing_direction,a2)        	| [ld   (ix+facing_direction),b]
	addq.b	#1,(0x15,a2)                    	| [inc  (ix+$15)]
	move.b	(0x15,a2),d0                    	| [ld   a,(ix+$15)]
	lea	table_368E(pc),a1                  	| [ld   de,table_368E]
	jra	indirect_jump_2D8F                 	| [jp   indirect_jump_2D8F]

table_368E:
	.long	l_3696
	.long	l_36a0
	.long	l_36aa
	.long	l_36be


l_3696:
	jbsr	get_div8_ix_coords_3E78           	| [call get_div8_ix_coords_3E78]
	move.b	d2,(0x16,a2)                    	| [ld   (ix+$16),c]
	move.b	d1,(0x17,a2)                    	| [ld   (ix+$17),b]
	rts                                    	| [ret]

l_36a0:
	jbsr	get_div8_ix_coords_3E78           	| [call get_div8_ix_coords_3E78]
	move.b	d2,(0x18,a2)                    	| [ld   (ix+$18),c]
	move.b	d1,(0x19,a2)                    	| [ld   (ix+$19),b]
	rts                                    	| [ret]

l_36aa:
	jbsr	get_div8_ix_coords_3E78           	| [call get_div8_ix_coords_3E78]
	move.b	d2,d6                           	| [ld   l,c]
	lsl.w	#8,d6
	move.b	d1,d6                           	| [ld   h,b]
	move.w	(0x16,a2),d3                    	| [ld   e,(ix+$16)]
												| [ld   d,(ix+$17)]
	jbsr	compare_hl_to_de_2D99             	| [call compare_hl_to_de_2D99]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	move.b	#0xFF,(0x15,a2)                 	| [ld   (ix+$15),$FF]
	rts                                    	| [ret]

l_36be:
	jbsr	get_div8_ix_coords_3E78           	| [call get_div8_ix_coords_3E78]
	move.b	d2,d6                           	| [ld   l,c]
	lsl.w	#8,d6
	move.b	d1,d6                           	| [ld   h,b]
	move.w	(0x18,a2),d3                    	| [ld   e,(ix+$18)]
												| [ld   d,(ix+$19)]
	jbsr	compare_hl_to_de_2D99             	| [call compare_hl_to_de_2D99]
	jeq	l_36d3                             	| [jr   z,$36D3]
	move.b	#0xFF,(0x15,a2)                 	| [ld   (ix+$15),$FF]
	rts                                    	| [ret]

l_36d3:
	move.b	#0x02,(0x1b,a2)                 	| [ld   (ix+$1b),$02]
	move.b	#0x02,(ai_mode,a2)              	|  sets block breaking mode [ld   (ix+ai_mode),$02]
	move.b	#0xFF,(0x15,a2)                 	| [ld   (ix+$15),$FF]
	rts                                    	| [ret]

l_36e0:
	jbsr	l_3706                            	| [call $3706]
	jbsr	l_36f6                            	| [call $36F6]

	move.l	a2,a0                        	| [push ix] [pop  hl]
	                      	| [ld   de,$0011]
	add.w	#0x11,a0						| [add  hl,de]
	cmp.b	(a0),d0                          	| [cp   (hl)]
	jne	l_36f1                             	| [jr   nz,$36F1]
	addq.w	#1,a0                           	| [inc  hl]
l_36f1:
	move.b	(a0),d0                         	| [ld   a,(hl)]
	move.b	d0,(facing_direction,a2)        	| [ld   (ix+facing_direction),a]
	rts                                    	| [ret]

l_36f6:
	move.b	(facing_direction,a2),d0        	| [ld   a,(ix+facing_direction)]
	clr.w	d3                               	| [ld   d,$00]
	move.b	d0,d3                           	| [ld   e,a]
	lea	table_3702(pc),a0                  	| [ld   hl,table_3702]
	add.w	d3,a0							| [add  hl,de]
	move.b	(a0),d0                         	| [ld   a,(hl)]
	rts                                    	| [ret]

table_3702:
	.byte	0x01,0x00,0x03,0x02

l_3706:
	move.b	(path_address_pointer_or_misc_flags,a2),d0	| [ld   a,(ix+path_address_pointer_or_misc_flags)]
	move.b	#0x04,d1                        	| [ld   b,$04]
	move.b	#0x03,d2                        	| [ld   c,$03]

	move.l	a2,a0                        	| [push ix] [pop  hl]
	                      	| [ld   de,$0011]
	add.w	#0x11,a0						| [add  hl,de]
l_3714:
	rol.b	#1,d0                            	| [rlca]
	jcc	l_3719                             	| [jr   nc,$3719]
	move.b	d2,(a0)+                         	| [ld   (hl),c]
												| [inc  hl]
l_3719:
	subq.b	#1,d2                           	| [dec  c]
	subq.b	#1,d1                           	| [...]
	jne	l_3714                             	| [djnz $3714]
	rts                                    	| [ret]

l_371d:
	jbsr	l_3706                            	| [call $3706]
* completely useless call, probably buggy
l_3720:
	jbsr	get_random_value_2D7C             	| [call get_random_value_2D7C]
	and.b	#0x03,d0                         	| [and  $03]
	cmp.b	#0x03,d0                         	| [cp   $03]
* test always succeeds, else it would loop????
	jcc	l_3720                             	| [jr   nc,$3720]

	move.l	a2,a0                        	| {push ix]+[pop  hl]
	move.w	#0x11,d3                        	| [ld   e,$11]
	add.b	d0,d3                            	| [add  a,e]
												| [ld   e,a]
	add.w	d3,a0								| [add  hl,de]
	move.b	(a0),d0                         	| [ld   a,(hl)]
	move.w	d0,-(sp)                        	| [push af]
	jbsr	l_36f6                            	| [call $36F6]
	move.b	d0,d1                           	| [ld   b,a]
	move.w	(sp)+,d0                        	| [pop  af]
	cmp.b	d1,d0                            	| [cp   b]
	jeq	l_3720                             	| [jr   z,$3720]
	move.b	(facing_direction,a2),d1        	| [ld   b,(ix+facing_direction)]
	move.b	d0,(facing_direction,a2)        	| [ld   (ix+facing_direction),a]
	cmp.b	d1,d0                            	| [cp   b]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	move.b	#0x01,(stunned_push_block_counter,a2)	| [ld   (ix+stunned_push_block_counter),$01]
	move.b	#0x0F,(0x09,a2)                 	| [ld   (ix+$09),$0F]
	move.b	#0x01,(char_state,a2)           	| [ld   (ix+char_state),$01]
	rts                                    	| [ret]

l_3752:
	jbsr	get_random_value_2D7C             	| [call get_random_value_2D7C]
	and.b	#0x01,d0                         	| [and  $01]
	bne.b	0f
	rts                                    	| [ret  z]
0:
* 50% chance
	lea	pengo_struct_8D80(pc),a3           	| [ld   iy,pengo_struct_8D80]
	clr.b	(facing_direction,a2)            	| [ld   (ix+facing_direction),$00]
	move.b	(x_pos,a2),d0                   	| [ld   a,(ix+x_pos)]
	sub.b	(x_pos,a3),d0                    	| [sub  (iy+x_pos)]
	jcc	l_376e                             	| [jr   nc,$376E]
	bset.b	#0,(facing_direction,a2)        	| [set  0,(ix+facing_direction)]
	neg.b	d0                               	| [neg]
l_376e:
	move.b	d0,d1                           	| [ld   b,a]
	move.b	(y_pos,a2),d0                   	| [ld   a,(ix+y_pos)]
	sub.b	(y_pos,a3),d0                    	| [sub  (iy+y_pos)]
	jcc	l_377d                             	| [jr   nc,$377D]
	bset.b	#1,(facing_direction,a2)        	| [set  1,(ix+facing_direction)]
	neg.b	d0                               	| [neg]
l_377d:
	sub.b	d1,d0                            	| [sub  b]
	jcc	l_3785                             	| [jr   nc,$3785]
	bset.b	#1,(facing_direction,a2)        	| [set  1,(ix+facing_direction)]
	rts                                    	| [ret]
l_3785:
	move.b	(facing_direction,a2),d7
	lsr.b	#1,d7
	move.b	d7,(facing_direction,a2)         	| [srl  (ix+facing_direction)]
	rts                                    	| [ret]

 * *** hunt mode 1 ***
 * if same x, change y direction to follow pengo
 * else
 *    1 chance out of 8 to go (temporarily) in roaming mode
 * if no roaming mode, then
 *    if snobee x is near pengo x (next/previous column), change y direction too
 *    else go (temporarily) in roaming mode

_03_snobee_mode_pengo_hunt_1_on_x_378A:
	lea	pengo_struct_8D80(pc),a3           	| [ld   iy,pengo_struct_8D80]
	move.b	(x_pos,a3),d0                   	| pengo X [ld   a,(iy+x_pos)]
	cmp.b	(x_pos,a2),d0                    	| same X as snobee? [cp   (ix+x_pos)]
	jeq	change_vertical_direction_to_follow_pengo_37B0	| [jr   z,change_vertical_direction_to_follow_pengo_37B0]
	jbsr	get_random_value_2D7C             	| [call get_random_value_2D7C]
	and.b	#0x07,d0                         	| [and  $07]
 * 1 chance out of 8 to go in roaming mode in this case
 * (and thus avoids pushed blocks)
	jeq	_01_snobee_mode_roaming_3649     	| [jp   z,$_01_snobee_mode_roaming_3649]

	move.b	(x_pos,a3),d0                   	| [ld   a,(iy+x_pos)]
	sub.b	#0x10,d0                         	| [sub  $10]
	cmp.b	(x_pos,a2),d0                    	| [cp   (ix+x_pos)]
	jeq	change_vertical_direction_to_follow_pengo_37B0	| [jr   z,change_vertical_direction_to_follow_pengo_37B0]
	add.b	#0x20,d0                         	| [add  a,$20]
	cmp.b	(x_pos,a2),d0                    	| [cp   (ix+x_pos)]
 * far from pengo (not in the next row): go roaming
	jne	_01_snobee_mode_roaming_3649       	| [jp   nz,_01_snobee_mode_roaming_3649]

 * just one row above or one row below pengo
 * change direction to up or down to try to get pengo
change_vertical_direction_to_follow_pengo_37B0:
	clr.b	d1                               	| [ld   b,$00]
	move.b	(y_pos,a3),d0                   	| [ld   a,(iy+y_pos)]
	cmp.b	(y_pos,a2),d0                    	| [cp   (ix+y_pos)]
	jcs	l_37bb                             	| [jr   c,$37BB]
	addq.b	#1,d1                           	| [inc  b]
l_37bb:
	move.b	d1,(facing_direction,a2)        	| [ld   (ix+facing_direction),b]
	jbsr	l_38d6                            	| [call $38D6]
	rts                                    	| [ret]

 * *** hunt mode 2 ***
 * if same y, change x direction to follow pengo
 * else
 *    1 chance out of 8 to go in roaming mode
 * if no roaming mode, then
 *    if snobee y is near pengo y (next/previous row), change x direction too
 *    else go (temporarily) in roaming mode

_04_snobee_mode_pengo_hunt_2_on_y_37C2:
	lea	pengo_struct_8D80(pc),a3           	| [ld   iy,pengo_struct_8D80]
	move.b	(y_pos,a3),d0                   	| [ld   a,(iy+y_pos)]
	cmp.b	(y_pos,a2),d0                    	| [cp   (ix+y_pos)]
	jeq		change_lateral_direction_to_follow_pengo_37E8	| [jr   z,$change_lateral_direction_to_follow_pengo_37E8]
	jbsr	get_random_value_2D7C             	| [call get_random_value_2D7C]
	and.b	#0x07,d0                         	| [and  $07]
	jeq		_01_snobee_mode_roaming_3649     	| [jp   z,$_01_snobee_mode_roaming_3649]
	move.b	(y_pos,a3),d0                   	| [ld   a,(iy+y_pos)]
	sub.b	#0x10,d0                         	| [sub  $10]
	cmp.b	(y_pos,a2),d0                    	| [cp   (ix+y_pos)]
	jeq	change_lateral_direction_to_follow_pengo_37E8	| [jr   z,$change_lateral_direction_to_follow_pengo_37E8]
	add.b	#0x20,d0                         	| [add  a,$20]
	cmp.b	(y_pos,a2),d0                    	| [cp   (ix+y_pos)]
	jne	_01_snobee_mode_roaming_3649     	| [jp   nz,$_01_snobee_mode_roaming_3649]

change_lateral_direction_to_follow_pengo_37E8:
	move.b	#0x02,d1                        	| [ld   b,$02]
	move.b	(x_pos,a3),d0                   	| [ld   a,(iy+x_pos)]
	cmp.b	(x_pos,a2),d0                    	| [cp   (ix+x_pos)]
	jcs	l_37f3                             	| pengo x < snobee x ? [jr   c,$37F3]
	addq.b	#1,d1                           	| [inc  b]
l_37f3:
	move.b	d1,(facing_direction,a2)        	|  set left or right to be closer to pengo [ld   (ix+facing_direction),b]
	jbsr	l_38d6                            	| [call $38D6]
	rts                                    	| [ret]

 * *** hunt mode 3 ***
 * if same x, change y direction to follow pengo
 * else
 *    1 chance out of 8 to go in roaming mode (and thus breaks the chase)
 * if no roaming mode, then
 *    if snobee x is near pengo x (next/previous column), change y direction too
 * else if same y, change x direction to follow pengo
 * else
 *    1 chance out of 8 to go (temporarily) in roaming mode
 * if no roaming mode, then
 *    if snobee y is near pengo y (next/previous row), change x direction too
 *    else go in roaming mode

_05_snobee_mode_pengo_hunt_3_37FA:
	lea	pengo_struct_8D80(pc),a3           	| [ld   iy,pengo_struct_8D80]
	move.b	(x_pos,a3),d0                   	| [ld   a,(iy+x_pos)]
	cmp.b	(x_pos,a2),d0                    	|  same X ? [cp   (ix+x_pos)]
	jeq		change_vertical_direction_to_follow_pengo_37B0	| [jr   z,$change_vertical_direction_to_follow_pengo_37B0]
	jbsr	get_random_value_2D7C             	| [call get_random_value_2D7C]
	and.b	#0x07,d0                         	| [and  $07]
 * 1 chance out of 8 to go in roaming mode in this case
 * (and thus avoids pushed blocks)
	jeq	_01_snobee_mode_roaming_3649     	| [jp   z,$_01_snobee_mode_roaming_3649]

	move.b	(x_pos,a3),d0                   	|  pengo X [ld   a,(iy+x_pos)]
	sub.b	#0x10,d0                         	| [sub  $10]
	cmp.b	(x_pos,a2),d0                    	| [cp   (ix+x_pos)]
	jeq	change_vertical_direction_to_follow_pengo_37B0	| [jr   z,change_vertical_direction_to_follow_pengo_37B0]
	add.b	#0x20,d0                         	| [add  a,$20]
	cmp.b	(x_pos,a2),d0                    	| [cp   (ix+x_pos)]
 * near pengo (in the next column left or right): follow pengo
	jeq	change_vertical_direction_to_follow_pengo_37B0	| [jr   z,change_vertical_direction_to_follow_pengo_37B0]
 * same y as pengo ??
	move.b	(y_pos,a3),d0                   	| [ld   a,(iy+y_pos)]
	cmp.b	(y_pos,a2),d0                    	| [cp   (ix+y_pos)]
	jeq	change_lateral_direction_to_follow_pengo_37E8	| [jr   z,change_lateral_direction_to_follow_pengo_37E8]
	jbsr	get_random_value_2D7C             	| [call get_random_value_2D7C]
	and.b	#0x07,d0                         	| [and  $07]
	jeq	_01_snobee_mode_roaming_3649     	| [jp   z,$_01_snobee_mode_roaming_3649]
	move.b	(y_pos,a3),d0                   	| [ld   a,(iy+y_pos)]
	sub.b	#0x10,d0                         	| [sub  $10]
	cmp.b	(y_pos,a2),d0                    	| [cp   (ix+y_pos)]
	jeq	change_lateral_direction_to_follow_pengo_37E8	| [jr   z,change_lateral_direction_to_follow_pengo_37E8]
	add.b	#0x20,d0                         	| [add  a,$20]
	cmp.b	(y_pos,a2),d0                    	| [cp   (ix+y_pos)]
	jeq	change_lateral_direction_to_follow_pengo_37E8	| [jr   z,change_lateral_direction_to_follow_pengo_37E8]
	jra	_01_snobee_mode_roaming_3649     	| [jp   $_01_snobee_mode_roaming_3649]
	
 * block breaking mode
 * avoids moving blocks

_02_snobee_mode_block_eat_3843:
	move.b	block_moving_flag_8DBF,d0       	| [ld   a,(block_moving_flag_8DBF)]
	cmp.b	#0x02,d0                         	| [cp   $02]
	bne	0f
	jbsr	avoids_moving_block_359F          	| block is moving [call z,avoids_moving_block_359F]
0:

	jbsr	get_random_value_2D7C             	| [call	get_random_value_2D7C]
	and.b	#0x01,d0                         	| [and  $01]
	jne	l_38b4                             	|  1/2 chance [jr   nz,$38B4]

	lea	pengo_struct_8D80(pc),a3           	| [ld   iy,pengo_struct_8D80]
	move.b	(y_pos,a3),d0                   	| [ld   a,(iy+y_pos)]
	cmp.b	(y_pos,a2),d0                    	| [cp   (ix+y_pos)]
	jne	l_3866                             	| [jr   nz,$3866]
 * if same y, 1 chance out of 8 to stop following pengo
	jbsr	get_random_value_2D7C             	| [call get_random_value_2D7C]
	and.b	#0x07,d0                         	| [and  $07]
	jeq	_01_snobee_mode_roaming_3649       	| [jp   z,_01_snobee_mode_roaming_3649]
l_3866:
	move.b	(x_pos,a3),d0                   	| [ld   a,(iy+x_pos)]
	cmp.b	(x_pos,a2),d0                    	| [cp   (ix+x_pos)]
	jeq	l_3876                             	| [jr   z,$3876]
 * if not same x, 1 chance out of 8 to stop following pengo
	jbsr	get_random_value_2D7C             	| [call get_random_value_2D7C]
	and.b	#0x07,d0                         	| [and  $07]
	jeq	_01_snobee_mode_roaming_3649       	| [jp   z,_01_snobee_mode_roaming_3649]

l_3876:
	move.b	(y_pos,a3),d3                   	| [ld   d,(iy+y_pos)]
	jbsr	get_random_value_2D7C             	| [call get_random_value_2D7C]
	and.b	#0x10,d0                         	| [and  $10]
	add.b	d3,d0                            	| [add  a,d]
	move.b	d0,d3                           	| rand(16)+pengo_y [ld   d,a]
	move.b	(x_pos,a3),d4                   	| [ld   e,(iy+x_pos)]
	jbsr	get_random_value_2D7C             	| [call get_random_value_2D7C]
	and.b	#0x10,d0                         	| [and  $10]
	add.b	d4,d0                            	| [add  a,e]
	move.b	d0,d4                           	|  rand(16)+pengo_x [ld   e,a]
	clr.b	(facing_direction,a2)            	| set direction up (clear) [ld   (ix+facing_direction),$00]
	move.b	(x_pos,a2),d0                   	| [ld   a,(ix+x_pos)]
	sub.b	d4,d0                            	| [sub  e]
	jcc	l_389a                             	| [jr   nc,$389A]
	bset.b	#0,(facing_direction,a2)        	| set direction down [set  0,(ix+facing_direction)]
	neg.b	d0                               	| [neg]
l_389a:
	move.b	d0,d1                           	| [ld   b,a]
	move.b	(y_pos,a2),d0                   	| [ld   a,(ix+y_pos)]
	sub.b	d3,d0                            	| [sub  d]
	jcc	l_38a7                             	| [jr   nc,$38A7]
	bset.b	#1,(facing_direction,a2)        	| set direction left or right (depends on above) [set  1,(ix+facing_direction)]
	neg.b	d0                               	| [neg]
l_38a7:
	sub.b	d1,d0                            	| [sub  b]
	jcc	l_38b0                             	| [jr   nc,$38B0]
	bset.b	#1,(facing_direction,a2)        	| [set  1,(ix+facing_direction)]
	jra	l_38b4                             	| [jr   $38B4]
l_38b0:
	move.b	(facing_direction,a2),d7
	lsr.b	#1,d7
	move.b	d7,(facing_direction,a2)         	| [srl  (ix+facing_direction)]

l_38b4:
	bclr.b	#7,(0x1b,a2)                    	| [res  7,(ix+$1b)]
	jbsr	l_38d6                            	| [call $38D6]
	btst.b	#7,(0x1b,a2)                    	| [bit  7,(ix+$1b)]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	subq.b	#1,(0x1b,a2)                    	| [dec  (ix+$1b)]
	move.b	(0x1b,a2),d0                    	| [ld   a,(ix+$1b)]
	and.b	#0x7F,d0                         	| [and  $7F]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	move.b	#0x01,(ai_mode,a2)              	|  set A.I. mode to roaming mode [ld   (ix+ai_mode),$01]
	rts                                    	| [ret]

l_38ce:
	jbsr	get_random_value_2D7C             	| [call get_random_value_2D7C]
	and.b	#0x03,d0                         	| [and  $03]
	move.b	d0,(facing_direction,a2)        	| [ld   (ix+facing_direction),a]

l_38d6:
	move.b	(move_period,a2),d0             	| [ld   a,(ix+move_period)]
	move.b	d0,(instant_move_period,a2)     	| set snobee speed to normal speed [ld   (ix+instant_move_period),a]
	jbsr	get_div8_ix_coords_3E78           	| [call get_div8_ix_coords_3E78]
	move.b	(facing_direction,a2),d0        	| direction [ld   a,(ix+facing_direction)]
	lea	is_grid_free_jump_table_43A1(pc),a1	| [ld   de,is_grid_free_jump_table_43A1]
	jbsr	indirect_jump_2D8F                	| [call indirect_jump_2D8F]
	bne.b	0f
	rts                                    	| [ret  z]
0:
 * there is a block in front the snobee way. which one?
	cmp.b	#0x10,d0                         	| [cp   $10]
	jcs	l_38f0                             	| [jr   c,$38F0]
	cmp.b	#0x16,d0                         	| [cp   $16]
	bcc.b	0f
	rts                                    	| [ret  c]
0:
l_38f0:
	move.b	(move_period,a2),d0             	| [ld   a,(ix+move_period)]
	add.b	#0x18,d0                         	| [add  a,$18]
	move.b	d0,(instant_move_period,a2)     	| [ld   (ix+instant_move_period),a]
	jbsr	move_snobee_current_direction_4378	| [call move_snobee_current_direction_4378]
	jbsr	convert_coords_to_screen_address_296F	| [call convert_coords_to_screen_address_296F]
	move.b	#0x1C,d0                        	| [ld   a,$1C]
	cmp.b	(a0),d0                          	| [cp   (hl)]
	jeq	l_38ce                             	| [jr   z,$38CE]
	jbsr	look_for_hidden_egg_300A          	| [call look_for_hidden_egg_300A]
	jne	l_38ce                             	| [jr   c,$38CE]
	bset.b	#7,(0x1b,a2)                    	| [set  7,(ix+$1b)]
	jra	find_breaking_block_free_slot_42c6                             	| [jp   $42C6]

is_upper_grid_free_390F:
	subq.b	#1,d1                           	| [dec  b]
l_3910:
	jbsr	convert_coords_to_screen_address_296F	| [call convert_coords_to_screen_address_296F]
	move.b	(a0),d0                         	| [ld   a,(hl)]
	cmp.b	#0x20,d0                         	| [cp   $20]
	rts                                    	| [ret]

is_lower_grid_free_3917:
	addq.b	#2,d1                           	| [inc  b]
	                           	| [inc  b]
	jra	l_3910                             	| [jr   $3910]
is_left_grid_free_391B:
	subq.b	#1,d2                           	| [dec  c]
	jra	l_3910                             	| [jr   $3910]
is_right_grid_free_391E:
	addq.b	#2,d2                           	| [inc  c]
	                           	| [inc  c]
	jra	l_3910                             	| [jr   $3910]

snobee_try_to_move_up_3922:
	move.b	(y_pos,a2),d0                   	| [ld   a,(ix+y_pos)]
	cmp.b	#0x11,d0                         	| [cp   $11]
	bcc.b	0f
	rts                                    	| [ret  c]
0:
	subq.b	#1,(y_pos,a2)                   	| [dec  (ix+y_pos)]
	rts                                    	| [ret]

snobee_try_to_move_down_392C:
	move.b	(y_pos,a2),d0                   	| [ld   a,(ix+y_pos)]
	cmp.b	#0xF0,d0                         	| [cp   $F0]
	bcs.b	0f
	rts                                    	| [ret  nc]
0:
	addq.b	#1,(y_pos,a2)                   	| [inc  (ix+y_pos)]
	rts                                    	| [ret]

snobee_try_to_move_left_3936:
	move.b	(x_pos,a2),d0                   	| [ld   a,(ix+x_pos)]
	cmp.b	#0x19,d0                         	| [cp   $19]
	bcc.b	0f
	rts                                    	| [ret  c]
0:
	subq.b	#1,(x_pos,a2)                   	| [dec  (ix+x_pos)]
	rts                                    	| [ret]

snobee_try_to_move_right_3940:
	move.b	(x_pos,a2),d0                   	| [ld   a,(ix+x_pos)]
	cmp.b	#0xD8,d0                         	| [cp   $D8]
	bcs.b	0f
	rts                                    	| [ret  nc]
0:
	addq.b	#1,(x_pos,a2)                   	| [inc  (ix+x_pos)]
	rts                                    	| [ret]

animate_pengo_39A4:
	move.b	(0x08,a2),d0                    	| [ld   a,(ix+$08)]
	bne.b	0f
	rts                                    	| returns if a == 0 [ret  z]
0:
	move.b	counter_lsb_8824,d0             	| [ld   a,(counter_lsb_8824)]
	and.b	#0x1F,d0                         	| [and  $1F]
	beq.b	0f
	rts                                    	| returns if counter_lsb_8824 isn't dividable by 32? [ret  nz]
0:
 * counter 1 out of 32 pengo animation moves
	jra	l_396b                             	| [jr   $396B]

l_3957:
	move.b	(0x08,a2),d0                    	| [ld   a,(ix+$08)]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	move.b	counter_lsb_8824,d0             	| [ld   a,(counter_lsb_8824)]
	and.b	#0x1F,d0                         	| [and  $1F]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
 * counter 1 out of 32 snobees animation moves
	addq.b	#1,(alive_walk_counter,a2)      	| [inc  (ix+alive_walk_counter)]
	move.b	(alive_walk_counter,a2),d0      	| [ld   a,(ix+alive_walk_counter)]
	and.b	#0x03,d0                         	| [and  $03]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
l_396b:
	clr.b	d1                               	| [ld   b,$00]
	move.b	(char_id,a2),d0                 	| [ld   a,(ix+char_id)]
	cmp.b	#0x05,d0                         	| [cp   $05]
	jeq	l_3985                             	| [jr   z,$3985]
	move.b	#0x26,d1                        	| [ld   b,$26]
	move.b	(ai_mode,a2),d0                 	| [ld   a,(ix+ai_mode)]
	cmp.b	#0x02,d0                         	| [cp   $02]
	jeq	l_3985                             	| [jr   z,$3985]
	move.b	#0x2C,d1                        	| [ld   b,$2C]
	cmp.b	#0x09,d0                         	| [cp   $09]
	jcc	l_3985                             	| [jr   nc,$3985]
	move.b	#0x12,d1                        	| [ld   b,$12]
l_3985:
	addq.b	#1,(alive_walk_counter,a2)      	| [inc  (ix+alive_walk_counter)]
	move.b	(facing_direction,a2),d0        	| [ld   a,(ix+facing_direction)]
	cmp.b	#0x03,d0                         	| [cp   $03]
	jne	l_3990                             	| [jr   nz,$3990]
	subq.b	#1,d0                           	| [dec  a]
l_3990:
	add.b	d0,d0                            	| [add  a,a]
	btst.b	#2,(alive_walk_counter,a2)      	| [bit  2,(ix+alive_walk_counter)]
	jne	l_3998                             	| [jr   nz,$3998]
	addq.b	#1,d0                           	| [inc  a]
l_3998:
	add.b	d1,d0                            	| [add  a,b]
	asl.b	#2,d0                            	| [sla  a]
												| [sla  a]
	move.b	d0,(animation_frame,a2)         	| [ld   (ix+animation_frame),a]
	move.b	(facing_direction,a2),d0        	| [ld   a,(ix+facing_direction)]
	cmp.b	#0x03,d0                         	| [cp   $03]
	jne	display_character_sprite_39AB      	| [jr   nz,display_character_sprite_39AB]
	bset.b	#1,(animation_frame,a2)         	| [set  1,(ix+animation_frame)]
display_character_sprite_39AB:
	move.b	(char_id,a2),d0                 	| [ld   a,(ix+char_id)]

	move.l	a2,a0                        	| [push ix]+[pop  hl]
	jbsr	display_character_sprite_318A     	| [call display_character_sprite_318A]
	rts                                    	| [ret]


_04_snobee_stunned_39B5:
	jbsr	l_39d1                            	| [call $39D1]
	btst.b	#0,(0x09,a2)                    	| [bit  0,(ix+$09)]
	bne	0f
	jbsr	l_39c3                            	| [call z,$39C3]
0:
	jbsr	l_338e                            	| [call $338E]
	rts                                    	| [ret]

l_39c3:
	move.b	#0x05,(stunned_push_block_counter,a2)	| [ld   (ix+stunned_push_block_counter),$05]
	move.b	#0x0F,(0x09,a2)                 	| [ld   (ix+$09),$0F]
	move.b	#0x06,d1                        	| [ld   b,$06]
	jbsr	update_sound_18c7                 	| [call update_sound_18c7]
	rts                                    	| [ret]

l_39d1:
	move.b	counter_lsb_8824,d0             	| [ld   a,(counter_lsb_8824)]
	and.b	#0x7F,d0                         	| [and  $7F]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
 * counter 1 out of 128 xxx
	move.b	#0x60,d0                        	| [ld   a,$60]
	addq.b	#1,(alive_walk_counter,a2)      	| [inc  (ix+alive_walk_counter)]
	btst.b	#0,(alive_walk_counter,a2)      	| [bit  0,(ix+alive_walk_counter)]
	jne	l_39e4                             	| [jr   nz,$39E4]
	move.b	#0x64,d0                        	| [ld   a,$64]
l_39e4:
	btst.b	#0,(facing_direction,a2)        	| [bit  0,(ix+facing_direction)]
	jeq	l_39ec                             	| [jr   z,$39EC]
	bset.b	#1,d0                           	| [set  1,a]
l_39ec:
	move.b	d0,(animation_frame,a2)         	| [ld   (ix+animation_frame),a]
	jbsr	display_character_sprite_39AB     	| [call display_character_sprite_39AB]
	rts                                    	| [ret]

_05_snobee_blinking_stunned_39F3:
	jbsr	l_39d1                            	| [call $39D1]
	btst.b	#0,(0x09,a2)                    	| [bit  0,(ix+$09)]
	bne	0f
	jbsr	l_3a01                            	| [call z,$3A01]
0:
	jbsr	l_3a0a                            	| [call $3A0A]
	rts                                    	| [ret]

l_3a01:
	move.b	#0x08,(stunned_push_block_counter,a2)	| [ld   (ix+stunned_push_block_counter),$08]
	move.b	#0x0F,(0x09,a2)                 	| [ld   (ix+$09),$0F]
	rts                                    	| [ret]

l_3a0a:
	move.b	counter_lsb_8824,d0             	| count mask [ld   a,(counter_lsb_8824)]
	tst.b	d0                               	| [and  a]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	move.b	(stunned_push_block_counter,a2),d0	| [ld   a,(ix+stunned_push_block_counter)]
	subq.b	#1,d0                           	| [dec  a]
	jeq	l_3a2e                             	|  end of stun [jr   z,$3A2E]
	move.b	d0,(stunned_push_block_counter,a2)	| [ld   (ix+stunned_push_block_counter),a]
	move.b	#0x09,d1                        	| [ld   b,$09]
	btst.b	#0,d0                           	| [bit  0,a]
	jne	l_3a27                             	| [jr   nz,$3A27]
	jbsr	get_level_number_288F             	| [call get_level_number_288F]
	subq.b	#1,d0                           	| [dec  a]
	and.b	#0x07,d0                         	| [and  $07]
	addq.b	#0x01,d0                        	| [add  a,$01]
	move.b	d0,d1                           	| [ld   b,a]
l_3a27:
	move.b	d1,(char_color,a2)              	| [ld   (ix+char_color),b]
	jbsr	display_character_sprite_39AB     	| [call display_character_sprite_39AB]
	rts                                    	| [ret]
 * no longer stunned
l_3a2e:
	move.b	(x_pos,a2),d0                   	| [ld   a,(ix+x_pos)]
	move.b	#0x03,d1                        	| [ld   b,$03]
	cmp.b	#0x18,d0                         	| [cp   $18]
	jeq	l_3a52                             	| [jr   z,$3A52]
	move.b	#0x02,d1                        	| [ld   b,$02]
	cmp.b	#0xD8,d0                         	| [cp   $D8]
	jeq	l_3a52                             	| [jr   z,$3A52]
	move.b	(y_pos,a2),d0                   	| [ld   a,(ix+y_pos)]
	move.b	#0x01,d1                        	| [ld   b,$01]
	cmp.b	#0x10,d0                         	| [cp   $10]
	jeq	l_3a52                             	| [jr   z,$3A52]
	clr.b	d1                               	| [ld   b,$00]
	cmp.b	#0xF0,d0                         	| [cp   $F0]
	jeq	l_3a52                             	| [jr   z,$3A52]
	jbsr	get_random_value_2D7C             	| [call get_random_value_2D7C]
	and.b	#0x03,d0                         	| [and  $03]
	move.b	d0,d1                           	| [ld   b,a]
l_3a52:
	move.b	d1,(facing_direction,a2)        	| [ld   (ix+facing_direction),b]
	jbsr	get_level_number_288F             	| [call get_level_number_288F]
	subq.b	#1,d0                           	| [dec  a]
	and.b	#0x07,d0                         	| [and  $07]
	addq.b	#0x01,d0                        	| [add  a,$01]
	move.b	d0,(char_color,a2)              	| [ld   (ix+char_color),a]
	jbsr	display_character_sprite_39AB     	| [call display_character_sprite_39AB]
	move.b	#0x02,(ai_mode,a2)              	| wake up from "stunned" -> A.I. mode set to breaking block mode [ld   (ix+ai_mode),$02]
	move.b	#0x02,(char_state,a2)           	| set state to "alive" [ld   (ix+char_state),$02]
	rts                                    	| [ret]

_06_stunned_picked_3A6C:
	btst.b	#0,(0x09,a2)                    	| [bit  0,(ix+$09)]
	bne	0f
	jbsr	l_3a77                            	| [call z,$3A77]
0:
	jbsr	l_3a92                            	| [call $3A92]
	rts                                    	| [ret]

l_3a77:
	move.b	#0x08,(stunned_push_block_counter,a2)	| [ld   (ix+stunned_push_block_counter),$08]
	move.b	#0x0F,(0x09,a2)                 	| [ld   (ix+$09),$0F]
	move.b	#0x80,(animation_frame,a2)      	| [ld   (ix+animation_frame),$80]
	jbsr	display_character_sprite_39AB     	| [call display_character_sprite_39AB]
	lea	0x000A(pc),a1                      	| [ld   de,$000A]
	jbsr	add_to_current_player_score_28AF                            	| [call $28AF]
	move.b	#0x02,d1                        	| [ld   b,$02]
	jbsr	update_sound_18c7                 	| [call update_sound_18c7]
	rts                                    	| [ret]

l_3a92:
	move.b	counter_lsb_8824,d0             	|  count mask [ld   a,(counter_lsb_8824)]
	tst.b	d0                               	| [and  a]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	move.b	(stunned_push_block_counter,a2),d0	| [ld   a,(ix+stunned_push_block_counter)]
	subq.b	#1,d0                           	| [dec  a]
	jeq	l_3aa1                             	| [jr   z,$3AA1]
	move.b	d0,(stunned_push_block_counter,a2)	| [ld   (ix+stunned_push_block_counter),a]
	rts                                    	| [ret]
l_3aa1:
	clr.b	(0x09,a2)                        	| [ld   (ix+$09),$00]
	addq.b	#1,(char_state,a2)              	| [inc  (ix+char_state)]
	lea	remaining_alive_snobees_8D98(pc),a0	| [ld   hl,remaining_alive_snobees_8D98]
	subq.b	#1,(a0)                         	| one snobee less [dec  (hl)]
	rts                                    	| [ret]


_03_snobee_aligns_for_stunned_3AAD:
	addq.b	#1,(current_period_counter,a2)  	|  slow down [inc  (ix+current_period_counter)]
	move.b	(current_period_counter,a2),d0  	| [ld   a,(ix+current_period_counter)]
	cmp.b	(instant_move_period,a2),d0      	| [cp   (ix+instant_move_period)]
	bcc.b	0f
	rts                                    	| [ret  c]
0:
	clr.b	(current_period_counter,a2)      	| [ld   (ix+current_period_counter),$00]
	move.b	(x_pos,a2),d0                   	| [ld   a,(ix+x_pos)]
	and.b	#0x0F,d0                         	| [and  $0F]
	cmp.b	#0x08,d0                         	| [cp   $08]
	jne	l_3ad3                             	| [jr   nz,$3AD3]
	move.b	(y_pos,a2),d0                   	| [ld   a,(ix+y_pos)]
	and.b	#0x0F,d0                         	| [and  $0F]
	jne	l_3ad3                             	| [jr   nz,$3AD3]
	clr.b	(0x09,a2)                        	| [ld   (ix+$09),$00]
	addq.b	#1,(char_state,a2)              	| next state (stunned) [inc  (ix+char_state)]
	rts                                    	| [ret]
l_3ad3:
	jbsr	move_snobee_forward_33B9          	| [call move_snobee_forward_33B9]
	rts                                    	| [ret]

l_3ad7:
	move.b		moving_block_struct_8DA0,d2 	| [ld   bc,(moving_block_struct_8DA0)]
	move.b		moving_block_struct_8DA0+1,d1 	| [ld   bc,(moving_block_struct_8DA0)]
	move.b	moving_block_struct_8DA0+4,d0   	| [ld   a,(moving_block_struct_8DA0+4)]
	lea	jump_table_3B2A(pc),a1             	| [ld   de,jump_table_3B2A]
	jbsr	indirect_jump_2D8F                	| [call indirect_jump_2D8F]
	move.b	d2,(x_pos,a2)                   	| [ld   (ix+x_pos),c]
	move.b	d1,(y_pos,a2)                   	| [ld   (ix+y_pos),b]
	move.b	moving_block_struct_8DA0+4,d0   	| [ld   a,(moving_block_struct_8DA0+4)]
	move.b	d0,(facing_direction,a2)        	| [ld   (ix+facing_direction),a]
	and.b	#0x02,d0                         	| [and  $02]
	move.b	d0,d1                           	| [ld   b,a]
	move.b	moving_block_struct_8DA0+4,d0   	| [ld   a,(moving_block_struct_8DA0+4)]
	not.b	d0                               	| [cpl]
	and.b	#0x01,d0                         	| [and  $01]
	or.b	d1,d0                             	| [or   b]
	cmp.b	#0x03,d0                         	| [cp   $03]
	jne	l_3aff                             	| [jr   nz,$3AFF]
	subq.b	#1,d0                           	| [dec  a]
l_3aff:
	add.b	d0,d0                            	| [add  a,a]
	add.b	#0x12,d0                         	| [add  a,$12]
	rol.b	#1,d0                            	| [rlca]
	rol.b	#1,d0                            	| [rlca]
	move.b	d0,(animation_frame,a2)         	| [ld   (ix+animation_frame),a]
	move.b	(facing_direction,a2),d0        	| [ld   a,(ix+facing_direction)]
	cmp.b	#0x02,d0                         	| [cp   $02]
	jne	l_3b12                             	| [jr   nz,$3B12]
	bset.b	#1,(animation_frame,a2)         	| [set  1,(ix+animation_frame)]
l_3b12:
	move.b	#0x03,(instant_move_period,a2)  	| [ld   (ix+instant_move_period),$03]
	move.b	moving_block_struct_8DA0+7,d0   	| [ld   a,(moving_block_struct_8DA0+7)]
	move.b	d0,(current_period_counter,a2)  	| [ld   (ix+current_period_counter),a]
	jbsr	display_snobee_sprite_33CE        	| [call display_snobee_sprite_33CE]
	jbsr	display_character_sprite_39AB     	| [call display_character_sprite_39AB]
	clr.b	(0x09,a2)                        	| [ld   (ix+$09),$00]
	addq.b	#1,(char_state,a2)              	| [inc  (ix+char_state)]
	rts                                    	| [ret]
* jump table
jump_table_3B2A:
	.long	ice_block_hits_snobee_up_3B32
	.long	ice_block_hits_snobee_down_3B37
	.long	ice_block_hits_snobee_left_3B3C
	.long	ice_block_hits_snobee_right_3B41

ice_block_hits_snobee_up_3B32:
	move.b	d1,d0                           	| [ld   a,b]
	sub.b	#0x10,d0                         	| [sub  $10]
	move.b	d0,d1                           	| [ld   b,a]
	rts                                    	| [ret]

ice_block_hits_snobee_down_3B37:
	move.b	d1,d0                           	| [ld   a,b]
	add.b	#0x10,d0                         	| [add  a,$10]
	move.b	d0,d1                           	| [ld   b,a]
	rts                                    	| [ret]

ice_block_hits_snobee_left_3B3C:
	move.b	d2,d0                           	| [ld   a,c]
	sub.b	#0x10,d0                         	| [sub  $10]
	move.b	d0,d2                           	| [ld   c,a]
	rts                                    	| [ret]

ice_block_hits_snobee_right_3B41:
	move.b	d2,d0                           	| [ld   a,c]
	add.b	#0x10,d0                         	| [add  a,$10]
	move.b	d0,d2                           	| [ld   c,a]
	rts                                    	| [ret]

l_3b46:
	move.b	(0x08,a2),d0                    	| [ld   a,(ix+$08)]
	tst.b	d0                               	| [and  a]
	jeq	l_3b5e                             	| [jr   z,$3B5E]
	addq.b	#1,(current_period_counter,a2)  	| [inc  (ix+current_period_counter)]
	move.b	(current_period_counter,a2),d0  	| [ld   a,(ix+current_period_counter)]
	cmp.b	(instant_move_period,a2),d0      	| [cp   (ix+instant_move_period)]
	bcc.b	0f
	rts                                    	| [ret  c]
0:
	clr.b	(current_period_counter,a2)      	| [ld   (ix+current_period_counter),$00]
	jbsr	move_snobee_forward_33B9          	| [call move_snobee_forward_33B9]
	rts                                    	| [ret]

l_3b5e:
	move.b	(facing_direction,a2),d0        	| [ld   a,(ix+facing_direction)]
	cmp.b	#0x03,d0                         	| [cp   $03]
	jne	l_3b66                             	| [jr   nz,$3B66]
	subq.b	#1,d0                           	| [dec  a]
l_3b66:
	add.b	d0,d0                            	| [add  a,a]
	add.b	#0x0C,d0                         	| [add  a,$0C]
	rol.b	#1,d0                            	| [rlca]
	rol.b	#1,d0                            	| [rlca]
	move.b	d0,(animation_frame,a2)         	| [ld   (ix+animation_frame),a]
	move.b	(facing_direction,a2),d0        	| [ld   a,(ix+facing_direction)]
	cmp.b	#0x03,d0                         	| [cp   $03]
	jne	l_3b79                             	| [jr   nz,$3B79]
	bset.b	#1,(animation_frame,a2)         	| [set  1,(ix+animation_frame)]
l_3b79:
	jbsr	display_character_sprite_39AB     	| [call display_character_sprite_39AB]
	rts                                    	| [ret]
l_3b7d:
	btst.b	#0,(0x09,a2)                    	| [bit  0,(ix+$09)]
	bne	0f
	jbsr	l_3b88                            	| [call z,$3B88]
0:
	jbsr	l_338e                            	| [call $338E]
	rts                                    	| [ret]
l_3b88:
	move.b	#0x01,(stunned_push_block_counter,a2)	| [ld   (ix+stunned_push_block_counter),$01]
	move.b	#0x0F,(0x09,a2)                 	| [ld   (ix+$09),$0F]
	move.b	(facing_direction,a2),d0        	| [ld   a,(ix+facing_direction)]
	cmp.b	#0x03,d0                         	| [cp   $03]
	jne	l_3b98                             	| [jr   nz,$3B98]
	subq.b	#1,d0                           	| [dec  a]
l_3b98:
	add.b	d0,d0                            	| [add  a,a]
	addq.b	#1,d0                           	| [inc  a]
	add.b	#0x0C,d0                         	| [add  a,$0C]
	rol.b	#1,d0                            	| [rlca]
	rol.b	#1,d0                            	| [rlca]
	move.b	d0,(animation_frame,a2)         	| [ld   (ix+animation_frame),a]
	move.b	(facing_direction,a2),d0        	| [ld   a,(ix+facing_direction)]
	cmp.b	#0x03,d0                         	| [cp   $03]
	jne	l_3bac                             	| [jr   nz,$3BAC]
	bset.b	#1,(animation_frame,a2)         	| [set  1,(ix+animation_frame)]
l_3bac:
	jbsr	display_character_sprite_39AB     	| [call display_character_sprite_39AB]
	move.b	#0xFF,(0x08,a2)                 	| [ld   (ix+$08),$FF]
	rts                                    	| [ret]
l_3bb4:
	btst.b	#0,(0x09,a2)                    	| [bit  0,(ix+$09)]
	bne	0f
	jbsr	l_3bbf                            	| [call z,$3BBF]
0:
	jbsr	l_3c22                            	| [call $3C22]
	rts                                    	| [ret]
l_3bbf:
	move.b	#0x04,(stunned_push_block_counter,a2)	| [ld   (ix+stunned_push_block_counter),$04]
	move.b	#0x0F,(0x09,a2)                 	| [ld   (ix+$09),$0F]
	move.b	(0x1a,a2),d0                    	| [ld   a,(ix+$1a)]
	tst.b	d0                               	| [and  a]
	jne	l_3bd9                             	| [jr   nz,$3BD9]
	clr.b	(x_pos,a2)                       	| [ld   (ix+x_pos),$00]
	clr.b	(y_pos,a2)                       	| [ld   (ix+y_pos),$00]
	jbsr	display_snobee_sprite_33CE        	| [call display_snobee_sprite_33CE]
	rts                                    	| [ret]
l_3bd9:
	jbsr	l_3bee                            	| [call $3BEE]
	jbsr	l_3c09                            	| [call $3C09]
	addq.b	#1,(x_pos,a2)                   	| [inc  (ix+x_pos)]
	addq.b	#1,(y_pos,a2)                   	| [inc  (ix+y_pos)]
	jbsr	get_div8_ix_coords_3E78           	| [call get_div8_ix_coords_3E78]
	move.b	#0x13,d0                        	| [ld   a,$13]
	jbsr	set_2x2_tile_color_4BC4           	| [call set_2x2_tile_color_4BC4]
	rts                                    	| [ret]
l_3bee:
	move.b	(0x1a,a2),d0                    	| [ld   a,(ix+$1a)]
	subq.b	#1,d0                           	| [dec  a]
	add.b	d0,d0                            	| [add  a,a]
	clr.w	d3                               	| [ld   d,$00]
	move.b	d0,d3                           	| [ld   e,a]
	lea	table_3C01(pc),a0                  	| [ld   hl,table_3C01]
	add.w	d3,a0							| [add  hl,de]
	move.b	(a0),d4                         	| [ld   e,(hl)]
	addq.w	#1,a0                           	| [inc  hl]
	move.b	(a0),d3                         	| [ld   d,(hl)]
	jbsr	add_to_current_player_score_28AF                            	| [call $28AF]
	rts                                    	| [ret]

table_3C01:
	.byte	0x28,0x00,0xA0,0x00,0x40,0x01,0x80,0x02

l_3c09:
	move.b	(0x1a,a2),d0                    	| [ld   a,(ix+$1a)]
	and.b	#0x07,d0                         	| [and  $07]
	subq.b	#1,d0                           	| [dec  a]
	clr.w	d3                               	| [ld   d,$00]
	move.b	d0,d3                           	| [ld   e,a]
	lea	table_3C1E(pc),a0                  	| [ld   hl,table_3C1E]
	add.w	d3,a0							| [add  hl,de]
	move.b	(a0),d0                         	| [ld   a,(hl)]
	move.b	d0,(animation_frame,a2)         	| [ld   (ix+animation_frame),a]
	jbsr	display_character_sprite_39AB     	| [call display_character_sprite_39AB]
	rts                                    	| [ret]

table_3C1E:
	.byte	0x84,0x88,0x8C,0x90


l_3c22:
	move.b	counter_lsb_8824,d0             	|  count mask [ld   a,(counter_lsb_8824)]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	move.b	(stunned_push_block_counter,a2),d0	| [ld   a,(ix+stunned_push_block_counter)]
	subq.b	#1,d0                           	| [dec  a]
	jeq	l_3c31                             	| [jr   z,$3C31]
	move.b	d0,(stunned_push_block_counter,a2)	| [ld   (ix+stunned_push_block_counter),a]
	rts                                    	| [ret]
l_3c31:
	clr.b	(0x09,a2)                        	| [ld   (ix+$09),$00]
	addq.b	#1,(char_state,a2)              	| [inc  (ix+char_state)]
	jbsr	get_div8_ix_coords_3E78           	| [call get_div8_ix_coords_3E78]
	jbsr	set_2x2_tile_color_09_4BD8        	| [call set_2x2_tile_color_09_4BD8]
	lea	remaining_alive_snobees_8D98(pc),a0	| [ld   hl,remaining_alive_snobees_8D98]
	subq.b	#1,(a0)                         	| [dec  (hl)]
	lea	timer_16_bit_8DDE+1(pc),a0         	| [ld   hl,timer_16_bit_8DDE+1]
	move.b	#0x80,(a0)                      	| [ld   (hl),$80]
	subq.b	#1,a0                           	| [dec  hl]
	move.b	#0x08,(a0)                      	| [ld   (hl),$08]
	rts                                    	| [ret]
l_3c4b:
	lea	current_nb_eggs_to_hatch_8DDD(pc),a0	| [ld   hl,current_nb_eggs_to_hatch_8DDD]
	move.b	(a0),d0                         	| [ld   a,(hl)]
	tst.b	d0                               	| [and  a]
	jne	l_3c6c                             	| [jr   nz,$3C6C]
	clr.b	(char_state,a2)                  	| [ld   (ix+char_state),$00]
	jbsr	get_level_number_288F             	| [call get_level_number_288F]
	subq.b	#1,d0                           	| [dec  a]
	ror.b	#2,d0                            	| [rrca]
												| [rrca]
	and.b	#0x03,d0                         	| [and  $03]
	addq.b	#0x04,d0                        	| [add  a,$04]
	move.b	d0,d1                           	| [ld   b,a]
	move.b	remaining_alive_snobees_8D98,d0 	| [ld   a,(remaining_alive_snobees_8D98)]
	cmp.b	d1,d0                            	| [cp   b]
	bcs.b	0f
	rts                                    	| [ret  nc]
0:
	move.b	#0x04,d0                        	| [ld   a,$04]
	move.b	d0,game_phase_8CBB              	| [ld   (game_phase_8CBB),a]
	rts                                    	| [ret]

l_3c6c:
	subq.b	#1,(a0)                         	| [dec  (hl)]
	lea	egg_location_table_8DC2(pc),a0     	| [ld   hl,egg_location_table_8DC2]
l_3c70:
	move.b	(a0)+,d2                         	| [ld   c,(hl)]
	                           	| [inc  hl]
	move.b	(a0)+,d1                         	| [ld   b,(hl)]
	                           	| [inc  hl]
	move.b	d1,d0                           	| [ld   a,b]
	add.b	d2,d0                            	| [add  a,c]
	jeq	l_3c70                             	| [jr   z,$3C70]
	movem.w	d1/d2,-(sp)                    	| [push bc]
	jbsr	find_breaking_block_free_slot_42c6                            	| [call $42C6]
	movem.w	(sp)+,d1/d2                    	| [pop  bc]
	jbsr	l_3cde                            	| [call $3CDE]
	move.b	d2,(x_pos,a2)                   	| [ld   (ix+x_pos),c]
	move.b	d1,(y_pos,a2)                   	| [ld   (ix+y_pos),b]
	jbsr	display_snobee_sprite_33CE        	| [call display_snobee_sprite_33CE]
	move.b	#0xDC,(animation_frame,a2)      	| [ld   (ix+animation_frame),$DC]
	jbsr	get_level_number_288F             	| [call get_level_number_288F]
	subq.b	#1,d0                           	| [dec  a]
	and.b	#0x07,d0                         	| [and  $07]
	addq.b	#1,d0                           	| [inc  a]
	move.b	d0,(char_color,a2)              	|  sets color [ld   (ix+char_color),a]
	jbsr	display_character_sprite_39AB     	| [call display_character_sprite_39AB]
	move.b	(move_period,a2),d0             	| [ld   a,(ix+move_period)]
	move.b	d0,(instant_move_period,a2)     	| [ld   (ix+instant_move_period),a]
	clr.b	(0x09,a2)                        	| [ld   (ix+$09),$00]
	move.b	#0x06,(intermission_dance_push_anim_counter,a2)	| [ld   (ix+intermission_dance_push_anim_counter),$06]
	jbsr	get_random_value_2D7C             	| [call get_random_value_2D7C]
	and.b	#0x07,d0                         	| [and  $07]
	addq.b	#1,d0                           	| [inc  a]
 * called when egg hatch
	move.b	d0,(ai_mode,a2)                 	| sets A.I. mode at random from 1 to 8 [ld   (ix+ai_mode),a]
	move.b	#0x14,(0x1b,a2)                 	| [ld   (ix+$1b),$14]
	addq.b	#1,(char_state,a2)              	| [inc  (ix+char_state)]
	move.b	#0x03,d1                        	| [ld   b,$03]
	jbsr	update_sound_18c7                            	| [call $18C7]
	lea	snobee_1_struct_8D00+0x1E(pc),a0   	| A.I. mode [ld   hl,snobee_1_struct_8D00+$1E]
												| [ld   de,$0020]
	move.b	#0x04,d1                        	| [ld   b,$04]
	move.b	#0x02,d0                        	| [ld   a,$02]
l_3cc7:
	cmp.b	(a0),d0                          	| [cp   (hl)]
	bne.b	0f
	rts                                    	| [ret  z]
0:
 * no snobee is in "block breaking mode"
	add.w	#0x20,a0							| [add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_3cc7                             	| [djnz $3CC7]
	lea	snobee_1_struct_8D00+0x1F(pc),a0   	| state [ld   hl,snobee_1_struct_8D00+$1F]
	move.b	#0x04,d1                        	| [ld   b,$04]
	move.b	#0x02,d0                        	| [ld   a,$02]
l_3cd3:
	cmp.b	(a0),d0                          	| [cp   (hl)]
	jeq	l_3cda                             	| [jr   z,$3CDA]
	add.w	#0x20,a0							| [add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_3cd3                             	| [djnz $3CD3]
	rts                                    	| [ret]
l_3cda:
										| [dec  hl]
 * change first alive snobee A.I. mode to "block breaking mode"
 * when a new egg has hatched
	move.b	#0x02,-(a0)                      	|  changes A.I. mode to block breaking mode [ld   (hl),$02]
	rts                                    	| [ret]
l_3cde:
	move.b	d1,d0                           	| [ld   a,b]
	rol.b	#3,d0                            	| [rlca]
												| [rlca]
												| [rlca]
	move.b	d0,d1                           	| [ld   b,a]
	move.b	d2,d0                           	| [ld   a,c]
	addq.b	#0x02,d0                        	| [add  a,$02]
	rol.b	#3,d0                            	| [rlca]
												| [rlca]
												| [rlca]
	move.b	d0,d2                           	| [ld   c,a]
	rts                                    	| [ret]
l_3ceb:
	btst.b	#0,(0x09,a2)                    	| [bit  0,(ix+$09)]
	bne	0f
	jbsr	l_3cf6                            	| [call z,$3CF6]
0:
	jbsr	l_3cff                            	| [call $3CFF]
	rts                                    	| [ret]
l_3cf6:
	move.b	#0x04,(stunned_push_block_counter,a2)	| [ld   (ix+stunned_push_block_counter),$04]
	move.b	#0x0F,(0x09,a2)                 	| [ld   (ix+$09),$0F]
	rts                                    	| [ret]
l_3cff:
	move.b	counter_lsb_8824,d0             	| [ld   a,(counter_lsb_8824)]
	and.b	#0x3F,d0                         	| [and  $3F]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
 * counter 1 out of 64 xxx
	move.b	(stunned_push_block_counter,a2),d0	| [ld   a,(ix+stunned_push_block_counter)]
	subq.b	#1,d0                           	| [dec  a]
	jeq	l_3d0f                             	| [jr   z,$3D0F]
	move.b	d0,(stunned_push_block_counter,a2)	| [ld   (ix+stunned_push_block_counter),a]
	rts                                    	| [ret]
l_3d0f:
	move.b	(intermission_dance_push_anim_counter,a2),d0	| [ld   a,(ix+intermission_dance_push_anim_counter)]
	subq.b	#1,d0                           	| [dec  a]
	jeq	l_3d28                             	| [jr   z,$3D28]
	move.b	d0,(intermission_dance_push_anim_counter,a2)	| [ld   (ix+intermission_dance_push_anim_counter),a]
	clr.b	(0x09,a2)                        	| [ld   (ix+$09),$00]
	move.b	(animation_frame,a2),d0         	| [ld   a,(ix+animation_frame)]
	subq.b	#0x04,d0                        	| [sub  $04]
	move.b	d0,(animation_frame,a2)         	| [ld   (ix+animation_frame),a]
	jbsr	display_character_sprite_39AB     	| [call display_character_sprite_39AB]
	rts                                    	| [ret]
l_3d28:
	addq.b	#1,(char_state,a2)              	| [inc  (ix+char_state)]
	rts                                    	| [ret]
l_3d2c:
	btst.b	#0,(0x09,a2)                    	| [bit  0,(ix+$09)]
	bne	0f
	jbsr	l_3cf6                            	| [call z,$3CF6]
0:
	jbsr	l_3d37                            	| [call $3D37]
	rts                                    	| [ret]
l_3d37:
	move.b	counter_lsb_8824,d0             	| [ld   a,(counter_lsb_8824)]
	and.b	#0x3F,d0                         	| [and  $3F]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
 * counter 1 out of 64 xxx
	move.b	(stunned_push_block_counter,a2),d0	| [ld   a,(ix+stunned_push_block_counter)]
	subq.b	#1,d0                           	| [dec  a]
	jeq	l_3d47                             	| [jr   z,$3D47]
	move.b	d0,(stunned_push_block_counter,a2)	| [ld   (ix+stunned_push_block_counter),a]
	rts                                    	| [ret]
l_3d47:
	move.b	(intermission_dance_push_anim_counter,a2),d0	| [ld   a,(ix+intermission_dance_push_anim_counter)]
	subq.b	#1,d0                           	| [dec  a]
	jeq	l_3d60                             	| [jr   z,$3D60]
	move.b	d0,(intermission_dance_push_anim_counter,a2)	| [ld   (ix+intermission_dance_push_anim_counter),a]
	clr.b	(0x09,a2)                        	| [ld   (ix+$09),$00]
	move.b	(animation_frame,a2),d0         	| [ld   a,(ix+animation_frame)]
	addq.b	#0x04,d0                        	| [add  a,$04]
	move.b	d0,(animation_frame,a2)         	| [ld   (ix+animation_frame),a]
	jbsr	display_character_sprite_39AB     	| [call display_character_sprite_39AB]
	rts                                    	| [ret]
l_3d60:
	addq.b	#1,(char_state,a2)              	| [inc  (ix+char_state)]
	lea	remaining_alive_snobees_8D98(pc),a0	| [ld   hl,remaining_alive_snobees_8D98]
	subq.b	#1,(a0)                         	| [dec  (hl)]
	clr.b	(x_pos,a2)                       	| [ld   (ix+x_pos),$00]
	clr.b	(y_pos,a2)                       	| [ld   (ix+y_pos),$00]
	jbsr	display_snobee_sprite_33CE        	| [call display_snobee_sprite_33CE]
	rts                                    	| [ret]


pengo_moves_3D73:
	lea	pengo_struct_8D80(pc),a2           	| [ld   ix,pengo_struct_8D80]
	move.b	(char_state,a2),d0              	| [ld   a,(ix+char_state)]
	lea	table_3D80(pc),a1                  	| [ld   de,table_3D80]
	jra	indirect_jump_2D8F                 	| [jp   indirect_jump_2D8F]

table_3D80:
	.long	do_nothing_3358
	.long	pengo_not_moving_3D90
	.long	pengo_nominal_move_3DBF
	.long	pengo_pushes_block_3FE9
	.long	pengo_breaks_block_4053
	.long	pengo_shakes_wall_409A
	.long	pengo_dies_3FB3
	.long	reset_state_to_default_3368

pengo_not_moving_3D90:
	jbsr	animate_pengo_39A4                	| [call animate_pengo_39A4]
	btst.b	#0,(0x09,a2)                    	| [bit  0,(ix+$09)]
	bne	0f
	jbsr	l_3d9e                            	| [call z,$3D9E]
0:
	jbsr	l_3da7                            	| [call $3DA7]
	rts                                    	| [ret]
l_3d9e:
	move.b	#0x02,(stunned_push_block_counter,a2)	| [ld   (ix+stunned_push_block_counter),$02]
	move.b	#0x0F,(0x09,a2)                 	| [ld   (ix+$09),$0F]
	rts                                    	| [ret]
l_3da7:
	move.b	counter_lsb_8824,d0             	|  count mask [ld   a,(counter_lsb_8824)]
	tst.b	d0                               	| [and  a]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	move.b	(stunned_push_block_counter,a2),d0	| [ld   a,(ix+stunned_push_block_counter)]
	subq.b	#1,d0                           	| [dec  a]
	jeq	l_3db6                             	| [jr   z,$3DB6]
	move.b	d0,(stunned_push_block_counter,a2)	| [ld   (ix+stunned_push_block_counter),a]
	rts                                    	| [ret]
l_3db6:
	clr.b	(0x09,a2)                        	| [ld   (ix+$09),$00]
	move.b	#0x02,(char_state,a2)           	| [ld   (ix+char_state),$02]
	rts                                    	| [ret]

pengo_nominal_move_3DBF:
	lea	pengo_struct_8D80(pc),a2           	| [ld   ix,pengo_struct_8D80]
	jbsr	animate_pengo_39A4                	| [call animate_pengo_39A4]
	addq.b	#1,(current_period_counter,a2)  	| [inc  (ix+current_period_counter)]
	move.b	(current_period_counter,a2),d0  	| [ld   a,(ix+current_period_counter)]
	cmp.b	(instant_move_period,a2),d0      	| [cp   (ix+instant_move_period)]
	bcc.b	0f
	rts                                    	| [ret  c]
0:
 * can move
	clr.b	(current_period_counter,a2)      	| [ld   (ix+current_period_counter),$00]
	jbsr	l_3e06            	
move_character_according_to_direction_3DD7:
	pea	l_3de4(pc)                      	| [ld   hl,$3DE4]
											| [push hl]
	move.b	(facing_direction,a2),d0        	| [ld   a,(ix+facing_direction)]
	lea	jump_table_3DEE(pc),a1             	| [ld   de,jump_table_3DEE]
	jra	indirect_jump_2D8F                 	| [jp   indirect_jump_2D8F]

l_3de4:
	move.b	(char_id,a2),d0                 	| [ld   a,(ix+char_id)]
	move.l	a2,a0                        	| [push ix]
											| [pop  hl]
	jbsr	display_sprite_3154               	| [call display_sprite_3154]
	rts                                    	| [ret]

jump_table_3DEE:
	.long	pengo_goes_up_3DF6
	.long	pengo_goes_down_3DFA
	.long	pengo_goes_left_3DFE
	.long	pengo_goes_right_3E02

 * movement table
 * pengo go up
pengo_goes_up_3DF6:
	subq.b	#1,(y_pos,a2)                   	| [dec  (ix+y_pos)]
	rts                                    	| [ret]
* pengo goes down
pengo_goes_down_3DFA:
	addq.b	#1,(y_pos,a2)                   	| [inc  (ix+y_pos)]
	rts                                    	| [ret]
* pengo goes left
pengo_goes_left_3DFE:
	subq.b	#1,(x_pos,a2)                   	| [dec  (ix+x_pos)]
	rts                                    	| [ret]
 * pengo goes right
pengo_goes_right_3E02:
	addq.b	#1,(x_pos,a2)                   	| [inc  (ix+x_pos)]
	rts                                    	| [ret]

l_3e06:
	move.b	(x_pos,a2),d0                   	| [ld   a,(ix+x_pos)]
	and.b	#0x0F,d0                         	| [and  $0F]
	cmp.b	#0x08,d0                         	| [cp   $08]
	jne	l_3e16                             	| [jr   nz,$3E16]
	move.b	(y_pos,a2),d0                   	| [ld   a,(ix+y_pos)]
	and.b	#0x0F,d0                         	| [and  $0F]
	jeq	l_3e1a                             	| [jr   z,$3E1A]
l_3e16:
	jbsr	l_3ea6                            	| [call $3EA6]
	rts                                    	| [ret]
l_3e1a:
	jbsr	l_3ef4                            	| [call $3EF4]
	jbsr	l_3f80                            	| [call $3F80]
	btst.b	#0,(0x08,a2)                    	| [bit  0,(ix+$08)]
	jeq	l_3e5c                             	| [jp   z,$3E5C]
	jbsr	get_div8_ix_coords_3E78           	| [call get_div8_ix_coords_3E78]
	move.b	(facing_direction,a2),d0        	| [ld   a,(ix+facing_direction)]
	lea	table_3E36(pc),a1                  	| [ld   de,table_3E36]
	jbsr	indirect_jump_2D8F                	| [call indirect_jump_2D8F]
l_3E33: 
	.byte	0x40,0xE1,0x41,0x00		| unused?

table_3E36:
	.long	pengo_moves_up_3E3E
	.long	pengo_moves_down_3E5E
	.long	pengo_moves_left_3E67
	.long	pengo_moves_right_3E6F

pengo_moves_up_3E3E:
	subq.b	#1,d1                           	| [dec  b]
	jbsr	pengo_moves_xxx_3E44              	| [call pengo_moves_xxx_3E44]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	addq.b	#1,d2                           	| [inc  c]
pengo_moves_xxx_3E44:
	jbsr	convert_coords_to_screen_address_296F	| [call convert_coords_to_screen_address_296F]
	move.b	(a0),d0                         	| [ld   a,(hl)]
	cmp.b	#0x20,d0                         	| [cp   $20]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	cmp.b	#0x80,d0                         	| [cp   $80]
	bcc.b	0f
	rts                                    	| [ret  c]
0:
	cmp.b	#0x90,d0                         	| [cp   $90]
	jcs	l_3e5a                             	| [jr   c,$3E5A]
	cmp.b	#0x98,d0                         	| [cp   $98]
	bcc.b	0f
	rts                                    	| [ret  c]
0:
	cmp.b	#0x9C,d0                         	| [cp   $9C]
	jcs	l_3e5a                             	| [jr   c,$3E5A]
	rts                                    	| [ret]
l_3e5a:
	cmp.b	d0,d0                            	| [cp   a]
	rts                                    	| [ret]
l_3e5c:
	move.l	(sp)+,a0                        	| [pop  hl]
	rts                                    	| [ret]

pengo_moves_down_3E5E:
	addq.b	#2,d1                           	| [inc  b]
	                           	| [inc  b]
	jbsr	pengo_moves_xxx_3E44              	| [call pengo_moves_xxx_3E44]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	addq.b	#1,d2                           	| [inc  c]
	jra	pengo_moves_xxx_3E44               	| [jr   pengo_moves_xxx_3E44]

pengo_moves_left_3E67:
	subq.b	#1,d2                           	| [dec  c]
	jbsr	pengo_moves_xxx_3E44              	| [call pengo_moves_xxx_3E44]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	addq.b	#1,d1                           	| [inc  b]
	jra	pengo_moves_xxx_3E44               	| [jr   pengo_moves_xxx_3E44]

pengo_moves_right_3E6F:
	addq.b	#2,d2                           	| [inc  c]
										| [inc  c]
	jbsr	pengo_moves_xxx_3E44              	| [call pengo_moves_xxx_3E44]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	addq.b	#1,d1                           	| [inc  b]
	jra	pengo_moves_xxx_3E44               	| [jr   pengo_moves_xxx_3E44]

get_div8_ix_coords_3E78:
	move.b	(x_pos,a2),d0                   	| [ld   a,(ix+x_pos)]
	lsr.b	#3,d0                            	| [srl  a]
											| [srl  a]
											| [srl  a]
	subq.b	#0x02,d0                        	| [sub  $02]
	move.b	d0,d2                           	| [ld   c,a]
	move.b	(y_pos,a2),d0                   	| [ld   a,(ix+y_pos)]
	lsr.b	#3,d0                            	| [srl  a]
												| [srl  a]
												| [srl  a]
	move.b	d0,d1                           	| [ld   b,a]
	rts                                    	| [ret]

get_div8_iy_coords_3E8F:
	move.b	(0x00,a3),d0                    	| [ld   a,(iy+$00)]
	lsr.b	#3,d0                            	| [srl  a]
												| [srl  a]
												| [srl  a]
	subq.b	#0x02,d0                        	| [sub  $02]
	move.b	d0,d2                           	| [ld   c,a]
	move.b	(0x01,a3),d0                    	| [ld   a,(iy+$01)]
	lsr.b	#3,d0                            	| [srl  a]
												| [srl  a]
												| [srl  a]
	move.b	d0,d1                           	| [ld   b,a]
	rts                                    	| [ret]

* < ix: pengo structure
l_3ea6:
	move.b	currently_playing_8819,d0       	| [ld   a,(currently_playing_8819)]
	tst.b	d0                               	| [and  a]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	jbsr	read_player_inputs_2AFB           	| [call read_player_inputs_2AFB]
	not.b	d0                               	| negate bits [cpl]
	and.b	#0x0F,d0                         	| masks directions [and  $0F]
	bne.b	0f
	rts                                    	| returns if not moving [ret  z]
0:
* check if one of the 4 bits are set
	move.b	#0x04,d1                        	| do it 4 times at most [ld   b,$04]
l_3eb4:
	ror.b	#1,d0                            	| shift right with carry [rrca]
	jcs	l_3eba                             	| if bit is set, exit loop [jr   c,$3EBA]
	subq.b	#1,d1                           	| [...]
	jne	l_3eb4                             	| [djnz $3EB4]
	rts                                    	| no direction is pressed, end [ret]
* b contains the bit number/direction which is active
* B=2: left
* B=3: down
l_3eba:
	move.b	#0x04,d0                        	| [ld   a,$04]
	sub.b	d1,d0                            	| A = 4-first bit set [sub  b]
	cmp.b	(facing_direction,a2),d0         	| compare to facing direction??? [cp   (ix+facing_direction)]
	bne.b	0f
	rts                                    	| same facing direction: return [ret  z]
0:
	move.b	(x_pos,a2),d0                   	| get X [ld   a,(ix+x_pos)]
	and.b	#0x0F,d0                         	| masks (modulo 16) [and  $0F]
	cmp.b	#0x08,d0                         	| is X aligned on 8? [cp   $08]
	jeq	l_3edc                             	| [jr   z,$3EDC]
	cmp.b	#0x04,d0                         	| [cp   $04]
	bcc.b	0f
	rts                                    	| returns if X%16 < 4 [ret  c]
0:
	cmp.b	#0x0C,d0                         	| [cp   $0C]
	bcs.b	0f
	rts                                    	| returns if X%16 >= 12 [ret  nc]
0:
	move.b	#0x03,d1                        	| [ld   b,$03]
	cmp.b	#0x08,d0                         	| [cp   $08]
	jcs	l_3ed8                             	| [jr   c,$3ED8]
	move.b	#0x02,d1                        	| [ld   b,$02]
l_3ed8:
	move.b	d1,(facing_direction,a2)        	| update facing direction [ld   (ix+facing_direction),b]
	rts                                    	| [ret]
l_3edc:
	move.b	(y_pos,a2),d0                   	| [ld   a,(ix+y_pos)]
	and.b	#0x0F,d0                         	| [and  $0F]
	cmp.b	#0x04,d0                         	| [cp   $04]
	jcs	l_3ee8                             	| [jr   c,$3EE8]
	cmp.b	#0x0C,d0                         	| [cp   $0C]
	bcc.b	0f
	rts                                    	| [ret  c]
0:
l_3ee8:
	move.b	#0x01,d1                        	| [ld   b,$01]
	cmp.b	#0x08,d0                         	| [cp   $08]
	jcc	l_3ef0                             	| [jr   nc,$3EF0]
	clr.b	d1                               	| [ld   b,$00]
l_3ef0:
	move.b	d1,(facing_direction,a2)        	| [ld   (ix+facing_direction),b]
	rts                                    	| [ret]
l_3ef4:
	move.b	currently_playing_8819,d0       	| [ld   a,(currently_playing_8819)]
	tst.b	d0                               	| [and  a]
	jeq	l_3f27                             	| [jr   z,$3F27]
l_3efa:
	clr.b	d0                               	| [xor  a]
	move.b	d0,pengo_moving_direction_8CF4  	| [ld   (pengo_moving_direction_8CF4),a]
	clr.b	(0x08,a2)                        	| [ld   (ix+$08),$00]
	jbsr	read_player_inputs_2AFB           	| [call read_player_inputs_2AFB]
	not.b	d0                               	| [cpl]
	and.b	#0x0F,d0                         	| [and  $0F]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	move.b	#0xFF,(0x08,a2)                 	| [ld   (ix+$08),$FF]
	move.b	(facing_direction,a2),d1        	| [ld   b,(ix+facing_direction)]
	move.b	d1,(path_address_pointer_or_misc_flags,a2)	| [ld   (ix+path_address_pointer_or_misc_flags),b]
	move.b	#0x04,d1                        	| [ld   b,$04]
l_3f15:
	ror.b	#1,d0                            	| [rrca]
	jcs	l_3f1b                             	| [jr   c,$3F1B]
	subq.b	#1,d1                           	| [...]
	jne	l_3f15                             	| [djnz $3F15]
	rts                                    	| [ret]
l_3f1b:
	move.b	#0x04,d0                        	| [ld   a,$04]
	sub.b	d1,d0                            	| [sub  b]
	move.b	d0,(facing_direction,a2)        	| [ld   (ix+facing_direction),a]
	bset.b	#3,d0                           	| [set  3,a]
	move.b	d0,pengo_moving_direction_8CF4  	| [ld   (pengo_moving_direction_8CF4),a]
	rts                                    	| [ret]
	
* game in demo mode (no human player)
l_3f27:
	move.l	demo_move_table_pointer_8CF2,a0	| [ld   hl,(demo_move_table_pointer_8CF2)]
	lea	demo_mode_var_8CF5,a1          	| [ld   de,demo_mode_var_8CF5]
	exg	a1,a0                              	| [ex   de,hl]
	move.b	(a1),d0                         	| [ld   a,(de)]
	btst.b	#0,(a0)                         	| [bit  0,(hl)]
	jeq	l_3f3c                             	| [jr   z,$3F3C]
	addq.w	#1,a1                           	| [inc  de]
* update pointer
	move.l	a1,demo_move_table_pointer_8CF2 	| [ld   (demo_move_table_pointer_8CF2),de]
	ror.b	#4,d0                            	| [rrca]
												| [rrca]
												| [rrca]
												| [rrca]
l_3f3c:
	addq.b	#1,(a0)                         	| [inc  (hl)]
	exg	a1,a0                              	| [ex   de,hl]
	btst.b	#2,d0                           	| [bit  2,a]
	move.w	d0,-(sp)                        	| [push af]
	beq	0f
	jbsr	l_3f9b                            	| [call nz,$3F9B]
0:
	move.w	(sp)+,d0                        	| [pop  af]
	clr.b	(0x08,a2)                        	| [ld   (ix+$08),$00]
	btst.b	#3,d0                           	| [bit  3,a]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	and.b	#0x03,d0                         	| [and  $03]
	move.b	d0,(0x04,a2)                    	| [ld   (ix+$04),a]
	move.b	#0xFF,(0x08,a2)                 	| [ld   (ix+$08),$FF]
	rts                                    	| [ret]
	
l_3f80:
	move.b	currently_playing_8819,d0       	| [ld   a,(currently_playing_8819)]
	tst.b	d0                               	| [and  a]
	bne.b	0f
	rts                                    	| [ret  z]
0:
l_3f85:
	jbsr	read_player_inputs_2AFB           	| [call read_player_inputs_2AFB]
	not.b	d0                               	| [cpl]
	btst.b	#7,d0                           	| [bit  7,a]
	jeq	l_3fae                             	| [jr   z,$3FAE]
	move.b	(0x0f,a2),d0                    	| [ld   a,(ix+$0f)]
	addq.b	#1,d0                           	| [inc  a]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	move.b	#0xFF,(0x0f,a2)                 	| [ld   (ix+$0f),$FF]
	lea	pengo_moving_direction_8CF4(pc),a0 	| [ld   hl,pengo_moving_direction_8CF4]
	bset.b	#2,(a0)                         	| [set  2,(hl)]
l_3f9b:
	move.b	block_moving_flag_8DBF,d0       	| [ld   a,(block_moving_flag_8DBF)]
	tst.b	d0                               	| [and  a]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	move.b	#0x01,d0                        	| [ld   a,$01]
	move.b	d0,block_moving_flag_8DBF       	| [ld   (block_moving_flag_8DBF),a]
	move.b	#0x03,(char_state,a2)           	| [ld   (ix+char_state),$03]
	clr.b	(intermission_dance_push_anim_counter,a2)	| [ld   (ix+intermission_dance_push_anim_counter),$00]
	rts                                    	| [ret]
l_3fae:
	clr.b	(0x0f,a2)                        	| [ld   (ix+$0f),$00]
	rts                                    	| [ret]

pengo_dies_3FB3:
	move.b	#0x1E,d0                        	| [ld   a,$1E]
	jbsr	delay_28D1                        	| [call delay_28D1]
	jbsr	hide_snobee_sprites_3FDA          	| [call hide_snobee_sprites_3FDA]
	move.b	#0x0C,d1                        	| [ld   b,$0C]
	move.b	#0x1A,d2                        	| [ld   c,$1A]
l_3fbf:
	movem.w	d1/d2,-(sp)                    	| [push bc]
	btst.b	#0,d1                           	| [bit  0,b]
	jeq	l_3fc5                             	| [jr   z,$3FC5]
	addq.b	#1,d2                           	| [inc  c]
l_3fc5:
	move.b	d2,d0                           	| [ld   a,c]
	rol.b	#2,d0                            	| [rlca]
												| [rlca]
	move.b	d0,(animation_frame,a2)         	| [ld   (ix+animation_frame),a]
	jbsr	display_character_sprite_39AB     	| [call display_character_sprite_39AB]
	move.b	#0x08,d0                        	| [ld   a,$08]
	jbsr	delay_28D1                        	| [call delay_28D1]
	movem.w	(sp)+,d1/d2                    	| [pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_3fbf                             	| [djnz $3FBF]
	addq.b	#1,(char_state,a2)              	| [inc  (ix+char_state)]
	rts                                    	| [ret]

hide_snobee_sprites_3FDA:
	clr.b	d0                               	| [xor  a]
* set sprite colors to zero for snobees
	lea	sprite_ram_8FF2+1(pc),a0                  	| [ld   hl,sound_8FF3]
	                      	| [ld   de,$0002]
	move.b	d0,(a0)                         	| [ld   (hl),a]
	addq.w	#2,a0								| [add  hl,de]
	move.b	d0,(a0)                         	| [ld   (hl),a]
	addq.w	#2,a0								| [add  hl,de]
	move.b	d0,(a0)                         	| [ld   (hl),a]
	addq.w	#2,a0								| [add  hl,de]
	move.b	d0,(a0)                         	| [ld   (hl),a]
	rts                                    	| [ret]

pengo_pushes_block_3FE9:
* 0->3: 3 max push pos
	move.b	(intermission_dance_push_anim_counter,a2),d0	| [ld   a,(ix+intermission_dance_push_anim_counter)]
	lea	table_3FF2(pc),a1                  	| [ld   de,table_3FF2]
	jra	indirect_jump_2D8F                 	| [jp   indirect_jump_2D8F]


table_3FF2:
	.long	block_pushed_3FFA
	.long	block_pushed_start_404E
	.long	block_pushed_401F
	.long	block_pushed_start_404E
	
block_pushed_3FFA:
	clr.b	d1                               	| [ld   b,$00]
l_3ffc:
	move.b	(facing_direction,a2),d0        	| [ld   a,(ix+facing_direction)]
	cmp.b	#0x03,d0                         	| [cp   $03]
	jne	l_4004                             	| [jr   nz,$4004]
	subq.b	#1,d0                           	| [dec  a]
l_4004:
	add.b	d0,d0                            	| [add  a,a]
	addq.b	#0x06,d0                        	| [add  a,$06]
	add.b	d1,d0                            	| [add  a,b]
	rol.b	#2,d0                            	| [rlca]
											| [rlca]
	move.b	d0,(animation_frame,a2)         	| [ld   (ix+animation_frame),a]
	move.b	(facing_direction,a2),d0        	| [ld   a,(ix+facing_direction)]
	cmp.b	#0x03,d0                         	| [cp   $03]
	jne	l_4018                             	| [jr   nz,$4018]
	bset.b	#1,(animation_frame,a2)         	| [set  1,(ix+animation_frame)]
l_4018:
	jbsr	display_character_sprite_39AB     	| [call display_character_sprite_39AB]
	addq.b	#1,(intermission_dance_push_anim_counter,a2)	| [inc  (ix+intermission_dance_push_anim_counter)]
	rts                                    	| [ret]

block_pushed_401F:
	move.b	#0x01,d1                        	| [ld   b,$01]
	jra	l_3ffc                             	| [jr   $3FFC]
l_4023:
	btst.b	#0,(0x09,a2)                    	| [bit  0,(ix+$09)]
	bne	0f
	jbsr	l_402e                            	| [call z,$402E]
0:
	jbsr	l_4037                            	| [call $4037]
	rts                                    	| [ret]

l_402e:
	move.b	#0x01,(stunned_push_block_counter,a2)	| [ld   (ix+stunned_push_block_counter),$01]
	move.b	#0x0F,(0x09,a2)                 	| [ld   (ix+$09),$0F]
	rts                                    	| [ret]
l_4037:
	move.b	counter_lsb_8824,d0             	| count mask [ld   a,(counter_lsb_8824)]
	tst.b	d0                               	| [and  a]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	move.b	(stunned_push_block_counter,a2),d0	| [ld   a,(ix+stunned_push_block_counter)]
	subq.b	#1,d0                           	| [dec  a]
	jeq	l_4046                             	| [jr   z,$4046]
	move.b	d0,(stunned_push_block_counter,a2)	| [ld   (ix+stunned_push_block_counter),a]
	rts                                    	| [ret]
l_4046:
	clr.b	(0x09,a2)                        	| [ld   (ix+$09),$00]
	addq.b	#1,(intermission_dance_push_anim_counter,a2)	| [inc  (ix+intermission_dance_push_anim_counter)]
	rts                                    	| [ret]
block_pushed_start_404E:
	move.b	#0x02,(char_state,a2)           	| [ld   (ix+char_state),$02]
	rts                                    	| [ret]
pengo_breaks_block_4053:
	move.b	(intermission_dance_push_anim_counter,a2),d0	| [ld   a,(ix+intermission_dance_push_anim_counter)]
	lea	table_405C(pc),a1                  	| [ld   de,table_405C]
	jra	indirect_jump_2D8F                 	| [jp   indirect_jump_2D8F]
table_405C:
	.long	block_pushed_3FFA
	.long	block_broken_406E
	.long	block_pushed_401F
	.long	block_broken_406E
	.long	block_pushed_3FFA
	.long	block_broken_406E
	.long	block_pushed_401F
	.long	block_broken_406E
	.long	block_pushed_start_404E


block_broken_406E:
	btst.b	#0,(0x09,a2)                    	| [bit  0,(ix+$09)]
	bne	0f
	jbsr	l_4079                            	| [call z,$4079]
0:
	jbsr	l_4082                            	| [call $4082]
	rts                                    	| [ret]
l_4079:
	move.b	#0x02,(stunned_push_block_counter,a2)	| [ld   (ix+stunned_push_block_counter),$02]
	move.b	#0x0F,(0x09,a2)                 	| [ld   (ix+$09),$0F]
	rts                                    	| [ret]
l_4082:
	move.b	counter_lsb_8824,d0             	| [ld   a,(counter_lsb_8824)]
	and.b	#0x1F,d0                         	| [and  $1F]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
 * counter 1 out of 32 pengo breaks block facing left (also in "push start" screen)
	move.b	(stunned_push_block_counter,a2),d0	| [ld   a,(ix+stunned_push_block_counter)]
	subq.b	#1,d0                           	| [dec  a]
	jeq	l_4092                             	| [jr   z,$4092]
	move.b	d0,(stunned_push_block_counter,a2)	| [ld   (ix+stunned_push_block_counter),a]
	rts                                    	| [ret]
l_4092:
	clr.b	(0x09,a2)                        	| [ld   (ix+$09),$00]
	addq.b	#1,(intermission_dance_push_anim_counter,a2)	| [inc  (ix+intermission_dance_push_anim_counter)]
	rts                                    	| [ret]
pengo_shakes_wall_409A:
	move.b	(intermission_dance_push_anim_counter,a2),d0	| [ld   a,(ix+intermission_dance_push_anim_counter)]
	lea	jump_table_40A3(pc),a1             	| [ld   de,jump_table_40A3]
	jra	indirect_jump_2D8F                 	| [jp   indirect_jump_2D8F]

jump_table_40A3:
	.long	wall_push_40B5
	.long	block_broken_406E
	.long	wall_push_40BC
	.long	block_broken_406E
	.long	wall_push_40B5
	.long	block_broken_406E
	.long	wall_push_40BC
	.long	block_broken_406E
	.long	wall_push_40C6


wall_push_40B5:
	jbsr	l_40d2                            	| [call $40D2]
	jbsr	block_pushed_3FFA                            	| [call $3FFA]
	rts                                    	| [ret]

wall_push_40BC:
	jbsr	l_40ce                            	| [call $40CE]
	jbsr	block_pushed_401F                            	| [call $401F]
	jbsr	pengo_is_moving_a_wall_4167       	| [call pengo_is_moving_a_wall_4167]
	rts                                    	| [ret]

wall_push_40C6:
	jbsr	draw_borders_2E6A                            	| [call $2E6A]
	move.b	#0x02,(char_state,a2)           	| [ld   (ix+char_state),$02]
	rts                                    	| [ret]

l_40ce:
	move.b	#0x01,d1                        	| [ld   b,$01]
	jra	l_40d4                             	| [jr   $40D4]
l_40d2:
	clr.b	d1                               	| [ld   b,$00]
l_40d4:
	move.b	(facing_direction,a2),d0        	| [ld   a,(ix+facing_direction)]
	add.b	d0,d0                            	| [add  a,a]
	add.b	d1,d0                            	| [add  a,b]
	rol.b	#3,d0                            	| [rlca]
											| [rlca]
											| [rlca]
	clr.w	d3                               	| [ld   d,$00]
	move.b	d0,d3                           	| [ld   e,a]
	lea	table_4127(pc),a0                  	| [ld   hl,table_4127]
	add.w	d3,a0							| [add  hl,de]
	move.b	(a0)+,d2                         	| [ld   c,(hl)]
	                           	| [inc  hl]
	move.b	(a0)+,d1                         	| [ld   b,(hl)]
	                           	| [inc  hl]
	move.b	(a0)+,d3                         	| [ld   d,(hl)]
	                           	| [inc  hl]
	move.b	(a0)+,d4                         	| [ld   e,(hl)]
	                           	| [inc  hl]
	move.b	(a0),d0                         	| [ld   a,(hl)]
	move.b	d0,(path_address_pointer_or_misc_flags,a2)                    	| [ld   (ix+$10),a]
l_40ef:
	move.l	d3,-(sp)                        	| [push de]
	jbsr	convert_coords_to_screen_address_296F	| [call convert_coords_to_screen_address_296F]
	move.l	(sp),d3                        	| [pop  de]
											| [push de]
	btst.b	#2,(path_address_pointer_or_misc_flags,a2)                    	| [bit  2,(ix+$10)]
	jeq	l_40fc                             	| [jr   z,$40FC]
	addq.b	#1,d4                           	| [inc  e]
l_40fc:
	move.b	d4,(a0)                         	| [ld   (hl),e]
	move.l	(sp)+,d3                        	| [pop  de]
	jbsr	l_4118                            	| [call $4118]
	move.l	d3,-(sp)                        	| [push de]
	jbsr	convert_coords_to_screen_address_296F	| [call convert_coords_to_screen_address_296F]
	move.l	(sp),d3                        	| [pop  de]
	                        	| [push de]
	btst.b	#2,(path_address_pointer_or_misc_flags,a2)                    	| [bit  2,(ix+$10)]
	jne	l_410e                             	| [jr   nz,$410E]
	addq.b	#1,d4                           	| [inc  e]
l_410e:
	move.b	d4,(a0)                         	| [ld   (hl),e]
	move.l	(sp)+,d3                        	| [pop  de]
	jbsr	l_4118                            	| [call $4118]
	subq.b	#1,d3                           	| [dec  d]
	subq.b	#1,d3                           	| [dec  d]
	jne	l_40ef                             	| [jr   nz,$40EF]
	rts                                    	| [ret]

l_4118:
	btst.b	#0,(path_address_pointer_or_misc_flags,a2)                    	| [bit  0,(ix+$10)]
	jeq	l_411f                             	| [jr   z,$411F]
	addq.b	#1,d2                           	| [inc  c]
l_411f:
	btst.b	#1,(path_address_pointer_or_misc_flags,a2)                    	| [bit  1,(ix+$10)]
	jeq	l_4126                             	| [jr   z,$4126]
	addq.b	#1,d1                           	| [inc  b]
l_4126:
	rts                                    	| [ret]

table_4127:
	.byte	0x00,0x01,0x1C,0x14,0x01,0x00,0x00,0x00
	.byte	0x00,0x01,0x1C,0x14,0x05,0x00,0x00,0x00
	.byte	0x00,0x20,0x1C,0x14,0x01,0x00,0x00,0x00
	.byte	0x00,0x20,0x1C,0x14,0x05,0x00,0x00,0x00
	.byte	0x00,0x01,0x20,0x12,0x02,0x00,0x00,0x00
	.byte	0x00,0x01,0x20,0x12,0x06,0x00,0x00,0x00
	.byte	0x1B,0x01,0x20,0x12,0x02,0x00,0x00,0x00
	.byte	0x1B,0x01,0x20,0x12,0x06,0x00,0x00,0x00

	
 * perform those tests only when pengo moves the edge
pengo_is_moving_a_wall_4167:
	lea	snobee_1_struct_8D00,a2        	| [ld   ix,snobee_1_struct_8D00]
	jbsr	snobee_on_waving_edge_4184        	| [call snobee_on_waving_edge_4184]
	lea	snobee_2_struct_8D20,a2        	| [ld   ix,snobee_2_struct_8D20]
	jbsr	snobee_on_waving_edge_4184        	| [call snobee_on_waving_edge_4184]
	lea	snobee_3_struct_8D40,a2        	| [ld   ix,snobee_3_struct_8D40]
	jbsr	snobee_on_waving_edge_4184        	| [call snobee_on_waving_edge_4184]
	lea	snobee_4_struct_8D60,a2        	| [ld   ix,snobee_4_struct_8D60]
	jbsr	snobee_on_waving_edge_4184        	| [call snobee_on_waving_edge_4184]
	rts                                    	| [ret]

snobee_on_waving_edge_4184:
	move.b	(x_pos,a2),d2                   	| [ld   c,(ix+x_pos)]
	move.b	(y_pos,a2),d1                   	| [ld   b,(ix+y_pos)]
	move.b	(char_state,a2),d0              	| [ld   a,(ix+char_state)]
	tst.b	d0                               	| [and  a]
	jne		0f
	rts                                    	| [ret  z]
0:
	cmp.b	#0x02,d0                         	| [cp   $02]
	jeq		0f
	rts                                    	| [ret  nz]
0:
	move.b	unknown_8D84,d0                 	| [ld   a,(unknown_8D84)]
	lea	table_419B(pc),a1                  	| [ld   de,table_419B]
	jra	indirect_jump_2D8F                 	| [jp   indirect_jump_2D8F]

table_419B:
	.long	l_41a3
	.long	l_41ac
	.long	l_41b2
	.long	l_41b8

l_41a3:
	move.b	#0x10,d0                        	| [ld   a,$10]
	cmp.b	d1,d0                            	| [cp   b]
	jeq		0f
	rts                                    	| [ret  nz]
0:
l_41a7:
	move.b	#0x03,(char_state,a2)           	| [ld   (ix+char_state),$03]
	rts                                    	| [ret]

l_41ac:
	move.b	#0xF0,d0                        	| [ld   a,$F0]
	cmp.b	d1,d0                            	| [cp   b]
	jeq		0f
	rts                                    	| [ret  nz]
0:
	jra	l_41a7                             	| [jr   $41A7]

l_41b2:
	move.b	#0x18,d0                        	| [ld   a,$18]
	cmp.b	d2,d0                            	| [cp   c]
	jeq		0f
	rts                                    	| [ret  nz]
0:
	jra	l_41a7                             	| [jr   $41A7]

l_41b8:
	move.b	#0xD8,d0                        	| [ld   a,$D8]
	cmp.b	d2,d0                            	| [cp   c]
	jeq		0f
	rts                                    	| [ret  nz]
0:
	jra	l_41a7                             	| [jr   $41A7]
	
pengo_block_push_41BE:
	lea	moving_block_struct_8DA0(pc),a2    	| [ld   ix,moving_block_struct_8DA0]
	lea	table_41CB(pc),a1                  	| [ld   de,table_41CB]
	move.b	(char_state,a2),d0              	| [ld   a,(ix+char_state)]
	jra	indirect_jump_2D8F                 	| [jp   indirect_jump_2D8F]
table_41CB:
	.long	do_nothing_3358
	.long	l_41d9
	.long	l_43bd
	.long	l_44e9
	.long	l_4529
	.long	disable_snobee_3359
	.long	reset_state_to_default_3368


l_41d9:

	move.l	a2,-(sp)                        	| [push ix]
	move.l	(sp)+,a3                        	| [pop  iy]
	lea	pengo_struct_8D80(pc),a2           	| [ld   ix,pengo_struct_8D80]
	jbsr	get_div8_ix_coords_3E78           	| [call get_div8_ix_coords_3E78]
	clr.b	(0x18,a3)                        	| [ld   (iy+$18),$00]
	clr.b	(0x19,a3)                        	| [ld   (iy+$19),$00]
	move.b	(facing_direction,a2),d0        	| [ld   a,(ix+facing_direction)]
	lea	table_431A(pc),a1                  	| [ld   de,table_431A]
	jbsr	indirect_jump_2D8F                	| [call indirect_jump_2D8F]
	jne	l_426c                             	| [jr   nz,$426C]
	jbsr	move_snobee_current_direction_4378	| [call move_snobee_current_direction_4378]
	move.b	(facing_direction,a2),d0        	| [ld   a,(ix+facing_direction)]
	lea	is_grid_free_jump_table_43A1(pc),a1	| [ld   de,is_grid_free_jump_table_43A1]
	jbsr	indirect_jump_2D8F                	| [call indirect_jump_2D8F]
	jeq	l_420f                             	| [jr   z,$420F]
	cmp.b	#0x70,d0                         	| [cp   $70]
	jcs	l_4294                             	| [jp   c,$4294]
	cmp.b	#0x80,d0                         	| [cp   $80]
	jcc	l_4294                             	| [jp   nc,$4294]
l_420f:
	jbsr	move_snobee_current_direction_4378	| [call move_snobee_current_direction_4378]
	jbsr	clear_2x2_tiles_at_current_pos_43A9	| [call clear_2x2_tiles_at_current_pos_43A9]
	btst.b	#4,(0x18,a3)                    	| [bit  4,(iy+$18)]
	beq	0f
	jbsr	l_42f9                            	| [call nz,$42F9]
0:
	jbsr	l_425e                            	| [call $425E]
	jbsr	move_snobee_current_direction_4378	| [call move_snobee_current_direction_4378]
	move.b	d1,d0                           	| [ld   a,b]
	rol.b	#1,d0                            	| [rlca]
	rol.b	#1,d0                            	| [rlca]
	rol.b	#1,d0                            	| [rlca]
	move.b	d0,d1                           	| [ld   b,a]
	move.b	d2,d0                           	| [ld   a,c]
	addq.b	#0x02,d0                        	| [add  a,$02]
	rol.b	#1,d0                            	| [rlca]
	rol.b	#1,d0                            	| [rlca]
	rol.b	#1,d0                            	| [rlca]
	move.b	d0,d2                           	| [ld   c,a]
	move.b	(facing_direction,a2),d0        	| [ld   a,(ix+facing_direction)]

	move.l	a3,-(sp)                        	| [push iy]
	move.l	(sp)+,a2                        	| [pop  ix]
	move.b	d0,(facing_direction,a2)        	| [ld   (ix+facing_direction),a]
	move.b	d2,(x_pos,a2)                   	| [ld   (ix+x_pos),c]
	move.b	d1,(y_pos,a2)                   	| [ld   (ix+y_pos),b]
	jbsr	l_43db                            	| [call $43DB]
	clr.b	(0x0f,a2)                        	| [ld   (ix+$0f),$00]
	move.b	#0x70,d0                        	| [ld   a,$70]
	btst.b	#4,(0x18,a2)                    	| [bit  4,(ix+$18)]
	jeq	l_424f                             	| [jr   z,$424F]
	move.b	#0x74,d0                        	| [ld   a,$74]
l_424f:
	move.b	d0,(animation_frame,a2)         	| [ld   (ix+animation_frame),a]
	jbsr	display_character_sprite_39AB     	| [call display_character_sprite_39AB]
	addq.b	#1,(char_state,a2)              	| [inc  (ix+char_state)]
	move.b	#0x05,d1                        	| [ld   b,$05]
	jbsr	sound_18AF                            	| [call $18AF]
	rts                                    	| [ret]

l_425e:
	jbsr	l_42ef                            	| [call $42EF]
	bcs.b	0f
	rts                                    	| [ret  nc]
0:
	move.b	total_eggs_to_hatch_8DC0,d0     	| [ld   a,(total_eggs_to_hatch_8DC0)]
	sub.b	d1,d0                            	| [sub  b]
	bset.b	#7,d0                           	| [set  7,a]
	move.b	d0,(0x19,a3)                    	| [ld   (iy+$19),a]
	rts                                    	| [ret]
l_426c:
	move.b	#0x10,d0                        	| [ld   a,$10]
	cmp.b	(a0),d0                          	| [cp   (hl)]
	jeq	l_4282                             	| [jr   z,$4282]
	addq.b	#1,d0                           	| [inc  a]
	cmp.b	(a0),d0                          	| [cp   (hl)]
	jeq	l_4282                             	| [jr   z,$4282]
	move.b	#0x02,(char_state,a2)           	| [ld   (ix+char_state),$02]

	move.l	a3,-(sp)                        	| [push iy]
	move.l	(sp)+,a2                        	| [pop  ix]
	clr.b	(char_state,a2)                  	| [ld   (ix+char_state),$00]
	rts                                    	| [ret]
l_4282:
	move.b	#0x05,(char_state,a2)           	| [ld   (ix+char_state),$05]

	move.l	a3,-(sp)                        	| [push iy]
	move.l	(sp)+,a2                        	| [pop  ix]
	clr.b	(char_state,a2)                  	| [ld   (ix+char_state),$00]
	move.b	#0x03,d1                        	| [ld   b,$03]
	jbsr	sound_18AF                            	| [call $18AF]
	rts                                    	| [ret]
l_4294:
	move.b	#0x04,(char_state,a2)           	| [ld   (ix+char_state),$04]
	btst.b	#4,(0x18,a3)                    	| [bit  4,(iy+$18)]
	jeq	l_42a3                             	| [jr   z,$42A3]
	clr.b	(char_state,a3)                        	| [ld   (iy+$1f),$00]
	rts                                    	| [ret]

l_42a3:
	jbsr	move_snobee_current_direction_4378	| [call move_snobee_current_direction_4378]

	move.l	a3,-(sp)                        	| [push iy]
	move.l	(sp)+,a2                        	| [pop  ix]
	clr.b	(char_state,a2)                  	| [ld   (ix+char_state),$00]
	movem.w	d1/d2,-(sp)                    	| [push bc]
	move.b	#0x02,d1                        	| [ld   b,$02]
	jbsr	sound_18AF                            	| [call $18AF]
	movem.w	(sp)+,d1/d2                    	| [pop  bc]
	jbsr	find_breaking_block_free_slot_42c6                            	| [call $42C6]
	bset.b	#5,(a0)                         	| [set  5,(hl)]
	btst.b	#6,(a0)                         	| [bit  6,(hl)]
	bne.b	0f
	rts                                    	| [ret  z]
0:
* egg broken, decrease nb enemies and eggs
	lea	remaining_alive_snobees_8D98(pc),a0	| [ld   hl,remaining_alive_snobees_8D98]
	subq.b	#1,(a0)                         	| [dec  (hl)]
	lea	current_nb_eggs_to_hatch_8DDD(pc),a0	| [ld   hl,current_nb_eggs_to_hatch_8DDD]
	subq.b	#1,(a0)                         	| [dec  (hl)]
	rts                                    	| [ret]

find_breaking_block_free_slot_42c6:
	lea	breaking_block_slots_8CC0(pc),a0   	| [ld   hl,breaking_block_slots_8CC0]
	move.b	#0x05,d3                        	| [ld   d,$05]
l_42cb:
	* try to find free slot
	btst.b	#7,(a0)                         	| [bit  7,(hl)]
	jeq	l_42d9                             	| [jr   z,$42D9]
	* not free: next slot
	addq.w	#6,a0                           	| [inc  hl]
												| [inc  hl]
												| [inc  hl]
												| [inc  hl]
												| [inc  hl]
												| [inc  hl]
	subq.b	#1,d3                           	| [dec  d]
	jne	l_42cb                             	| [jr   nz,$42CB]
	rts                                    	| [ret]
	
l_42d9:
	move.b	#0x80,(a0)                      	| [ld   (hl),$80]

	move.l	a0,-(sp)                        	| [push hl]
	addq.w	#1,a0                           	| [inc  hl]
	move.b	#0x09,(a0)+                      	| [ld   (hl),$09]
	                           	| [inc  hl]
	move.b	d2,(a0)+                         	| [ld   (hl),c]
	                           	| [inc  hl]
	move.b	d1,(a0)                         	| [ld   (hl),b]
	addq.w	#2,a0                           	| [inc  hl]
	                           	| [inc  hl]
	move.b	#0x01,(a0)                      	| [ld   (hl),$01]
	jbsr	l_42ef                            	| [call $42EF]
	move.l	(sp)+,a0                        	| [pop  hl]
	tst.b	d7
	bne.b	0f
	rts                                    	| [ret  nc]
0:
	move.b	#0xC0,(a0)                      	| [ld   (hl),$C0]
	rts                                    	| [ret]
l_42ef:
	jbsr	look_for_hidden_egg_300A          	| [call look_for_hidden_egg_300A]
	bne.b	0f
	clr.b	d7
	rts                                    	| [ret  nc]
0:
	clr.b	(a0)+                         	| [ld   (hl),a]
	move.b	d0,(a0)                         	| [ld   (hl),a]
	st.b	d7	| scf		; set carry flag
	rts                                    	| [ret]
l_42f9:
	move.b	d1,d5                           	| [ld   h,b]
	move.b	d2,d6                           	| [ld   l,c]
	bsr		get_diamond_block_1_xy_8DB0_to_de  	| [ld   de,(diamond_block_1_xy_8DB0)]
	jbsr	compare_hl_to_de_2D99             	| [call compare_hl_to_de_2D99]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	addq.b	#1,(0x18,a3)                    	| [inc  (iy+$18)]
	bsr		get_diamond_block_2_xy_8DB2_to_de   	| [ld   de,(diamond_block_2_xy_8DB2)]
	jbsr	compare_hl_to_de_2D99             	| [call compare_hl_to_de_2D99]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	addq.b	#1,(0x18,a3)                    	| [inc  (iy+$18)]
	bsr		get_diamond_block_3_xy_8DB4_to_de  	| [ld   de,(diamond_block_3_xy_8DB4)]
	jbsr	compare_hl_to_de_2D99             	| [call compare_hl_to_de_2D99]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	rts                                    	| [ret]

table_431A:
	.long	l_4322
	.long	l_4337
	.long	l_434d
	.long	l_4362

l_4322:
	subq.b	#1,d1                           	| [dec  b]
	jbsr	convert_coords_to_screen_address_296F                            	| [call $296F]
	move.b	#0x1A,d0                        	| [ld   a,$1A]
	cmp.b	(a0),d0                          	| [cp   (hl)]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	bset.b	#4,(0x18,a3)                    	| [set  4,(iy+$18)]
	move.b	#0x1E,d0                        	| [ld   a,$1E]
	cmp.b	(a0),d0                          	| [cp   (hl)]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	bclr.b	#4,(0x18,a3)                    	| [res  4,(iy+$18)]
	rts                                    	| [ret]
l_4337:
	addq.b	#1,d1                           	| [inc  b]
	addq.b	#1,d1                           	| [inc  b]
	jbsr	convert_coords_to_screen_address_296F	| [call convert_coords_to_screen_address_296F]
	move.b	#0x18,d0                        	| [ld   a,$18]
	cmp.b	(a0),d0                          	| [cp   (hl)]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	bset.b	#4,(0x18,a3)                    	| [set  4,(iy+$18)]
	move.b	#0x1C,d0                        	| [ld   a,$1C]
	cmp.b	(a0),d0                          	| [cp   (hl)]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	bclr.b	#4,(0x18,a3)                    	| [res  4,(iy+$18)]
	rts                                    	| [ret]
l_434d:
	subq.b	#1,d2                           	| [dec  c]
	jbsr	convert_coords_to_screen_address_296F	| [call convert_coords_to_screen_address_296F]
	move.b	#0x19,d0                        	| [ld   a,$19]
	cmp.b	(a0),d0                          	| [cp   (hl)]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	bset.b	#4,(0x18,a3)                    	| [set  4,(iy+$18)]
	move.b	#0x1D,d0                        	| [ld   a,$1D]
	cmp.b	(a0),d0                          	| [cp   (hl)]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	bclr.b	#4,(0x18,a3)                    	| [res  4,(iy+$18)]
	rts                                    	| [ret]
l_4362:
	addq.b	#1,d2                           	| [inc  c]
	addq.b	#1,d2                           	| [inc  c]
	jbsr	convert_coords_to_screen_address_296F	| [call convert_coords_to_screen_address_296F]
	move.b	#0x18,d0                        	| [ld   a,$18]
	cmp.b	(a0),d0                          	| [cp   (hl)]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	bset.b	#4,(0x18,a3)                    	| [set  4,(iy+$18)]
	move.b	#0x1C,d0                        	| [ld   a,$1C]
	cmp.b	(a0),d0                          	| [cp   (hl)]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	bclr.b	#4,(0x18,a3)                    	| [res  4,(iy+$18)]
	rts                                    	| [ret]

* < BC: X,Y of snobee
move_snobee_current_direction_4378:
	jbsr	get_div8_ix_coords_3E78           	| [call get_div8_ix_coords_3E78]
	move.b	(facing_direction,a2),d0        	| facing direction [ld   a,(ix+facing_direction)]
	lea	table_4385(pc),a1                  	| [ld   de,table_4385]
	jbsr	indirect_jump_2D8F                	| [call indirect_jump_2D8F]
	rts                                    	| [ret]

table_4385:
	.long	l_438d
	.long	l_4392
	.long	l_4397
	.long	l_439c

l_438d:
	move.b	d1,d0                           	| [ld   a,b]
	subq.b	#0x02,d0                        	| [sub  $02]
	move.b	d0,d1                           	| [ld   b,a]
	rts                                    	| [ret]

l_4392:
	move.b	d1,d0                           	| [ld   a,b]
	addq.b	#0x02,d0                        	| [add  a,$02]
	move.b	d0,d1                           	| [ld   b,a]
	rts                                    	| [ret]

l_4397:
	move.b	d2,d0                           	| [ld   a,c]
	subq.b	#0x02,d0                        	| [sub  $02]
	move.b	d0,d2                           	| [ld   c,a]
	rts                                    	| [ret]

l_439c:
	move.b	d2,d0                           	| [ld   a,c]
	addq.b	#0x02,d0                        	| [add  a,$02]
	move.b	d0,d2                           	| [ld   c,a]
	rts                                    	| [ret]
	
is_grid_free_jump_table_43A1:
	.long	is_upper_grid_free_390F
	.long	is_lower_grid_free_3917
	.long	is_left_grid_free_391B
	.long	is_right_grid_free_391E

clear_2x2_tiles_at_current_pos_43A9:
	bsr		set_current_cursor_from_bc			| [ld   (cursor_x_8800),bc]
	jbsr	put_blank_at_current_pos_2900     	| [call put_blank_at_current_pos_2900]
	jbsr	put_blank_at_current_pos_2900     	| [call put_blank_at_current_pos_2900]
	jbsr	move_cursor_2_291E                	| [call move_cursor_2_291E]
	jbsr	put_blank_at_current_pos_2900     	| [call put_blank_at_current_pos_2900]
	jbsr	put_blank_at_current_pos_2900     	| [call put_blank_at_current_pos_2900]
	rts                                    	| [ret]

l_43bd:
	addq.b	#1,(current_period_counter,a2)  	| [inc  (ix+current_period_counter)]
	move.b	(current_period_counter,a2),d0  	| [ld   a,(ix+current_period_counter)]
	cmp.b	(instant_move_period,a2),d0      	| [cp   (ix+instant_move_period)]
	bcc.b	0f
	rts                                    	| [ret  c]
0:
	clr.b	(current_period_counter,a2)      	| [ld   (ix+current_period_counter),$00]
	jbsr	l_43e5                            	| [call $43E5]
	lea	0x43DB(pc),a0                      	| [ld   hl,$43DB]

	move.l	a0,-(sp)                        	| [push hl]
 * move snobee in the current direction
	move.b	(facing_direction,a2),d0        	| [ld   a,(ix+facing_direction)]
	lea	snobee_move_table_33C6(pc),a1      	| [ld   de,snobee_move_table_33C6]
	jra	indirect_jump_2D8F                 	| [jp   indirect_jump_2D8F]

l_43db:
	move.b	(char_id,a2),d0                 	| [ld   a,(ix+char_id)]

	move.l	a2,-(sp)                        	| [push ix]
	move.l	(sp)+,a0                        	| [pop  hl]
	jbsr	display_sprite_3154               	| [call display_sprite_3154]
	rts                                    	| [ret]

l_43e5:
	move.b	(x_pos,a2),d0                   	| [ld   a,(ix+x_pos)]
	and.b	#0x0F,d0                         	| [and  $0F]
	cmp.b	#0x08,d0                         	| [cp   $08]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	move.b	(y_pos,a2),d0                   	| [ld   a,(ix+y_pos)]
	and.b	#0x0F,d0                         	| [and  $0F]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	jbsr	check_snobee_collisions_with_block_4431	| [call $check_snobee_collisions_with_block_4431]
	jbsr	get_div8_ix_coords_3E78           	| [call get_div8_ix_coords_3E78]
	move.b	(facing_direction,a2),d0        	| [ld   a,(ix+facing_direction)]
	lea	table_4385(pc),a1                  	| [ld   de,table_4385]
	jbsr	indirect_jump_2D8F                	| [call indirect_jump_2D8F]
	move.b	(facing_direction,a2),d0        	| [ld   a,(ix+facing_direction)]
	lea	is_grid_free_jump_table_43A1(pc),a1	| [ld   de,is_grid_free_jump_table_43A1]
	jbsr	indirect_jump_2D8F                	| [call indirect_jump_2D8F]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	cmp.b	#0x70,d0                         	| [cp   $70]
	jcs	l_4413                             	| [jr   c,$4413]
	cmp.b	#0x80,d0                         	| [cp   $80]
	bcc.b	0f
	rts                                    	| [ret  c]
0:
l_4413:
	addq.b	#1,(char_state,a2)              	| [inc  (ix+char_state)]
	jbsr	get_div8_ix_coords_3E78           	| [call get_div8_ix_coords_3E78]
	move.b	(facing_direction,a2),d0        	| [ld   a,(ix+facing_direction)]
	lea	table_4385(pc),a1                  	| [ld   de,table_4385]
	jbsr	indirect_jump_2D8F                	| [call indirect_jump_2D8F]
	clr.b	d0                               	| [ld   a,$00]
	move.b	d0,cursor_color_8802            	| [ld   (cursor_color_8802),a]
	bsr		set_current_cursor_from_bc                	| [ld   (cursor_x_8800),bc]
	move.b	#0x1C,d0                        	| [ld   a,$1C]
	jbsr	set_2x2_tile_2F00                 	| [call set_2x2_tile_2F00]
	rts                                    	| [ret]

check_snobee_collisions_with_block_4431:
	lea	snobee_1_struct_8D00(pc),a3        	| [ld   iy,snobee_1_struct_8D00]
	jbsr	snobee_collision_with_moving_block_test_444E	| [call snobee_collision_with_moving_block_test_444E]
	lea	snobee_2_struct_8D20(pc),a3        	| [ld   iy,snobee_2_struct_8D20]
	jbsr	snobee_collision_with_moving_block_test_444E	| [call snobee_collision_with_moving_block_test_444E]
	lea	snobee_3_struct_8D40(pc),a3        	| [ld   iy,snobee_3_struct_8D40]
	jbsr	snobee_collision_with_moving_block_test_444E	| [call snobee_collision_with_moving_block_test_444E]
	lea	snobee_4_struct_8D60(pc),a3        	| [ld   iy,snobee_4_struct_8D60]
	jbsr	snobee_collision_with_moving_block_test_444E	| [call snobee_collision_with_moving_block_test_444E]
	rts                                    	| [ret]

snobee_collision_with_moving_block_test_444E:
	move.b	(char_state,a3),d0                    	| [ld   a,(iy+$1f)]
	tst.b	d0                               	| [and  a]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	cmp.b	#0x06,d0                         	| state = 0 or >= 06? don't test anything [cp   $06]
	bcs.b	0f
	rts                                    	| [ret  nc]
0:

 * state is "can collide with block"
	move.b	(facing_direction,a2),d0        	| moving block direction (ix contains block struct) [ld   a,(ix+facing_direction)]
	lea	table_445F(pc),a1                  	| [ld   de,table_445F]
	jra	indirect_jump_2D8F                 	| [jp   indirect_jump_2D8F]
table_445F:
	.long	go_up_test_4467                  	|  "go up" test
	.long	go_down_test_448E                	|  "go down" test
	.long	go_left_test_44A8                	|  "go left" test
	.long	go_right_test_44CF               	|  "go right" test

go_up_test_4467:
	jbsr	get_div8_ix_coords_3E78           	| [call get_div8_ix_coords_3E78]
	move.b	d1,d3                           	| [ld   d,b]
	move.b	d2,d4                           	| [ld   e,c]
	jbsr	get_div8_iy_coords_3E8F           	| [call get_div8_iy_coords_3E8F]
	move.b	d3,d0                           	| [ld   a,d]
	cmp.b	d1,d0                            	| [cp   b]
	jeq	l_447f                             	| [jr   z,$447F]
	addq.b	#1,d0                           	| [inc  a]
	cmp.b	d1,d0                            	| [cp   b]
	jeq	l_447f                             	| [jr   z,$447F]
	subq.b	#1,d0                           	| [dec  a]
	subq.b	#1,d0                           	| [dec  a]
	cmp.b	d1,d0                            	| [cp   b]
	jeq	l_447f                             	| [jr   z,$447F]
	subq.b	#1,d0                           	| [dec  a]
	cmp.b	d1,d0                            	| [cp   b]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
l_447f:
	move.b	d4,d0                           	| [ld   a,e]
	cmp.b	d2,d0                            	| [cp   c]
	jeq	l_4486                             	| [jr   z,$4486]
	subq.b	#1,d0                           	| [dec  a]
	cmp.b	d2,d0                            	| [cp   c]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
 * snobee hit by block
l_4486:
	addq.b	#1,(0x0f,a2)                    	|  number of snobee hit by same block (for score) [inc  (ix+$0f)]
	move.b	#0x09,(char_state,a3)                 	| change snobee state to "pushed by block" [ld   (iy+$1f),$09]
	rts                                    	| [ret]

go_down_test_448E:
	jbsr	get_div8_ix_coords_3E78           	| [call get_div8_ix_coords_3E78]
	move.b	d1,d3                           	| [ld   d,b]
	move.b	d2,d4                           	| [ld   e,c]
	jbsr	get_div8_iy_coords_3E8F           	| [call get_div8_iy_coords_3E8F]
	move.b	d3,d0                           	| [ld   a,d]
	cmp.b	d1,d0                            	| [cp   b]
	jeq	l_447f                             	| [jr   z,$447F]
	subq.b	#1,d0                           	| [dec  a]
	cmp.b	d1,d0                            	| [cp   b]
	jeq	l_447f                             	| [jr   z,$447F]
	addq.b	#1,d0                           	| [inc  a]
	addq.b	#1,d0                           	| [inc  a]
	cmp.b	d1,d0                            	| [cp   b]
	jeq	l_447f                             	| [jr   z,$447F]
	addq.b	#1,d0                           	| [inc  a]
	cmp.b	d1,d0                            	| [cp   b]
	jeq	l_447f                             	| [jr   z,$447F]
	rts                                    	| [ret]

go_left_test_44A8:
	jbsr	get_div8_ix_coords_3E78           	| [call get_div8_ix_coords_3E78]
	move.b	d1,d3                           	| [ld   d,b]
	move.b	d2,d4                           	| [ld   e,c]
	jbsr	get_div8_iy_coords_3E8F           	| [call get_div8_iy_coords_3E8F]
	move.b	d4,d0                           	| [ld   a,e]
	cmp.b	d2,d0                            	| [cp   c]
	jeq	l_44c0                             	| [jr   z,$44C0]
	addq.b	#1,d0                           	| [inc  a]
	cmp.b	d2,d0                            	| [cp   c]
	jeq	l_44c0                             	| [jr   z,$44C0]
	subq.b	#1,d0                           	| [dec  a]
	subq.b	#1,d0                           	| [dec  a]
	cmp.b	d2,d0                            	| [cp   c]
	jeq	l_44c0                             	| [jr   z,$44C0]
	subq.b	#1,d0                           	| [dec  a]
	cmp.b	d2,d0                            	| [cp   c]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
l_44c0:
	move.b	d3,d0                           	| [ld   a,d]
	cmp.b	d1,d0                            	| [cp   b]
	jeq	l_44c7                             	| [jr   z,$44C7]
	subq.b	#1,d0                           	| [dec  a]
	cmp.b	d1,d0                            	| [cp   b]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
 * hit by block
l_44c7:
	addq.b	#1,(0x0f,a2)                    	| [inc  (ix+$0f)]
	move.b	#0x09,(char_state,a3)                 	| [ld   (iy+$1f),$09]
	rts                                    	| [ret]

go_right_test_44CF:
	jbsr	get_div8_ix_coords_3E78           	| [call get_div8_ix_coords_3E78]
	move.b	d1,d3                           	| [ld   d,b]
	move.b	d2,d4                           	| [ld   e,c]
	jbsr	get_div8_iy_coords_3E8F           	| [call get_div8_iy_coords_3E8F]
	move.b	d4,d0                           	| [ld   a,e]
	cmp.b	d2,d0                            	| [cp   c]
	jeq	l_44c0                             	| [jr   z,$44C0]
	subq.b	#1,d0                           	| [dec  a]
	cmp.b	d2,d0                            	| [cp   c]
	jeq	l_44c0                             	| [jr   z,$44C0]
	addq.b	#1,d0                           	| [inc  a]
	addq.b	#1,d0                           	| [inc  a]
	cmp.b	d2,d0                            	| [cp   c]
	jeq	l_44c0                             	| [jr   z,$44C0]
	addq.b	#1,d0                           	| [inc  a]
	cmp.b	d2,d0                            	| [cp   c]
	jeq	l_44c0                             	| [jr   z,$44C0]
	rts                                    	| [ret]

l_44e9:
	jbsr	_03_snobee_aligns_for_stunned_3AAD	| [call $03_snobee_aligns_for_stunned_3AAD]
	lea	snobee_1_struct_8D00(pc),a3        	| [ld   iy,snobee_1_struct_8D00]
	move.b	(char_state,a3),d0                    	| [ld   a,(iy+$1f)]
	cmp.b	#0x0A,d0                         	| [cp   $0A]
	jne	l_44fb                             	| [jr   nz,$44FB]
	clr.b	(0x08,a3)                        	| [ld   (iy+$08),$00]
l_44fb:
	lea	snobee_2_struct_8D20(pc),a3        	| [ld   iy,snobee_2_struct_8D20]
	move.b	(char_state,a3),d0                    	| snobee state [ld   a,(iy+$1f)]
	cmp.b	#0x0A,d0                         	| [cp   $0A]
	jne	l_450a                             	| [jr   nz,$450A]
	clr.b	(0x08,a3)                        	| [ld   (iy+$08),$00]
l_450a:
	lea	snobee_3_struct_8D40(pc),a3        	| [ld   iy,snobee_3_struct_8D40]
	move.b	(char_state,a3),d0                    	| [ld   a,(iy+$1f)]
	cmp.b	#0x0A,d0                         	| [cp   $0A]
	jne	l_4519                             	| [jr   nz,$4519]
	clr.b	(0x08,a3)                        	| [ld   (iy+$08),$00]
l_4519:
	lea	snobee_4_struct_8D60(pc),a3        	| [ld   iy,snobee_4_struct_8D60]
	move.b	(char_state,a3),d0                    	| [ld   a,(iy+$1f)]
	cmp.b	#0x0A,d0                         	| [cp   $0A]
	jne	l_4528                             	| [jr   nz,$4528]
	clr.b	(0x08,a3)                        	| [ld   (iy+$08),$00]
l_4528:
	rts                                    	| [ret]
l_4529:
	jbsr	get_div8_ix_coords_3E78           	| [call get_div8_ix_coords_3E78]
	bsr		set_current_cursor_from_bc                	| [ld   (cursor_x_8800),bc]
	btst.b	#4,(0x18,a2)                    	| [bit  4,(ix+$18)]
	jne	diamond_hits_obstacle_45bc                             	| [jp   nz,$45BC]
	move.b	(0x19,a2),d0                    	| [ld   a,(ix+$19)]
	btst.b	#7,d0                           	| [bit  7,a]
	jeq	l_454f                             	| [jr   z,$454F]
	and.b	#0x7F,d0                         	| [and  $7F]
	add.b	d0,d0                            	| [add  a,a]
	clr.w	d3                               	| [ld   d,$00]
	move.b	d0,d3                           	| [ld   e,a]
	lea	egg_location_table_8DC2(pc),a0     	| [ld   hl,egg_location_table_8DC2]
	add.w	d3,a0								| [add  hl,de]
	move.b	d2,(a0)+                         	| [ld   (hl),c]
												| [inc  hl]
	move.b	d1,(a0)                         	| [ld   (hl),b]
	clr.b	(0x19,a2)                        	| [ld   (ix+$19),$00]
l_454f:
	move.b	#0x09,d0                        	| [ld   a,$09]
	move.b	d0,cursor_color_8802            	| [ld   (cursor_color_8802),a]
	jbsr	draw_ice_block_tile_2EFE          	| [call draw_ice_block_tile_2EFE]
	addq.b	#1,(char_state,a2)              	| [inc  (ix+char_state)]
l_455a:
	move.b	#0x04,d1                        	| [ld   b,$04]
	jbsr	sound_18AF                            	| [call $18AF]
	move.b	(0x0f,a2),d0                    	| [ld   a,(ix+$0f)]
	tst.b	d0                               	| [and  a]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	move.b	#0x05,d1                        	| [ld   b,$05]
	jbsr	update_sound_18c7                 	| [call update_sound_18c7]
	move.w	#0x20,d3                      	| [ld   de,$0020]
	move.b	#0x0A,d0                        	| [ld   a,$0A]
	lea	snobee_1_struct_8D00(pc),a3        	| [ld   iy,snobee_1_struct_8D00]
	cmp.b	(char_state,a3),d0                     	| [cp   (iy+$1f)]
	jeq	l_4587                             	| [jr   z,$4587]
	add.w	d3,a3							| [add  iy,de]
	cmp.b	(char_state,a3),d0                     	| [cp   (iy+$1f)]
	jeq	l_4587                             	| [jr   z,$4587]
	add.w	d3,a3							| [add  iy,de]
	cmp.b	(char_state,a3),d0                     	| [cp   (iy+$1f)]
	jeq	l_4587                             	| [jr   z,$4587]
	add.w	d3,a3							| [add  iy,de]
l_4587:
	move.b	(0x0f,a2),d1                    	| [ld   b,(ix+$0f)]
	move.b	d1,(0x1a,a3)                    	| [ld   (iy+$1a),b]
	addq.b	#1,(char_state,a3)                    	| [inc  (iy+$1f)]
	lea	snobee_2_struct_8D20(pc),a3        	| [ld   iy,snobee_2_struct_8D20]
	cmp.b	(char_state,a3),d0                     	| [cp   (iy+$1f)]
	jne	l_45a0                             	| [jr   nz,$45A0]
	clr.b	(0x1a,a3)                        	| [ld   (iy+$1a),$00]
	addq.b	#1,(char_state,a3)                    	| [inc  (iy+$1f)]
l_45a0:
	add.w	d3,a3							| [add  iy,de]
	cmp.b	(char_state,a3),d0                     	| [cp   (iy+$1f)]
	jne	l_45ae                             	| [jr   nz,$45AE]
	clr.b	(0x1a,a3)                        	| [ld   (iy+$1a),$00]
	addq.b	#1,(char_state,a3)                    	| [inc  (iy+$1f)]
l_45ae:
	add.w	d3,a3							| [add  iy,de]
	cmp.b	(char_state,a3),d0                     	| [cp   (iy+$1f)]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	clr.b	(0x1a,a3)                        	| [ld   (iy+$1a),$00]
	addq.b	#1,(char_state,a3)                    	| [inc  (iy+$1f)]
	rts                                    	| [ret]
* diamond hits a wall/another block
diamond_hits_obstacle_45bc:
	clr		d0
	move.b	(0x18,a2),d0                    	| [ld   a,(ix+$18)]
	and.b	#0x0F,d0                         	| [and  $0F]
	add.w	d0,d0                            	| [add  a,a]
												| [ld   d,$00]
												| [ld   e,a]
	lea	diamond_block_1_xy_8DB0(pc),a0     	| [ld   hl,diamond_block_1_xy_8DB0]
	add.w	d0,a0								| [add  hl,de]
	move.b	d2,(a0)+                         	| [ld   (hl),c]
												| [inc  hl]
	move.b	d1,(a0)                         	| [ld   (hl),b]
	move.b	#0x09,d0                        	| [ld   a,$09]
	move.b	d0,cursor_color_8802            	| [ld   (cursor_color_8802),a]
	jbsr	set_diamond_position_2FA9         	| [call set_diamond_position_2FA9]
	clr.b	(x_pos,a2)                       	| [ld   (ix+x_pos),$00]
	clr.b	(y_pos,a2)                       	| [ld   (ix+y_pos),$00]
	jbsr	display_snobee_sprite_33CE        	| [call display_snobee_sprite_33CE]
	addq.b	#1,(char_state,a2)              	| [inc  (ix+char_state)]
	jbsr	l_45eb                            	| [call $45EB]
	jbsr	l_464a                            	| [call $464A]
	jra	l_455a                             	| [jp   $455A]
l_45eb:
	btst.b	#7,(0x16,a2)                    	| [bit  7,(ix+$16)]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	bsr		get_diamond_block_1_xy_8DB0_to_bc  	| [ld   bc,(diamond_block_1_xy_8DB0)]
	jbsr	set_2x2_tile_color_09_4BD8        	| [call set_2x2_tile_color_09_4BD8]
	bsr		get_diamond_block_2_xy_8DB2_to_bc  	| [ld   bc,(diamond_block_2_xy_8DB2)]
	jbsr	set_2x2_tile_color_09_4BD8        	| [call set_2x2_tile_color_09_4BD8]
	bsr		get_diamond_block_3_xy_8DB4_to_bc  	| [ld   bc,(diamond_block_3_xy_8DB4)]
	jbsr	set_2x2_tile_color_09_4BD8        	| [call set_2x2_tile_color_09_4BD8]
	clr.b	(0x17,a2)                        	| [ld   (ix+$17),$00]
	jbsr	l_4612                            	| [call $4612]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	move.b	#0xFF,(0x17,a2)                 	| [ld   (ix+$17),$FF]
	rts                                    	| [ret]
	

	
l_4612:
	bsr		get_diamond_block_1_xy_8DB0_to_bc  	| [ld   bc,(diamond_block_1_xy_8DB0)]
	bsr		get_diamond_block_2_xy_8DB2_to_de  	| [ld   de,(diamond_block_2_xy_8DB2)]
	jbsr	l_462a                            	| [call $462A]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	bsr		get_diamond_block_3_xy_8DB4_to_de  	| [ld   de,(diamond_block_3_xy_8DB4)]
	jbsr	l_462a                            	| [call $462A]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	bsr		get_diamond_block_2_xy_8DB2_to_bc  	| [ld   bc,(diamond_block_2_xy_8DB2)]
l_462a:
	clr.b	d5                               	| [ld   h,$00]
	move.b	d1,d0                           	| [ld   a,b]
	addq.b	#0x02,d0                        	| [add  a,$02]
	sub.b	d3,d0                            	| [sub  d]
	bcc.b	0f
	rts                                    	| [ret  c]
0:
	cmp.b	#0x05,d0                         	| [cp   $05]
	bcs.b	0f
	rts                                    	| [ret  nc]
0:
	subq.b	#0x02,d0                        	| [sub  $02]
	jeq	l_4639                             	| [jr   z,$4639]
	addq.b	#1,d5                           	| [inc  h]
l_4639:
	move.b	d2,d0                           	| [ld   a,c]
	addq.b	#0x02,d0                        	| [add  a,$02]
	sub.b	d4,d0                            	| [sub  e]
	bcc.b	0f
	rts                                    	| [ret  c]
0:
	cmp.b	#0x05,d0                         	| [cp   $05]
	bcs.b	0f
	rts                                    	| [ret  nc]
0:
	subq.b	#0x02,d0                        	| [sub  $02]
	jeq	l_4646                             	| [jr   z,$4646]
	addq.b	#1,d5                           	| [inc  h]
l_4646:
	move.b	#0x01,d0                        	| [ld   a,$01]
	sub.b	d5,d0                            	| [sub  h]
	rts                                    	| [ret]
l_464a:
	btst.b	#7,(0x16,a2)                    	| [bit  7,(ix+$16)]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	jbsr	l_4896                            	| [call $4896]
	jeq	l_4658                             	| [jr   z,$4658]
	jbsr	l_4863                            	| [call $4863]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
* diamonds are aligned
l_4658:
	clr.b	(0x17,a2)                        	| [ld   (ix+$17),$00]
	move.b	#0x03,d1                        	| [ld   b,$03]
	jbsr	play_sfx_1889                     	| diamond align music bonus [call play_sfx_1889]
	move.b	#0x21,d4                        	| stars [ld   e,$21]
	jbsr	draw_borders_2E7A                 	| [call draw_borders_2E7A]
	move.b	#0x40,d1                        	| [ld   b,$40]
l_4668:
	movem.w	d1/d2,-(sp)                    	| [push bc]
	move.l	a4,-(sp)                        	| [push bc]
	move.b	d1,d0                           	| [ld   a,b]
	and.b	#0x03,d0                         	| [and  $03]
	lea	table_479E(pc),a1                  	| [ld   de,table_479E]
	jbsr	indirect_jump_2D8F                	| [call indirect_jump_2D8F]
	move.b	#0x02,d0                        	| [ld   a,$02]
	jbsr	delay_28D1                        	| [call delay_28D1]
	move.l	(sp)+,a4                        	| [pop  bc]
	movem.w	(sp)+,d1/d2                    	| [pop  bc]
	movem.w	d1/d2,-(sp)                    	| [push bc]
	move.l	a4,-(sp)                        	| [push bc]
	move.b	d1,d0                           	| [ld   a,b]
	subq.b	#1,d0                           	| [dec  a]
	and.b	#0x07,d0                         	| [and  $07]
	addq.b	#1,d0                           	| [inc  a]
	jbsr	l_47fe                            	| [call $47FE]
	move.l	(sp)+,a4                        	| [pop  bc]
	movem.w	(sp)+,d1/d2                    	| [pop  bc]
	movem.w	d1/d2,-(sp)                    	| [push bc]
	move.l	a4,-(sp)                        	| [push bc]
	move.b	d1,d2                           	| [ld   c,b]
	jbsr	l_4817                            	| [call $4817]
	move.b	#0x02,d0                        	| [ld   a,$02]
	jbsr	delay_28D1                        	| [call delay_28D1]
	move.l	(sp)+,a4                        	| [pop  bc]
	movem.w	(sp)+,d1/d2                    	| [pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_4668                             	| [djnz $4668]
	jbsr	clear_sprites_31B7                	| [call clear_sprites_31B7]
	jbsr	l_0f98                            	| [call $0F98]
	lea	table_476C(pc),a0                  	| [ld   hl,table_476C]
	jbsr	erase_rectangular_char_zone_0F2E  	| [call erase_rectangular_char_zone_0F2E]
	lea	table_476C+0x79-0x6C(pc),a0        	| [ld   hl,table_476C+$79-$6C]
	btst.b	#7,(0x16,a2)                    	| 10000 [bit  7,(ix+$16)]
	jeq	l_46a7                             	| [jr   z,$46A7]
	lea	table_476C+0x88-0x6C(pc),a0        	| 5000 [ld   hl,table_476C+$88-$6C]
l_46a7:
	jbsr	print_line_typewriter_style_29F4  	| [call print_line_typewriter_style_29F4]
	lea	table_476C+0x71-0x6C(pc),a0        	| bonus [ld   hl,table_476C+$71-$6C]
	jbsr	print_line_typewriter_style_29F4  	| [call print_line_typewriter_style_29F4]
	lea	table_476C+0x81-0x6C(pc),a0        	| pts [ld   hl,table_476C+$81-$6C]
	jbsr	print_line_typewriter_style_29F4  	| [call print_line_typewriter_style_29F4]
	move.b	#0x2A,d0                        	| [ld   a,$2A]
	jbsr	delay_28D1                        	| [call delay_28D1]
	move.b	#0x07,d1                        	| [ld   b,$07]
	jbsr	update_sound_18c7                 	| [call update_sound_18c7]
	move.b	#0x64,d1                        	| [ld   b,$64]
	move.w	#0x03E8,d6                      	| 1000 [ld   hl,$03E8]
	btst.b	#7,(0x16,a2)                    	| [bit  7,(ix+$16)]
	jeq	l_46d0                             	| [jr   z,$46D0]
	move.b	#0x32,d1                        	| [ld   b,$32]
	move.w	#0x01F4,d6                      	| 500 [ld   hl,$01F4]
l_46d0:
	movem.w	d1/d2,-(sp)                    	| [push bc]

	move.l	d6,-(sp)                        	| [push hl]
	move.b	d1,d0                           	| [ld   a,b]
	and.b	#0x03,d0                         	| [and  $03]
	bne	0f
	jbsr	l_474f                            	| [call z,$474F]
0:
	move.w	#0x000A,d3                      	| [ld   de,$000A]
	jbsr	add_to_current_player_score_28AF  	| [call add_to_current_player_score_28AF]
	move.l	(sp)+,d6                        	| [pop  hl]
	move.w	#0x000A,d3                      	| [ld   de,$000A]
												| [xor  a]
	sub.w	d3,d6 							 | [sbc  hl,de]

	move.l	d6,-(sp)                        	| [push hl]
	jbsr	convert_number_2B40               	| [call convert_number_2B40]
										| [ld   h,$12]
										| [ld   l,$0A]
	move.w	#0x0A12,cursor_x_8800                	| [ld   (cursor_x_8800),hl]
	jbsr	write_5_digits_to_screen_2C54     	| [call write_5_digits_to_screen_2C54]
	move.b	#0x02,d0                        	| [ld   a,$02]
	jbsr	delay_28D1                        	| [call delay_28D1]
	move.l	(sp)+,a0                        	| [pop  hl]
	movem.w	(sp)+,d1/d2                    	| [pop  bc]
	movem.w	d1/d2,-(sp)                    	| [push bc]

	move.l	a0,-(sp)                        	| [push hl]
	move.b	d1,d2                           	| [ld   c,b]
	jbsr	l_4817                            	| [call $4817]
	move.l	(sp)+,a0                        	| [pop  hl]
	movem.w	(sp)+,d1/d2                    	| [pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_46d0                             	| [djnz $46D0]
	st.b	d1                                	| [ld   b,$FF]
	jbsr	update_sound_18c7                 	| [call update_sound_18c7]
	move.b	#0x08,d1                        	| [ld   b,$08]
	jbsr	update_sound_18c7                 	| [call update_sound_18c7]
	move.b	#0x40,d0                        	| [ld   a,$40]
	jbsr	delay_28D1                        	| [call delay_28D1]
	jbsr	l_0fba                            	| [call $0FBA]
	move.b	#0xFF,(0x16,a2)                 	| [ld   (ix+$16),$FF]
	move.b	#0x09,d0                        	| [ld   a,$09]
	jbsr	l_47fe                            	| [call $47FE]
	jbsr	draw_borders_2E6A                 	| [call draw_borders_2E6A]

	move.l	a2,-(sp)                        	| [push ix]
	lea	snobee_1_struct_8D00(pc),a2        	| [ld   ix,snobee_1_struct_8D00]
	jbsr	l_4790                            	| [call $4790]
	lea	snobee_2_struct_8D20(pc),a2        	| [ld   ix,snobee_2_struct_8D20]
	jbsr	l_4790                            	| [call $4790]
	lea	snobee_3_struct_8D40(pc),a2        	| [ld   ix,snobee_3_struct_8D40]
	jbsr	l_4790                            	| [call $4790]
	lea	snobee_4_struct_8D60(pc),a2        	| [ld   ix,snobee_4_struct_8D60]
	jbsr	l_4790                            	| [call $4790]
	lea	pengo_struct_8D80(pc),a2           	| [ld   ix,pengo_struct_8D80]
	jbsr	display_snobee_sprite_33CE        	| [call display_snobee_sprite_33CE]
	move.b	#0x20,d0                        	| [ld   a,$20]
	jbsr	delay_28D1                        	| [call delay_28D1]
	move.l	(sp)+,a2                        	| [pop  ix]
	rts                                    	| [ret]
l_474f:
	btst.b	#2,d1                           	| [bit  2,b]
	jeq	l_4767                             	| [jr   z,$4767]
	movem.w	d1/d2,-(sp)                    	| [push bc]
	move.b	#0x24,d2                        	| [ld   c,$24]
l_4756:
	move.b	#0x0B,d0                        	| [ld   a,$0B]
	move.b	d0,cursor_color_8802            	| [ld   (cursor_color_8802),a]
	jbsr	get_nb_lives_289E                 	| [call get_nb_lives_289E]
	subq.b	#1,d0                           	| [dec  a]
	jeq	l_4765                             	| [jr   z,$4765]
	move.b	d0,d1                           	| [ld   b,a]
	jbsr	l_2d26                            	| [call $2D26]
l_4765:
	movem.w	(sp)+,d1/d2                    	| [pop  bc]
	rts                                    	| [ret]
l_4767:
	movem.w	d1/d2,-(sp)                    	| [push bc]
	move.b	#0x28,d2                        	| [ld   c,$28]
	jra	l_4756                             	| [jr   $4756]

table_476C:
	.byte	0x09,0x10,0x10,0x0A,0x05,0x0A,0x11,0x18,0x42,0x4F,0x4E,0x55,0xD3,0x0B,0x12,0x10   |  .......BONUÓ...
	.byte	0x31,0x30,0x30,0x30,0xB0,0x0E,0x13,0x19,0x50,0x54,0x53,0xBA,0x0B,0x12,0x10,0x20   | 1000°...PTSº...
	.byte	0x35,0x30,0x30
	.align	2
l_4790:
	jbsr	display_snobee_sprite_33CE        	| [call display_snobee_sprite_33CE]
	move.b	#0x02,d0                        	| [ld   a,$02]
	cmp.b	(char_state,a2),d0               	| [cp   (ix+char_state)]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	move.b	#0x03,(char_state,a2)           	| [ld   (ix+char_state),$03]
	rts                                    	| [ret]

table_479E:
	.long	l_47d2
	.long	l_47e8
	.long	l_47a6
	.long	l_47bc


l_47a6:
	bsr		get_diamond_block_1_xy_8DB0_to_bc  	| [ld   bc,(diamond_block_1_xy_8DB0)]
	jbsr	set_2x2_tile_color_09_4BD8        	| [call set_2x2_tile_color_09_4BD8]
	bsr		get_diamond_block_2_xy_8DB2_to_bc  	| [ld   bc,(diamond_block_2_xy_8DB2)]
	jbsr	set_2x2_tile_color_0C_4BC2        	| [call set_2x2_tile_color_0C_4BC2]
	bsr		get_diamond_block_3_xy_8DB4_to_bc  	| [ld   bc,(diamond_block_3_xy_8DB4)]
	jbsr	set_2x2_tile_color_0C_4BC2        	| [call set_2x2_tile_color_0C_4BC2]
	rts                                    	| [ret]

l_47bc:
	bsr		get_diamond_block_1_xy_8DB0_to_bc  	| [ld   bc,(diamond_block_1_xy_8DB0)]
	jbsr	set_2x2_tile_color_0C_4BC2        	| [call set_2x2_tile_color_0C_4BC2]
	bsr		get_diamond_block_2_xy_8DB2_to_bc  	| [ld   bc,(diamond_block_2_xy_8DB2)]
	jbsr	set_2x2_tile_color_09_4BD8        	| [call set_2x2_tile_color_09_4BD8]
	bsr		get_diamond_block_3_xy_8DB4_to_bc  	| [ld   bc,(diamond_block_3_xy_8DB4)]
	jbsr	set_2x2_tile_color_0C_4BC2        	| [call set_2x2_tile_color_0C_4BC2]
	rts                                    	| [ret]

l_47d2:
	bsr		get_diamond_block_1_xy_8DB0_to_bc  	| [ld   bc,(diamond_block_1_xy_8DB0)]
	jbsr	set_2x2_tile_color_0C_4BC2        	| [call set_2x2_tile_color_0C_4BC2]
	bsr		get_diamond_block_2_xy_8DB2_to_bc  	| [ld   bc,(diamond_block_2_xy_8DB2)]
	jbsr	set_2x2_tile_color_0C_4BC2        	| [call set_2x2_tile_color_0C_4BC2]
	bsr		get_diamond_block_3_xy_8DB4_to_bc  	| [ld   bc,(diamond_block_3_xy_8DB4)]
	jbsr	set_2x2_tile_color_09_4BD8        	| [call set_2x2_tile_color_09_4BD8]
	rts                                    	| [ret]

l_47e8:
	bsr		get_diamond_block_1_xy_8DB0_to_bc  	| [ld   bc,(diamond_block_1_xy_8DB0)]
	jbsr	set_2x2_tile_color_09_4BD8        	| [call set_2x2_tile_color_09_4BD8]
	bsr		get_diamond_block_2_xy_8DB2_to_bc  	| [ld   bc,(diamond_block_2_xy_8DB2)]
	jbsr	set_2x2_tile_color_09_4BD8        	| [call set_2x2_tile_color_09_4BD8]
	bsr		get_diamond_block_3_xy_8DB4_to_bc  	| [ld   bc,(diamond_block_3_xy_8DB4)]
	jbsr	set_2x2_tile_color_09_4BD8        	| [call set_2x2_tile_color_09_4BD8]
	rts                                    	| [ret]

* change colors when diamonds are aligned
l_47fe:
	move.w	#0x8462,d6                      	| [ld   hl,$8462]
	move.b	#0x1A,d1                        	| [ld   b,$1A]
l_4806:
	move.w	d1,-(sp)                    	| [push bc]
	move.w	#0x001D-1,d1                      	| [ld   bc,$001D]
	jbsr	osd_w_colorram			      	| [ld   (hl),a]
	addq.w	#1,d6
	dbf		d1,0b

	addq.w	#3,d6                           	| [inc  hl]
	move.w	(sp)+,d1                    	| [pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_4806                             	| [djnz $4806]
	rts                                    	| [ret]

l_4817:
	move.w	#0x87A1,d6                      	| [ld   hl,$87A1]
												| [ld   de,$0020]
	move.b	#0x0E,d1                        	| [ld   b,$0E]
l_481f:
	move.b	d2,d0                           	| [ld   a,c]
	and.b	#0x07,d0                         	| [and  $07]
	add.b	#0x16,d0                         	| [add  a,$16]
	jbsr		osd_w_colorram                         	| [ld   (hl),a]
	                               	| [and  a]
	sub.w	#0x20,d6				| [sbc  hl,de]
	jbsr		osd_w_colorram                         	| [ld   (hl),a]
	                               	| [and  a]
	sub.w	#0x20,d6				| [sbc  hl,de]
	addq.b	#1,d2                           	| [inc  c]
	subq.b	#1,d1                           	| [...]
	jne	l_481f                             	| [djnz $481F]
	move.w	#0x8442,d6                      	| [ld   hl,$8442]
	move.b	#0x0F,d1                        	| [ld   b,$0F]
l_4834:
	move.b	d2,d0                           	| [ld   a,c]
	and.b	#0x07,d0                         	| [and  $07]
	add.b	#0x16,d0                         	| [add  a,$16]
	jbsr		osd_w_colorram
	addq.w	#1,d6                         	| [ld   (hl),a]
	jbsr		osd_w_colorram
	addq.w	#1,d6                         	| [ld   (hl),a]
	                           	| [inc  hl]
	addq.b	#1,d2                           	| [inc  c]
	subq.b	#1,d1                           	| [...]
	jne	l_4834                             	| [djnz $4834]
	move.w	#0x8402,d6                      	| [ld   hl,$8402]
	move.b	#0x0E,d1                        	| [ld   b,$0E]
l_4845:
	move.b	d2,d0                           	| [ld   a,c]
	and.b	#0x07,d0                         	| [and  $07]
	add.b	#0x16,d0                         	| [add  a,$16]
	jbsr		osd_w_colorram
	addq.w	#1,d6                         	| [ld   (hl),a]
	jbsr		osd_w_colorram
	addq.w	#1,d6                         	| [ld   (hl),a]
	addq.b	#1,d2                           	| [inc  c]
	subq.b	#1,d1                           	| [...]
	jne	l_4845                             	| [djnz $4845]
	move.w	#0x87BF,d6                      	| [ld   hl,$87BF]
	move.b	#0x0F,d1                        	| [ld   b,$0F]
l_4856:
	move.b	d2,d0                           	| [ld   a,c]
	and.b	#0x07,d0                         	| [and  $07]
	add.b	#0x16,d0                         	| [add  a,$16]
	jbsr		osd_w_colorram
	subq.w	#1,d6                         	| [ld   (hl),a]
	jbsr		osd_w_colorram
	subq.w	#1,d6                         	| [ld   (hl),a]
	addq.b	#1,d2                           	| [inc  c]
	subq.b	#1,d1                           	| [...]
	jne	l_4856                             	| [djnz $4856]
	rts                                    	| [ret]
l_4863:
	lea	diamond_block_1_xy_8DB0,a0     	| [ld   hl,diamond_block_1_xy_8DB0]
	move.b	(a0),d0                         	| [ld   a,(hl)]
	addq.w	#2,a0                           	| [inc  hl]
										| [inc  hl]
	cmp.b	(a0),d0                          	| [cp   (hl)]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	addq.w	#2,a0                           	| [inc  hl]
										| [inc  hl]
	cmp.b	(a0),d0                          	| [cp   (hl)]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	jbsr	l_48d0                            	| [call $48D0]
	lea	moving_block_struct_8DA0+0x11,a0	| [ld   hl,moving_block_struct_8DA0+$11]
	move.b	(a0),d0                         	| [ld   a,(hl)]
	add.w	#0x20,a0							| [add  hl,de]
	subq.b	#2,d0                           	| [dec  a]
	                           	| [dec  a]
	cmp.b	(a0),d0                          	| [cp   (hl)]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	addq.w	#2,a0                           	| [inc  hl]
	subq.b	#2,d0                           	| [dec  a]
	cmp.b	(a0),d0                          	| [cp   (hl)]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	move.b	diamond_block_1_xy_8DB0,d0      	| [ld   a,(diamond_block_1_xy_8DB0)]
	cmp.b	#0x01,d0                         	| [cp   $01]
	jeq	l_4890                             	| [jr   z,$4890]
	cmp.b	#0x19,d0                         	| [cp   $19]
	jeq	l_4890                             	| [jr   z,$4890]
	clr.b	d0                               	| [xor  a]
	rts                                    	| [ret]
l_4890:
	move.b	#0xFF,(0x16,a2)                 	| [ld   (ix+$16),$FF]
	clr.b	d0                               	| [xor  a]
	rts                                    	| [ret]
l_4896:
	lea	moving_block_struct_8DA0+0x11,a0	| [ld   hl,moving_block_struct_8DA0+$11]
	move.b	(a0),d0                         	| [ld   a,(hl)]
	addq.w	#2,a0                           	| [inc  hl]
	cmp.b	(a0),d0                          	| [cp   (hl)]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	addq.w	#2,a0                           	| [inc  hl]
	cmp.b	(a0),d0                          	| [cp   (hl)]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	jbsr	l_48c3                            	| [call $48C3]
	lea	diamond_block_1_xy_8DB0,a0     	| [ld   hl,diamond_block_1_xy_8DB0]
	                      	| [ld   de,$0002]
	move.b	(a0),d0                         	| [ld   a,(hl)]
	addq.w	#2,a0						| [add  hl,de]
	subq.b	#2,d0                           	| [dec  a]
	                           	| [dec  a]
	cmp.b	(a0),d0                          	| [cp   (hl)]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	addq.w	#2,a0						| [add  hl,de]
	subq.b	#2,d0                           	| [dec  a]
	                           	| [dec  a]
	cmp.b	(a0),d0                          	| [cp   (hl)]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	move.b	moving_block_struct_8DA0+0x11,d0	| [ld   a,(moving_block_struct_8DA0+$11)]
	cmp.b	#0x02,d0                         	| [cp   $02]
	jeq	l_4890                             	| [jr   z,$4890]
	cmp.b	#0x1E,d0                         	| [cp   $1E]
	jeq	l_4890                             	| [jr   z,$4890]
	clr.b	d0                               	| [xor  a]
	rts                                    	| [ret]
l_48c3:
	lea	diamond_block_1_xy_8DB0(pc),a0     	| [ld   hl,diamond_block_1_xy_8DB0]
	move.b	#0x02,d1                        	| [ld   b,$02]
l_48c8:
	movem.w	d1/d2,-(sp)                    	| [push bc]
	jbsr	l_48dd                            	| [call $48DD]
	movem.w	(sp)+,d1/d2                    	| [pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_48c8                             	| [djnz $48C8]
	rts                                    	| [ret]
l_48d0:
	lea	diamond_block_1_xy_8DB0(pc),a0     	| [ld   hl,diamond_block_1_xy_8DB0]
	move.b	#0x02,d1                        	| [ld   b,$02]
l_48d5:
	movem.w	d1/d2,-(sp)                    	| [push bc]
	jbsr	l_48fb                            	| [call $48FB]
	movem.w	(sp)+,d1/d2                    	| [pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_48d5                             	| [djnz $48D5]
	rts                                    	| [ret]
l_48dd:

	move.l	a0,-(sp)                        	| [push hl]
	move.b	(a0)+,d4                         	| [ld   e,(hl)]
	                           	| [inc  hl]
	move.b	(a0)+,d3                         	| [ld   d,(hl)]
	                           	| [inc  hl]
	move.b	d4,d0                           	| [ld   a,e]
l_48e3:
	cmp.b	(a0),d0                          	| [cp   (hl)]
	jcs	l_48f0                             	| [jr   c,$48F0]
	addq.w	#2,a0                           	| [inc  hl]
										| [inc  hl]
l_48e8:
	subq.b	#1,d1                           	| [...]
	jne	l_48e3                             	| [djnz $48E3]
	move.l	(sp)+,a0                        	| [pop  hl]
	move.b	d4,(a0)+                         	| [ld   (hl),e]
	                           	| [inc  hl]
	move.b	d3,(a0)+                         	| [ld   (hl),d]
	                           	| [inc  hl]
	rts                                    	| [ret]
l_48f0:
	move.b	(a0),d0                         	| [ld   a,(hl)]
	move.b	d4,(a0)+                         	| [ld   (hl),e]
	move.b	d0,d4                           	| [ld   e,a]
	                           	| [inc  hl]
	move.b	(a0),d0                         	| [ld   a,(hl)]
	move.b	d3,(a0)+                         	| [ld   (hl),d]
	move.b	d0,d3                           	| [ld   d,a]
	                           	| [inc  hl]
	move.b	d4,d0                           	| [ld   a,e]
	jra	l_48e8                             	| [jr   $48E8]
l_48fb:

	move.l	a0,-(sp)                        	| [push hl]
	move.b	(a0)+,d4                         	| [ld   e,(hl)]
	                           	| [inc  hl]
	move.b	(a0)+,d3                         	| [ld   d,(hl)]
	                           	| [inc  hl]
	move.b	d3,d0                           	| [ld   a,d]
l_4901:
	addq.w	#1,a0                           	| [inc  hl]
	cmp.b	(a0),d0                          	| [cp   (hl)]
	jcs	l_490e                             	| [jr   c,$490E]
	addq.w	#1,a0                           	| [inc  hl]
l_4906:
	subq.b	#1,d1                           	| [...]
	jne	l_4901                             	| [djnz $4901]
	move.l	(sp)+,a0                        	| [pop  hl]
	move.b	d4,(a0)+                         	| [ld   (hl),e]
											| [inc  hl]
	move.b	d3,(a0)+                         	| [ld   (hl),d]
											| [inc  hl]
	rts                                    	| [ret]
l_490e:
	subq.b	#1,a0                           	| [dec  hl]
	move.b	(a0),d0                         	| [ld   a,(hl)]
	move.b	d4,(a0)+                         	| [ld   (hl),e]
	move.b	d0,d4                           	| [ld   e,a]
	                           	| [inc  hl]
	move.b	(a0),d0                         	| [ld   a,(hl)]
	move.b	d3,(a0)+                         	| [ld   (hl),d]
	move.b	d0,d3                           	| [ld   d,a]
									| [inc  hl]
	jra	l_4906                             	| [jr   $4906]


snobee_block_break_4919:
	lea	breaking_block_slots_8CC0(pc),a2   	| [ld   ix,breaking_block_slots_8CC0]
	move.b	#0x05,d1                        	| [ld   b,$05]
l_491f:
	movem.w	d1/d2,-(sp)                    	| [push bc]
	btst.b	#7,(x_pos,a2)                   	| [bit  7,(ix+x_pos)]
	beq	0f
	jbsr	l_4930                            	| [call nz,$4930]
0:
											| [ld   de,$0006]
	addq.w	#6,a2							| [add  ix,de]
	movem.w	(sp)+,d1/d2                    	| [pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_491f                             	| [djnz $491F]
	rts                                    	| [ret]
l_4930:
	move.b	(char_id,a2),d0                 	| [ld   a,(ix+char_id)]
	lea	table_4939(pc),a1                  	| [ld   de,table_4939]
	jra	indirect_jump_2D8F                 	| [jp   indirect_jump_2D8F]
table_4939:
	.long	do_nothing_3358
	.long	l_494d
	.long	l_4967
	.long	l_4972
	.long	l_4a17
	.long	l_4a22
	.long	l_4a77
	.long	l_4a82
	.long	l_4ac6
	.long	l_4ae5
	.long	l_4b75


l_494d:
	btst.b	#6,(0x00,a2)                    	| [bit  6,(ix+$00)]
	jeq	l_4960                             	| [jr   z,$4960]
	lea	remaining_eggs_to_hatch_8DC1,a0	| [ld   hl,remaining_eggs_to_hatch_8DC1]
	move.b	(a0),d0                         	| [ld   a,(hl)]
	move.b	d0,(0x04,a2)                    	| [ld   (ix+$04),a]
	subq.b	#1,(a0)                         	| [dec  (hl)]
	move.b	#0x04,d1                        	| [ld   b,$04]
	jbsr	update_sound_18c7                 	| [call update_sound_18c7]
l_4960:
	addq.b	#1,(0x05,a2)                    	| [inc  (ix+$05)]
	lea	maze_data_8C20+0x3F,a0         	| [ld   hl,maze_data_8C20+$3F]
	subq.b	#1,(a0)                         	| [dec  (hl)]
l_4967:
	move.b	(0x00,a2),d0                    	| [ld   a,(ix+$00)]
	or.b	#0x02,d0                          	| [or   $02]
	move.b	d0,(0x00,a2)                    	| [ld   (ix+$00),a]
	addq.b	#1,(0x05,a2)                    	| [inc  (ix+$05)]
l_4972:
	move.b	counter_lsb_8824,d0             	| [ld   a,(counter_lsb_8824)]
	and.b	#0x1F,d0                         	| [and  $1F]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
 * counter 1 out of 32 broken block shatters
	subq.b	#1,(0x00,a2)                    	| [dec  (ix+$00)]
	move.b	(0x00,a2),d0                    	| [ld   a,(ix+$00)]
	and.b	#0x07,d0                         	| [and  $07]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	move.b	(0x01,a2),d0                    	| [ld   a,(ix+$01)]
	subq.b	#1,d0                           	| [dec  a]
	jeq	l_49c8                             	| [jr   z,$49C8]
	move.b	d0,(0x01,a2)                    	| [ld   (ix+$01),a]
	subq.b	#1,(0x05,a2)                    	| [dec  (ix+$05)]
	move.b	d0,d1                           	| [ld   b,a]
	move.b	#0x08,d0                        	| [ld   a,$08]
	sub.b	d1,d0                            	| [sub  b]
	btst.b	#6,(0x00,a2)                    	| [bit  6,(ix+$00)]
	jeq	l_499d                             	| [jr   z,$499D]
	cmp.b	#0x06,d0                         	| [cp   $06]
	jcs	l_499d                             	| [jr   c,$499D]
	move.b	#0x08,d0                        	| [ld   a,$08]
l_499d:
	add.b	d0,d0                            	| [add  a,a]
	add.b	d0,d0                            	| [add  a,a]
	add.b	#0x60,d0                         	| [add  a,$60]
	move.w	d0,-(sp)                        	| [push af]
	move.b	(0x02,a2),d2                    	| [ld   c,(ix+$02)]
	move.b	(0x03,a2),d1                    	| [ld   b,(ix+$03)]
	bsr		set_current_cursor_from_bc                	| [ld   (cursor_x_8800),bc]
	jbsr	convert_coords_to_screen_address_296F	| [call convert_coords_to_screen_address_296F]
	move.b	#0x1C,d0                        	| [ld   a,$1C]
	cmp.b	(a0),d0                          	| [cp   (hl)]
	jeq	l_49be                             	| [jr   z,$49BE]
	move.b	#0x09,d0                        	| [ld   a,$09]
	move.b	d0,cursor_color_8802            	| [ld   (cursor_color_8802),a]
	move.w	(sp)+,d0                        	| [pop  af]
	jbsr	set_2x2_tile_2F00                 	| [call set_2x2_tile_2F00]
	rts                                    	| [ret]
l_49be:
	move.w	(sp)+,d0                        	| [pop  af]
	clr.b	(0x00,a2)                        	| [ld   (ix+$00),$00]
	clr.b	(0x05,a2)                        	| [ld   (ix+$05),$00]
	rts                                    	| [ret]
l_49c8:
	btst.b	#6,(0x00,a2)                    	| [bit  6,(ix+$00)]
	jne	l_49ee                             	| [jr   nz,$49EE]
	move.b	(0x02,a2),d2                    	| [ld   c,(ix+$02)]
	move.b	(0x03,a2),d1                    	| [ld   b,(ix+$03)]
	jbsr	clear_2x2_tiles_at_current_pos_43A9	| [call clear_2x2_tiles_at_current_pos_43A9]
	btst.b	#5,(0x00,a2)                    	| [bit  5,(ix+$00)]
	lea	0x0003(pc),a1                      	| [ld   de,$0003]

	move.l	a2,-(sp)                        	| [push ix]
	beq	0f
	jbsr	add_to_current_player_score_28AF  	| [call nz,add_to_current_player_score_28AF]
0:
	move.l	(sp)+,a2                        	| [pop  ix]
	clr.b	(0x00,a2)                        	| [ld   (ix+$00),$00]
	clr.b	(0x05,a2)                        	| [ld   (ix+$05),$00]
	rts                                    	| [ret]
l_49ee:
	lea	total_eggs_to_hatch_8DC0(pc),a0    	| [ld   hl,total_eggs_to_hatch_8DC0]
	move.b	(a0),d0                         	| [ld   a,(hl)]
	move.b	d0,d1                           	| [ld   b,a]
	move.b	#0x0C,d0                        	| [ld   a,$0C]
	sub.b	d1,d0                            	| [sub  b]
	lsr.b	#1,d0                            	| [srl  a]
	add.b	#0x08,d0                         	| [add  a,$08]
	move.b	d0,d2                           	| [ld   c,a]
	move.b	(0x04,a2),d0                    	| [ld   a,(ix+$04)]
	sub.b	d1,d0                            	| [sub  b]
	neg.b	d0                               	| [neg]
	add.b	d2,d0                            	| [add  a,c]
	clr.b	d5                               	| [ld   h,$00]
	move.b	d0,d6                           	| [ld   l,a]
	bsr		set_current_cursor_from_hl        	| [ld   (cursor_x_8800),hl]
												| [ld   (cursor_x_8800),hl]
	move.b	d5,(0x01,a2)                    	| [ld   (ix+$01),h]
	move.b	d6,(0x04,a2)                    	| [ld   (ix+$04),l]
	move.b	#0x17,d0                        	| [ld   a,$17]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	addq.b	#1,(0x05,a2)                    	| [inc  (ix+$05)]
	rts                                    	| [ret]
l_4a17:
	move.b	(0x00,a2),d0                    	| [ld   a,(ix+$00)]
	or.b	#0x0F,d0                          	| [or   $0F]
	move.b	d0,(0x00,a2)                    	| [ld   (ix+$00),a]
	addq.b	#1,(0x05,a2)                    	| [inc  (ix+$05)]
l_4a22:
	move.b	counter_lsb_8824,d0             	| [ld   a,(counter_lsb_8824)]
	and.b	#0x0F,d0                         	| [and  $0F]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
 * counter 1 out of 16 eggs hatching
	move.b	(0x03,a2),d1                    	| [ld   b,(ix+$03)]
	move.b	(0x02,a2),d2                    	| [ld   c,(ix+$02)]
	btst.b	#0,(0x00,a2)                    	| [bit  0,(ix+$00)]
	jeq	l_4a3b                             	| [jr   z,$4A3B]
	move.b	#0x10,d0                        	| [ld   a,$10]
	jbsr	set_2x2_tile_color_4BC4           	| [call set_2x2_tile_color_4BC4]
	jra	l_4a40                             	| [jr   $4A40]
l_4a3b:
	move.b	#0x0C,d0                        	| [ld   a,$0C]
	jbsr	set_2x2_tile_color_4BC4           	| [call set_2x2_tile_color_4BC4]
l_4a40:
	subq.b	#1,(0x00,a2)                    	| [dec  (ix+$00)]
	move.b	(0x00,a2),d0                    	| [ld   a,(ix+$00)]
	and.b	#0x0F,d0                         	| [and  $0F]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	move.b	(0x01,a2),d5                    	| [ld   h,(ix+$01)]
	move.b	(0x04,a2),d6                    	| [ld   l,(ix+$04)]
	bsr		set_current_cursor_from_hl        	| [ld   (cursor_x_8800),hl]
	move.b	#0x20,d0                        	| [ld   a,$20]
	jbsr	set_tile_at_current_pos_293C      	| [call set_tile_at_current_pos_293C]
	btst.b	#5,(0x00,a2)                    	| [bit  5,(ix+$00)]
	jne	l_4a6f                             	| [jr   nz,$4A6F]
	move.b	(0x03,a2),d1                    	| [ld   b,(ix+$03)]
	move.b	(0x02,a2),d2                    	| [ld   c,(ix+$02)]
	jbsr	clear_2x2_tiles_at_current_pos_43A9	| [call clear_2x2_tiles_at_current_pos_43A9]
	clr.b	(0x00,a2)                        	| [ld   (ix+$00),$00]
	clr.b	(0x05,a2)                        	| [ld   (ix+$05),$00]
	rts                                    	| [ret]
l_4a6f:
	addq.b	#1,(0x05,a2)                    	| [inc  (ix+$05)]
	move.b	#0x05,(0x01,a2)                 	| [ld   (ix+$01),$05]
	rts                                    	| [ret]
l_4a77:
	move.b	(0x00,a2),d0                    	| [ld   a,(ix+$00)]
	or.b	#0x03,d0                          	| [or   $03]
	move.b	d0,(0x00,a2)                    	| [ld   (ix+$00),a]
	addq.b	#1,(0x05,a2)                    	| [inc  (ix+$05)]
l_4a82:
	move.b	counter_lsb_8824,d0             	| [ld   a,(counter_lsb_8824)]
	and.b	#0x1F,d0                         	| [and  $1F]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
 * counter 1 out of 32 ???
	subq.b	#1,(0x00,a2)                    	| [dec  (ix+$00)]
	move.b	(0x00,a2),d0                    	| [ld   a,(ix+$00)]
	and.b	#0x07,d0                         	| [and  $07]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	move.b	(0x01,a2),d0                    	| [ld   a,(ix+$01)]
	subq.b	#1,d0                           	| [dec  a]
	jeq	l_4ac2                             	| [jr   z,$4AC2]
	move.b	d0,(0x01,a2)                    	| [ld   (ix+$01),a]
	subq.b	#1,(0x05,a2)                    	| [dec  (ix+$05)]
	move.b	d0,d1                           	| [ld   b,a]
	move.b	#0x04,d0                        	| [ld   a,$04]
	sub.b	d1,d0                            	| [sub  b]
	add.b	d0,d0                            	| [add  a,a]
	add.b	d0,d0                            	| [add  a,a]
	add.b	#0x80,d0                         	| [add  a,$80]
	move.b	(0x02,a2),d2                    	| [ld   c,(ix+$02)]
	move.b	(0x03,a2),d1                    	| [ld   b,(ix+$03)]
	bsr		set_current_cursor_from_bc                	| [ld   (cursor_x_8800),bc]
	move.w	d0,-(sp)                        	| [push af]
	move.b	#0x10,d0                        	| [ld   a,$10]
	btst.b	#0,(0x01,a2)                    	| [bit  0,(ix+$01)]
	jeq	l_4aba                             	| [jr   z,$4ABA]
	move.b	#0x0C,d0                        	| [ld   a,$0C]
l_4aba:
	move.b	d0,cursor_color_8802            	| [ld   (cursor_color_8802),a]
	move.w	(sp)+,d0                        	| [pop  af]
	jbsr	set_2x2_tile_2F00                 	| [call set_2x2_tile_2F00]
	rts                                    	| [ret]
l_4ac2:
	addq.b	#1,(0x05,a2)                    	| [inc  (ix+$05)]
	rts                                    	| [ret]
l_4ac6:
	move.b	(0x00,a2),d0                    	| [ld   a,(ix+$00)]
	or.b	#0x08,d0                          	| [or   $08]
	move.b	d0,(0x00,a2)                    	| [ld   (ix+$00),a]
	addq.b	#1,(0x05,a2)                    	| [inc  (ix+$05)]
	move.b	(0x02,a2),d2                    	| [ld   c,(ix+$02)]
	move.b	(0x03,a2),d1                    	| [ld   b,(ix+$03)]
	bsr		set_current_cursor_from_bc        	| [ld   (cursor_x_8800),hl]
	move.b	#0x10,d0                        	| [ld   a,$10]
	move.b	d0,cursor_color_8802            	| [ld   (cursor_color_8802),a]
	move.b	#0x98,d0                        	| [ld   a,$98]
	jbsr	set_2x2_tile_2F00                 	| [call set_2x2_tile_2F00]
l_4ae5:
	move.b	counter_lsb_8824,d0             	| [ld   a,(counter_lsb_8824)]
	and.b	#0x3F,d0                         	| [and  $3F]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
 * counter 1 out of 64
	subq.b	#1,(0x00,a2)                    	| [dec  (ix+$00)]
	move.b	(0x00,a2),d0                    	| [ld   a,(ix+$00)]
	and.b	#0x0F,d0                         	| [and  $0F]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	move.b	(0x02,a2),d2                    	| [ld   c,(ix+$02)]
	move.b	(0x03,a2),d1                    	| [ld   b,(ix+$03)]
	jbsr	clear_2x2_tiles_at_current_pos_43A9	| [call clear_2x2_tiles_at_current_pos_43A9]
	lea	0x0032(pc),a1                      	| [ld   de,$0032]
	jbsr	add_to_current_player_score_28AF  	| [call add_to_current_player_score_28AF]
	clr.b	(0x00,a2)                        	| [ld   (ix+$00),$00]
	clr.b	(0x05,a2)                        	| [ld   (ix+$05),$00]
	rts                                    	| [ret]

l_4b0c:
	lea	moving_block_struct_8DA0(pc),a2    	| [ld   ix,moving_block_struct_8DA0]
	btst.b	#7,(0x17,a2)                    	| [bit  7,(ix+$17)]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	move.b	counter_lsb_8824,d0             	| [ld   a,(counter_lsb_8824)]
	move.b	d0,d1                           	| [ld   b,a]
	and.b	#0x3F,d0                         	| [and  $3F]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
 * counter 1 out of 64
	btst.b	#6,d1                           	| [bit  6,b]
	jeq	l_4b26                             	| [jr   z,$4B26]
	move.b	#0x09,d0                        	| [ld   a,$09]
	jbsr	l_4b2c                            	| [call $4B2C]
	rts                                    	| [ret]
l_4b26:
	move.b	#0x0C,d0                        	| [ld   a,$0C]
	jbsr	l_4b2c                            	| [call $4B2C]
	rts                                    	| [ret]
l_4b2c:
	move.b	(0x10,a2),d2                    	| [ld   c,(ix+$10)]
	move.b	(0x11,a2),d1                    	| [ld   b,(ix+$11)]
	jbsr	set_2x2_tile_color_4BC4           	| [call set_2x2_tile_color_4BC4]
	move.b	(0x12,a2),d2                    	| [ld   c,(ix+$12)]
	move.b	(0x13,a2),d1                    	| [ld   b,(ix+$13)]
	jbsr	set_2x2_tile_color_4BC4           	| [call set_2x2_tile_color_4BC4]
	move.b	(0x14,a2),d2                    	| [ld   c,(ix+$14)]
	move.b	(0x15,a2),d1                    	| [ld   b,(ix+$15)]
	jbsr	set_2x2_tile_color_4BC4           	| [call set_2x2_tile_color_4BC4]
	rts                                    	| [ret]


blink_on_egg_locations_4B48:
	lea	total_eggs_to_hatch_8DC0(pc),a2    	| [ld   ix,total_eggs_to_hatch_8DC0]
	btst.b	#7,(0x1f,a2)                    	| [bit  7,(ix+$1f)]
	bne.b	0f
	rts                                    	| no blink [ret  z]
0:

	btst.b	#4,(0x1f,a2)                    	| [bit  4,(ix+$1f)]
	bne	0f
	jbsr	l_4b5c                            	| [call z,$4B5C]
0:
	jbsr	l_4b69                            	| [call $4B69]
	rts                                    	| [ret]

l_4b5c:
	move.b	(0x1f,a2),d0                    	| [ld   a,(ix+$1f)]
	or.b	#0x0E,d0                          	| [or   $0E]
	move.b	d0,(0x1f,a2)                    	| [ld   (ix+$1f),a]
	bset.b	#4,(0x1f,a2)                    	| [set  4,(ix+$1f)]
	rts                                    	| [ret]

l_4b69:
	move.b	counter_lsb_8824,d0             	| [ld   a,(counter_lsb_8824)]
	and.b	#0x0F,d0                         	| [and  $0F]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
 * counter 1 out of 16:	egg blink
	subq.b	#1,(0x1f,a2)                    	| [dec  (ix+$1f)]
	move.b	(0x1f,a2),d0                    	| [ld   a,(ix+$1f)]
l_4b75:
	and.b	#0x0F,d0                         	| [and  $0F]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	bclr.b	#4,(0x1f,a2)                    	| [res  4,(ix+$1f)]
	move.b	(0x1e,a2),d0                    	| [ld   a,(ix+$1e)]
	subq.b	#1,d0                           	| [dec  a]
	jeq	l_4b89                             	| [jr   z,$4B89]
	move.b	d0,(0x1e,a2)                    	| [ld   (ix+$1e),a]
	jbsr	l_4b9b                            	| [call $4B9B]
	rts                                    	| [ret]

l_4b89:
	clr.b	(0x1f,a2)                        	| [ld   (ix+$1f),$00]
	move.b	moving_block_struct_8DA0+0x16,d0	| [ld   a,(moving_block_struct_8DA0+$16)]
	tst.b	d0                               	| [and  a]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	move.b	#0x80,(char_state,a2)           	| [ld   (ix+char_state),$80]
	move.b	#0x08,(ai_mode,a2)              	| [ld   (ix+ai_mode),$08]
	rts                                    	| [ret]

 * blink loop routine (snobee color)
l_4b9b:
	move.b	(0x00,a2),d1                    	| total number [ld   b,(ix+$00)]
	lea	egg_location_table_8DC2,a0     	| egg location table [ld   hl,egg_location_table_8DC2]
l_4ba1:
	move.w	d1,-(sp)                        	| [push bc]
	move.l	a0,-(sp)                        	| [push hl]
	move.b	(a0)+,d2                         	| get x [ld   c,(hl)]
												| [inc  hl]
	move.b	(a0),d1                         	| get y [ld   b,(hl)]
	move.b	d1,d0                           	| [ld   a,b]
	add.b	d2,d0                            	| [add  a,c]
	jeq	l_4bbb                             	| 0 -> not active anymore [jr   z,$4BBB]
 * active
	move.b	snobee_1_struct_8D00+0x03,d0    	| [ld   a,(snobee_1_struct_8D00+$03)]
	btst.b	#0,(0x1e,a2)                    	| [bit  0,(ix+$1e)]
	bne	0f
	jbsr	set_2x2_tile_color_4BC4           	| [call z,set_2x2_tile_color_4BC4]
0:
	btst.b	#0,(0x1e,a2)                    	| [bit  0,(ix+$1e)]
	beq	0f
	jbsr	set_2x2_tile_color_09_4BD8        	| [call nz,set_2x2_tile_color_09_4BD8]
0:
l_4bbb:
	move.l	(sp)+,a0                        	| [pop  hl]
	move.w	(sp)+,d1                        	| [pop  bc]
	addq.w	#1,a0                           	| [inc  hl]
	addq.w	#1,a0                           	| [inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_4ba1                             	| [djnz $4BA1]
	rts                                    	| [ret]


set_2x2_tile_color_0C_4BC2:
	move.b	#0x0C,d0                        	| [ld   a,$0C]
set_2x2_tile_color_4BC4:
	jbsr	convert_coords_to_screen_attributes_address_4BDC	| [call convert_coords_to_screen_attributes_address_4BDC]
	move.b	d0,(a0)                         	| [ld   (hl),a]
	addq.b	#1,d2                           	| [inc  c]
	jbsr	convert_coords_to_screen_attributes_address_4BDC	| [call convert_coords_to_screen_attributes_address_4BDC]
	move.b	d0,(a0)                         	| [ld   (hl),a]
	addq.b	#1,d1                           	| [inc  b]
	jbsr	convert_coords_to_screen_attributes_address_4BDC	| [call convert_coords_to_screen_attributes_address_4BDC]
	move.b	d0,(a0)                         	| [ld   (hl),a]
	subq.b	#1,d2                           	| [dec  c]
	jbsr	convert_coords_to_screen_attributes_address_4BDC	| [call convert_coords_to_screen_attributes_address_4BDC]
	move.b	d0,(a0)                         	| [ld   (hl),a]
	rts                                    	| [ret]

set_2x2_tile_color_09_4BD8:
	move.b	#0x09,d0                        	| [ld   a,$09]
	jra	set_2x2_tile_color_4BC4            	| [jr   set_2x2_tile_color_4BC4]

convert_coords_to_screen_attributes_address_4BDC:
	move.w	d0,-(sp)                        	| [push af]
	jbsr	convert_coords_to_screen_address_296F	| [call convert_coords_to_screen_address_296F]
	add.w	#0x400,d6                      	| [ld   de,$0400]
										| [add  hl,de]
	move.w	(sp)+,d0                        	| [pop  af]
	rts             
	
handle_pengo_snobee_collisions_4BE6:
	lea	pengo_struct_8D80,a2           	| [ld   ix,pengo_struct_8D80]
	move.b	(char_state,a2),d0              	| [ld   a,(ix+char_state)]
	tst.b	d0                               	| [and  a]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	cmp.b	#0x06,d0                         	| [cp   $06]
	bcs.b	0f
	rts                                    	| [ret  nc]
0:
	jbsr	get_div8_ix_coords_3E78           	| [call get_div8_ix_coords_3E78]
	move.b	d1,d5                           	| [ld   h,b]
	move.b	d2,d6                           	| [ld   l,c]
	* changed the logic, replaced carry test by zero test
	lea	snobee_1_struct_8D00,a2        	| [ld   ix,snobee_1_struct_8D00]
	jbsr	snobee_pengo_collision_test_4C1C  	| [call snobee_pengo_collision_test_4C1C]
	jeq	snobee_collides_pengo_4C2E         	| [jr   c,snobee_collides_pengo_4C2E]
	lea	snobee_2_struct_8D20,a2        	| [ld   ix,snobee_2_struct_8D20]
	jbsr	snobee_pengo_collision_test_4C1C  	| [call snobee_pengo_collision_test_4C1C]
	jeq	snobee_collides_pengo_4C2E         	| [jr   c,snobee_collides_pengo_4C2E]
	lea	snobee_3_struct_8D40,a2        	| [ld   ix,snobee_3_struct_8D40]
	jbsr	snobee_pengo_collision_test_4C1C  	| [call snobee_pengo_collision_test_4C1C]
	jeq	snobee_collides_pengo_4C2E         	| [jr   c,snobee_collides_pengo_4C2E]
	lea	snobee_4_struct_8D60,a2        	| [ld   ix,snobee_4_struct_8D60]
	jbsr	snobee_pengo_collision_test_4C1C  	| [call snobee_pengo_collision_test_4C1C]
	jeq	snobee_collides_pengo_4C2E         	| [jr   c,snobee_collides_pengo_4C2E]
	rts                                    	| [ret]

snobee_pengo_collision_test_4C1C:
	move.b	(char_state,a2),d0              	| [ld   a,(ix+char_state)]
	cmp.b	#0x04,d0                         	| [cp   $04]
	bcs.b	0f
	st.b	d7		| clears Z
	rts                                    	| [ret  nc]
0:
	jbsr	get_div8_ix_coords_3E78           	| [call get_div8_ix_coords_3E78]
	move.b	d1,d3                           	| [ld   d,b]
	lsl.w	#8,d3
	move.b	d2,d3                           	| [ld   e,c]
	jbsr	compare_hl_to_de_2D99             	| [call compare_hl_to_de_2D99]
	rts                                    	| [ret]
	
snobee_collides_pengo_4C2E:
	lea	pengo_struct_8D80,a2           	| [ld   ix,pengo_struct_8D80]
	clr.b	(char_state,a2)                  	| [ld   (ix+char_state),$00]
	move.b	#0xFF,(ai_mode,a2)              	| [ld   (ix+ai_mode),$FF]
	move.b	#0x1A,d0                        	| [ld   a,$1A]
	rol.b	#2,d0                            	| [rlca]
												| [rlca]
	move.b	d0,(animation_frame,a2)         	| [ld   (ix+animation_frame),a]
	jbsr	display_character_sprite_39AB     	| [call display_character_sprite_39AB]
	jbsr	get_nb_lives_289E                 	| [call get_nb_lives_289E]
	subq.b	#1,d0                           	| [dec  a]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	move.b	d0,d1                           	| [ld   b,a]
	move.b	#0x0B,d0                        	| [ld   a,$0B]
	move.b	d0,cursor_color_8802            	| [ld   (cursor_color_8802),a]
	move.b	#0x2C,d2                        	| [ld   c,$2C]
	jbsr	l_2d26                            	| [call $2D26]
	rts                                    	| [ret]

handle_pengo_eats_stunned_snobees_4C55:
	lea	pengo_struct_8D80,a2           	| [ld   ix,pengo_struct_8D80]
	move.b	(char_state,a2),d0              	| [ld   a,(ix+char_state)]
												| [and  a]
	bne.b	0f
	rts                                    	| [ret  z]
0:
	cmp.b	#0x06,d0                         	| [cp   $06]
	bcs.b	0f
	rts                                    	| [ret  nc]
0:
	jbsr	get_div8_ix_coords_3E78           	| [call get_div8_ix_coords_3E78]
	move.b	d1,d6                           	| [ld   h,b]
	lsl.w	#8,d6
	move.b	d2,d6                           	| [ld   l,c]
	lea	snobee_1_struct_8D00,a2        	| [ld   ix,snobee_1_struct_8D00]
	jbsr	l_4c83                            	| [call $4C83]
	lea	snobee_2_struct_8D20,a2        	| [ld   ix,snobee_2_struct_8D20]
	jbsr	l_4c83                        	| [call $4C83]
	lea	snobee_3_struct_8D40,a2        	| [ld   ix,snobee_3_struct_8D40]
	jbsr	l_4c83                        	| [call $4C83]
	lea	snobee_4_struct_8D60,a2        	| [ld   ix,snobee_4_struct_8D60]
	jbsr	l_4c83                            	| [call $4C83]
	rts                                    	| [ret]

l_4c83:
	move.b	(char_state,a2),d0              	| [ld   a,(ix+char_state)]
	cmp.b	#0x04,d0                         	| [cp   $04]
	jeq	l_4c8d                             	| [jr   z,$4C8D]
	cmp.b	#0x05,d0                         	| [cp   $05]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
l_4c8d:
	jbsr	get_div8_ix_coords_3E78           	| [call get_div8_ix_coords_3E78]
	move.b	d1,d3                           	| [ld   d,b]
	lsl.w	#8,d3
	move.b	d2,d3                           	| [ld   e,c]
	jbsr	compare_hl_to_de_2D99             	| [call compare_hl_to_de_2D99]
	beq.b	0f
	rts                                    	| [ret  nz]
0:
	clr.b	(0x09,a2)                        	| [ld   (ix+$09),$00]
	move.b	#0x06,(char_state,a2)           	| [ld   (ix+char_state),$06]
	rts                                    	| [ret]


ice_pack_tiles_6000:
     .byte	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA7,0x00,0x00,0x00,0x00,0x00,0x00,0x00   
     .byte	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00   
     .byte	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00   
     .byte	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00   
     .byte	0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x2B,0x00,0x3F,0x00,0x00,0x00,0x00   
     .byte	0x00,0x00,0x62,0x00,0x00,0x00,0x00,0xE5,0x92,0x02,0x02,0x02,0x02,0x02,0x02,0x00   
     .byte	0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x12,0x2A,0x00,0x3F,0x00,0x00,0x00,0x00   
     .byte	0x00,0x00,0x61,0x70,0x00,0x00,0x00,0x86,0x8F,0x02,0x02,0x02,0x02,0x02,0x02,0xA6   
     .byte	0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x29,0x00,0x3F,0x00,0x00,0x00,0x00   
     .byte	0x00,0x00,0x00,0x6F,0x00,0x00,0x00,0x6A,0x91,0x02,0x02,0x02,0x02,0x02,0x02,0x02   
     .byte	0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x11,0x28,0x3E,0x40,0x4F,0x00,0x00,0x00   
     .byte	0x00,0x00,0x00,0x6E,0x00,0x00,0x00,0x6A,0x8A,0x02,0x02,0x02,0x02,0x02,0x02,0x02   
     .byte	0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x10,0x27,0x3D,0x40,0x4E,0x55,0x50,0x00   
     .byte	0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x69,0x8A,0x02,0x02,0x02,0x02,0x02,0x02,0x02   
     .byte	0xB8,0xBD,0x02,0x02,0x02,0x02,0x02,0xE1,0x0F,0x26,0x00,0x40,0x4D,0x54,0x50,0x00   
     .byte	0x00,0x00,0x00,0x6D,0x00,0x00,0x00,0x6A,0x8A,0x02,0x02,0x02,0x02,0x02,0x02,0x02   
     .byte	0x04,0x04,0xC3,0xC9,0xC9,0xC9,0xD8,0xE0,0x0E,0x25,0x00,0x41,0x4C,0x53,0x50,0x00   
     .byte	0x00,0x00,0x00,0x6C,0x00,0x00,0x00,0x69,0x90,0x02,0x02,0x02,0x02,0x02,0x02,0x02   
     .byte	0x04,0x04,0x04,0x04,0xCD,0xD4,0xD7,0xDF,0xE4,0x24,0x00,0x41,0x4B,0x00,0x4E,0x00   
     .byte	0x00,0x00,0x00,0x6C,0x74,0x00,0x00,0x85,0x8F,0x02,0x02,0x02,0x02,0x02,0x02,0xA5   
     .byte	0xB7,0xB7,0xB7,0xC8,0x01,0x01,0xC2,0xBC,0x0D,0x00,0x00,0x41,0x00,0x00,0x4E,0x00   
     .byte	0x00,0x00,0x00,0x6B,0x73,0x00,0x00,0xE5,0x8E,0x02,0x02,0x02,0x02,0x02,0x02,0x00   
     .byte	0x01,0x01,0x01,0x01,0xC2,0xBC,0x03,0xCC,0x0C,0x23,0x3C,0x45,0x4A,0x00,0x4E,0x00   
     .byte	0x00,0x00,0x00,0x6A,0x02,0x00,0x00,0x84,0x8D,0x02,0x02,0x02,0x02,0x02,0x02,0x00   
     .byte	0x01,0x01,0xC2,0xBC,0x03,0x03,0xCC,0xDE,0x0B,0x22,0x3B,0x44,0x49,0x00,0x4C,0x00   
     .byte	0x00,0x00,0x00,0x69,0x02,0x7A,0x00,0x83,0x8C,0x02,0x02,0x02,0x02,0x02,0xA4,0x00   
     .byte	0xB6,0xBC,0x03,0x03,0x03,0xCC,0xD6,0xDD,0x0A,0x21,0x3A,0x43,0x48,0x00,0x57,0x00   
     .byte	0x00,0x00,0x00,0x69,0x02,0x79,0x00,0x01,0x02,0x02,0x02,0x02,0x02,0x02,0xA3,0x00   
     .byte	0x03,0x03,0x03,0x03,0xCC,0x00,0xD5,0xD2,0xE3,0x20,0x39,0x42,0x47,0x00,0x56,0x00   
     .byte	0x00,0x00,0x00,0x68,0x02,0x78,0x00,0x82,0x02,0x02,0x02,0x02,0x02,0x02,0xA2,0x00   
     .byte	0x03,0x03,0xC1,0xC7,0x00,0xC0,0xD3,0x01,0xE2,0x1F,0x00,0x41,0x46,0x50,0x00,0x00   
     .byte	0x00,0x5D,0x00,0x68,0x02,0x02,0x7D,0x81,0x02,0x02,0x02,0x02,0x02,0x02,0x00,0x00   
     .byte	0xB5,0xBB,0x00,0x00,0xC0,0x03,0xD2,0xD1,0xDB,0x1E,0x38,0x41,0x46,0x4E,0x00,0x00   
     .byte	0x00,0x5C,0x00,0x67,0x72,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x00,0x00   
     .byte	0x00,0x00,0x00,0xC0,0x03,0xD3,0x01,0xD0,0xDA,0x1D,0x37,0x41,0x00,0x52,0x00,0x00   
     .byte	0x00,0x5C,0x00,0x66,0x69,0x77,0x02,0x02,0x02,0x02,0x02,0x9B,0x9D,0xA1,0x00,0x00   
     .byte	0x00,0x00,0xC0,0x03,0x03,0xD2,0xD1,0x04,0xD9,0x02,0x36,0x41,0x00,0x51,0x00,0x00   
     .byte	0x00,0x41,0x00,0x65,0x71,0x76,0x02,0x02,0x02,0x02,0x02,0x9A,0x9C,0xA0,0x00,0x00   
     .byte	0xB4,0xB0,0x03,0x03,0xBA,0x01,0xD0,0xDC,0x02,0x1C,0x35,0x41,0x00,0x4C,0x00,0x00   
     .byte	0x00,0x5F,0x00,0x64,0x00,0x75,0x7C,0x02,0x02,0x02,0x02,0x99,0x00,0x9F,0x00,0x00   
     .byte	0x03,0x03,0x03,0xBA,0x01,0xD1,0x04,0xDB,0x02,0x1B,0x34,0x41,0x00,0x4C,0x00,0x00   
     .byte	0x00,0x5E,0x00,0x64,0x00,0x00,0x7B,0x80,0x02,0x02,0x98,0x00,0x00,0x9E,0x00,0x00   
     .byte	0x03,0x03,0xBA,0x01,0x01,0xD0,0x04,0xDA,0x09,0x1A,0x33,0x41,0x00,0x4C,0x00,0x00   
     .byte	0x00,0x50,0x00,0x5C,0x00,0x00,0x00,0x7F,0x8B,0x02,0x13,0x00,0x00,0x00,0x00,0x00   
     .byte	0x03,0xBA,0x01,0x01,0xCB,0x04,0x04,0xD9,0x08,0x19,0x00,0x41,0x00,0x4E,0x00,0x00   
     .byte	0x5D,0x00,0x5D,0x41,0x00,0x00,0x00,0x4C,0x8A,0x02,0x13,0x00,0x00,0x00,0x00,0x00   
     .byte	0xB3,0x01,0x01,0xC6,0xCA,0x04,0xCF,0x02,0x07,0x18,0x32,0x41,0x00,0x4E,0x00,0x00   
     .byte	0x5C,0x00,0x60,0x63,0x00,0x00,0x00,0x68,0x8A,0x02,0x97,0x00,0x00,0x00,0x00,0x00   
     .byte	0x01,0x01,0x01,0xC5,0x04,0x04,0xCE,0x02,0x02,0x17,0x31,0x41,0x00,0x50,0x00,0x00   
     .byte	0x5B,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x8A,0x02,0x97,0x00,0x00,0x00,0x00,0x00   
     .byte	0x01,0x01,0xBF,0x04,0x04,0xCF,0x02,0x02,0x06,0x00,0x30,0x40,0x00,0x00,0x00,0x00   
     .byte	0x5A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x89,0x02,0x96,0x00,0x00,0x00,0x00,0x00   
     .byte	0xA8,0xAE,0x04,0x04,0x04,0xCE,0x02,0x02,0x05,0x16,0x2F,0x40,0x00,0x00,0x00,0x00   
     .byte	0x59,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x88,0x94,0x41,0x00,0x00,0x00,0x00,0x00   
     .byte	0x04,0x04,0x04,0x04,0xC4,0x02,0x02,0x02,0x02,0x15,0x2E,0x3F,0x00,0x00,0x00,0x00   
     .byte	0x58,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4C,0x93,0x95,0x00,0x00,0x00,0x00,0x00   
     .byte	0x04,0x04,0x04,0xC4,0x02,0x02,0x02,0x02,0x02,0x14,0x2D,0x3F,0x00,0x00,0x00,0x00   
     .byte	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x87,0x00,0x00,0x00,0x00,0x00,0x00,0x00   
     .byte	0x04,0xB9,0xBE,0x02,0x02,0x02,0x02,0x02,0x02,0x13,0x2C,0x3F,0x00,0x00,0x00,0x00   
     .byte	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00   
     .byte	0x00,0x00,0x02,0x02,0x02,0xAD,0x04,0x04,0x04,0x04,0xAC,0x01,0x01,0xAB,0x03,0x03   
     .byte	0x03,0x00,0x00,0x00,0xAA,0x03,0x03,0xA9,0x01,0x01,0x01,0xA8,0x04,0x04,0x00,0x00   
     .byte	0x00,0x00,0x02,0x02,0x02,0x02,0xAD,0x04,0x04,0x04,0xB2,0x01,0x01,0xAB,0x03,0x03   
     .byte	0xB1,0x00,0x00,0x00,0xB0,0x03,0x03,0xAF,0x01,0x01,0x01,0xAE,0x04,0x04,0x00,0x00   


move_table_6400:
     .byte	0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00   
     .byte	0x00,0x00,0x00,0x00,0xA0,0xCA,0xB8,0xBB,0xBB,0x90,0x8B,0xBC,0xCB,0xA8,0xAA,0xAE   
     .byte	0x9A,0x99,0x99,0x9D,0x99,0x80,0xBB,0x88,0xAA,0x88,0xAA,0x99,0x99,0x88,0xDA,0x00   
     .byte	0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x09,0x9B,0xB9,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB   
     .byte	0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB   
     .byte	0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB   
     .byte	0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xFB,0xBB,0xA8,0xAE   
     .byte	0x0A,0xA8,0x8A,0x88,0xB8,0xC8,0xBB,0x09,0x80,0xDA,0x99,0x99,0x99,0x00,0x88,0x08   
     .byte	0xAA,0x9D,0x99,0x89,0xB8,0xBB,0xBB,0xBB,0x9B,0xB9,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB   
     .byte	0xBF,0x9B,0xAA,0xAA,0xAA,0xAA,0x90,0x9A,0xA9,0x9A,0x99,0x99,0x99,0x99,0x99,0x99   
     .byte	0x99,0x09,0x9B,0xB9,0xBB,0x0B,0xB8,0x8B,0x88,0xAA,0xAA,0xAA,0xBE,0xBB,0xBB,0x80   
     .byte	0x88,0x8C,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0xC8,0x88   
     .byte	0x88,0xAE,0x09,0xBB,0xBB,0xBB,0xBB,0xBB,0xFB,0xBB,0x0B,0x99,0x9D,0x09,0xB0,0xAA   
     .byte	0x99,0xB9,0xBB,0xBB,0x80,0xE8,0xAA,0xAA,0x80,0xA8,0xAA,0xAA,0xAA,0x9A,0xD9,0xB0   
     .byte	0x9B,0xB9,0x88,0xBB,0xB9,0x8B,0xAC,0x99,0x9B,0x0A,0xD9,0x99,0x99,0xB0,0xBB,0xBB   
     .byte	0x90,0xBB,0x8B,0x08,0xAA,0xAA,0xAA,0xAA,0x90,0xBB,0xBB,0xBB,0xBB,0x80,0xBB,0xBB   
     .byte	0xBB,0xBB,0xBB,0xBB,0xBB,0x90,0x99,0x09,0x00,0x88,0xBB,0xBB,0x8F,0x99,0xA0,0xBA   
     .byte	0x88,0x88,0x88,0x88,0x0A,0x88,0x88,0x0B,0xBB,0x0B,0x00,0xAA,0x9A,0x99,0x99,0xB0   
     .byte	0x00,0x88,0x88,0x88,0x99,0x99,0x99,0x88,0xBB,0x9D,0x99,0xBB,0x99,0xAA,0xAA,0xAE   
     .byte	0xEA,0xAA,0xAA,0xAA,0xAA,0xAA,0xA9,0xBC,0x9B,0x99,0xA9,0xAA,0x0A,0xA8,0x9D,0x99   
     .byte	0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x99   
     .byte	0x99,0x09,0x8A,0x88,0x88,0x88,0x88,0xC8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00   
     .byte	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00   
     .byte	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00   
     .byte	0x00,0x99,0xBB,0x99,0xA9,0x3B,0x00,0x3B,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF   
     .byte	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF   
     .byte	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF   
     .byte	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF   
     .byte	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF   
     .byte	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF   
     .byte	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF   
     .byte	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF   

move_table_6600:
     .byte	0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAE,0x8A   
     .byte	0x88,0x88,0x88,0x88,0x08,0xB0,0x88,0x88,0x88,0xC8,0xB0,0xBB,0xBB,0xBB,0xFB,0x8B   
     .byte	0xBB,0xBB,0xBB,0xBB,0xBB,0x80,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB   
     .byte	0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB   
     .byte	0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xFB,0x90,0x99,0xB0,0xBB,0xBF,0xBB,0xBB   
     .byte	0x0B,0x99,0xD9,0xBB,0xBB,0xBB,0xBB,0x00,0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x99   
     .byte	0x99,0x99,0x99,0x9B,0x99,0xBB,0xBB,0xBF,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0x80,0x88   
     .byte	0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x08   
     .byte	0xA0,0xAA,0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x99,0x09,0x9B,0x99,0x99,0x99  
     .byte	0xA0,0x9A,0xB9,0xC8,0x08,0x90,0x99,0x99,0x99,0x99,0x99,0x09,0xB0,0xBB,0xBB,0xBB  
     .byte	0xBB,0x0B,0xB9,0xBB,0xBB,0xBB,0x80,0x88,0x88,0x8A,0xC8,0xB8,0x08,0xA0,0xAA,0xAA  
     .byte	0xAA,0xAA,0x88,0xAA,0xAA,0xAA,0x0A,0xA9,0x88,0xC8,0xA9,0x99,0xB9,0xBB,0xBF,0x99  
     .byte	0x99,0x09,0x9B,0xAA,0xAA,0xEA,0xBA,0x99,0x99,0x99,0x99,0x99,0x9D,0x99,0xBD,0x8B  
     .byte	0x88,0xAE,0x9A,0xAA,0xEA,0xAA,0xAA,0x0A,0x88,0x8C,0x88,0xAA,0xAA,0xAA,0xAA,0xAA   
     .byte	0xAA,0x8E,0x88,0x88,0x88,0xA8,0x00,0x99,0xF9,0x88,0x88,0xB0,0xBB,0xBB,0xBB,0xBB   
     .byte	0xBB,0xBF,0xBB,0xBB,0xBF,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB   
     .byte	0xBB,0xBB,0xBB,0xBF,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0x0B,0x99,0xFB,0xFB,0xBB,0xBB   
     .byte	0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0x90   
     .byte	0x99,0x99,0xD9,0x99,0xAA,0xCA,0xBB,0x9B,0xBF,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB,0xBB   
     .byte	0xBB,0x90,0x8A,0xA8,0x80,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x00,0xAA,0x88,0xBB   
     .byte	0xBB,0x99,0xAA,0xAE,0x0A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xAA,0x88   
     .byte	0x88,0x88,0xB0,0x88,0x88,0xC8,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88   
     .byte	0x88,0x88,0x88,0x88,0x88,0x88,0x9A,0x99,0x99,0x9D,0x99,0x3B,0x00,0x3B,0x00,0x3B   
     .byte	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF   
     .byte	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF   
     .byte	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF   
     .byte	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF   
     .byte	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF   
     .byte	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF   
     .byte	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF   
     .byte	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF   
     .byte	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF   

misc_table_6800:
     .byte	0x57,0x8F,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x06,0x03,0x03,0x03,0x03,0x03,0x03
     .byte	0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x06,0x03,0x8E,0x03,0x03,0x03,0x03,0x03
     .byte	0x03,0x03,0x03,0x06,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x8D,0x03,0x03,0x03,0x03
     .byte	0x03,0x03,0x03,0x06,0x03,0x03,0x03,0x03,0x03,0x03,0x06,0x03,0x03,0x03,0x03,0x03
     .byte	0x03,0x03,0x06,0x03,0x03,0x03,0x03,0x03,0x03,0x06,0x03,0x03,0x03,0x03,0x03,0x03
     .byte	0x06,0x03,0x03,0x03,0x56,0x03,0x06,0x8E,0x03,0x03,0x03,0x06,0x03,0x03,0x03,0x06
     .byte	0x03,0x03,0x06,0x03,0x06,0x03,0x03,0x06,0x55,0x8F,0x06,0x06,0x06,0x06,0x06,0x01
     .byte	0x06,0x01,0x01,0x01,0x54,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x07,0x53,0x01,0x01
     .byte	0x07,0x01,0x07,0x07,0x07,0x07,0x8E,0x07,0x5F,0x02,0x07,0x02,0x02,0x07,0x8D,0x02
     .byte	0x02,0x02,0x02,0x07,0x02,0x02,0x02,0x02,0x07,0x02,0x02,0x02,0x8C,0x02,0x02,0x07
     .byte	0x02,0x02,0x02,0x02,0x07,0x02,0x02,0x02,0x02,0x07,0x02,0x02,0x02,0x5E,0x02,0x07
     .byte	0x02,0x02,0x02,0x02,0x07,0x02,0x02,0x02,0x02,0x07,0x8A,0x02,0x02,0x02,0x07,0x02
     .byte	0x02,0x02,0x02,0x02,0x07,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x07,0x02,0x02,0x8B
     .byte	0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x07,0x02,0x02,0x02,0x02,0x02,0x02,0x02
     .byte	0x8C,0x02,0x02,0x02,0x07,0x02,0x02,0x02,0x02,0x8D,0x02,0x02,0x02,0x02,0x8E,0x02
     .byte	0x02,0x02,0x02,0x52,0x8F,0x01,0xC0,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01
     .byte	0x8F,0x47,0x07,0x02,0x02,0x07,0x02,0x02,0x07,0x02,0x02,0x07,0x02,0x02,0x07,0x02
     .byte	0x02,0x07,0x02,0x07,0x02,0x07,0x02,0x46,0x07,0x02,0x07,0x02,0x07,0x01,0x06,0x03
     .byte	0x8C,0x03,0x06,0x03,0x03,0x03,0x06,0x03,0x03,0x06,0x03,0x03,0x03,0x03,0x03,0x45
     .byte	0x06,0x03,0x03,0x03,0x03,0x06,0x03,0x03,0x03,0x03,0x03,0x06,0x03,0x03,0x03,0x03
     .byte	0x06,0x03,0x8F,0x06,0x03,0x06,0x03,0x06,0x44,0x01,0x01,0x07,0x07,0x02,0x07,0x02
     .byte	0x8E,0x02,0x07,0x02,0x02,0x02,0x07,0x02,0x02,0x02,0x02,0x07,0x8C,0x02,0x02,0x02
     .byte	0x07,0x4F,0x02,0x02,0x07,0x02,0x02,0x02,0x07,0x02,0x02,0x07,0x02,0x07,0x02,0x02
     .byte	0x02,0x07,0x02,0x8B,0x07,0x02,0x02,0x07,0x02,0x07,0x02,0x02,0x07,0x02,0x07,0x02
     .byte	0x07,0x02,0x02,0x07,0x02,0x02,0x07,0x02,0x02,0x02,0x07,0x02,0x8A,0x02,0x07,0x02
     .byte	0x07,0x4E,0x02,0x02,0x07,0x02,0x02,0x07,0x02,0x02,0x07,0x02,0x02,0x07,0x02,0x07
     .byte	0x02,0x07,0x02,0x07,0x02,0x07,0x8B,0x02,0x07,0x02,0x07,0x02,0x07,0x02,0x07,0x8C
     .byte	0x07,0x07,0x07,0x07,0x4D,0x07,0x07,0x07,0x07,0x8D,0x07,0x07,0x07,0x07,0x07,0x41
     .byte	0x01,0x07,0x07,0x8E,0x07,0x07,0x01,0x07,0x01,0x07,0x07,0x01,0x07,0x01,0x01,0x07
     .byte	0x01,0x07,0x01,0x01,0x01,0x07,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01
     .byte	0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x40,0x01,0x01,0x01,0x01,0x01,0x06,0x01
     .byte	0x01,0x8D,0x01,0x01,0x06,0x01,0x06,0x01,0x06,0x01,0x6C,0x06,0x06,0x06,0x06,0x06
     .byte	0x06,0x03,0x06,0x8C,0x03,0x03,0x03,0x06,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03
     .byte	0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x40,0x00,0x01,0x00,0x01,0x00,0x01,0xC0
     .byte	0x8F,0x47,0x01,0x01,0x01,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02
     .byte	0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x07,0x07,0x02,0x02,0x02,0x02,0x02
     .byte	0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02
     .byte	0x02,0x02,0x02,0x07,0x07,0x02,0x02,0x07,0x02,0x02,0x07,0x46,0x02,0x02,0x02,0x02
     .byte	0x02,0x02,0x02,0x02,0x02,0x02,0x07,0x07,0x07,0x02,0x02,0x02,0x02,0x02,0x02,0x02
     .byte	0x02,0x02,0x02,0x02,0x02,0x07,0x02,0x02,0x02,0x07,0x07,0x07,0x45,0x07,0x07,0x07
     .byte	0x02,0x07,0x07,0x07,0x02,0x07,0x07,0x02,0x02,0x07,0x44,0x07,0x07,0x07,0x07,0x07
     .byte	0x07,0x07,0x07,0x43,0x07,0x07,0x01,0x01,0x07,0x01,0x01,0x07,0x01,0x01,0x01,0x01
     .byte	0x03,0x06,0x01,0x01,0x42,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06
     .byte	0x06,0x06,0x06,0x06,0x06,0x41,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06
     .byte	0x06,0x06,0x06,0x06,0x06,0x06,0x03,0x03,0x01,0x03,0x03,0x01,0x03,0x03,0x01,0x03
     .byte	0x03,0x01,0x03,0x03,0x01,0x03,0x03,0x01,0x03,0x03,0x01,0x03,0x03,0x01,0x6D,0x03
     .byte	0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x41,0xC0,0x01,0x01,0x01,0x01,0x01,0x01,0x01
     .byte	0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00
     .byte	0x8F,0x47,0x02,0x07,0x02,0x02,0x02,0x02,0x07,0x02,0x02,0x02,0x02,0x02,0x07,0x02
     .byte	0x02,0x02,0x02,0x07,0x02,0x02,0x02,0x02,0x07,0x02,0x02,0x02,0x02,0x07,0x02,0x02
     .byte	0x02,0x02,0x07,0x02,0x02,0x02,0x8E,0x46,0x07,0x02,0x02,0x07,0x02,0x02,0x02,0x07
     .byte	0x02,0x02,0x02,0x07,0x02,0x02,0x07,0x02,0x02,0x07,0x02,0x02,0x07,0x02,0x02,0x07
     .byte	0x02,0x02,0x8D,0x45,0x07,0x02,0x02,0x07,0x02,0x02,0x07,0x02,0x07,0x02,0x02,0x07
     .byte	0x02,0x07,0x02,0x07,0x02,0x07,0x8C,0x44,0x07,0x02,0x07,0x07,0x01,0x06,0x06,0x03
     .byte	0x03,0x06,0x03,0x03,0x03,0x03,0x06,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03
     .byte	0x03,0x8B,0x6F,0x06,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x06,0x03,0x03,0x03
     .byte	0x03,0x03,0x03,0x03,0x03,0x06,0x03,0x03,0x03,0x03,0x03,0x03,0x06,0x03,0x03,0x03
     .byte	0x03,0x06,0x03,0x03,0x03,0x03,0x03,0x06,0x03,0x03,0x03,0x03,0x06,0x03,0x03,0x03
     .byte	0x03,0x03,0x06,0x03,0x03,0x03,0x03,0x03,0x06,0x03,0x03,0x03,0x03,0x03,0x03,0x03
     .byte	0x06,0x03,0x03,0x03,0x03,0x03,0x06,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x06,0x03
     .byte	0x03,0x03,0x03,0x03,0x03,0x03,0x06,0x03,0x03,0x03,0x03,0x03,0x03,0x06,0x03,0x03
     .byte	0x03,0x03,0x06,0x03,0x03,0x03,0x03,0x06,0x03,0x03,0x03,0x03,0x8A,0x6E,0x06,0x03
     .byte	0x03,0x03,0x03,0x06,0x03,0x03,0x03,0x03,0x06,0x03,0x03,0x03,0x03,0x06,0x03,0x03
     .byte	0x03,0x03,0x03,0x03,0x06,0x03,0x03,0x03,0x03,0x06,0x03,0x03,0x03,0x03,0x06,0x03
     .byte	0x03,0x03,0x06,0x03,0x03,0x42,0xC0,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01
     .byte	0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01
     .byte	0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01
     .byte	0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01
     .byte	0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01
     .byte	0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01
     .byte	0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01
     .byte	0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01
     .byte	0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01
     .byte	0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01
     .byte	0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01
     .byte	0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01
     .byte	0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01
     .byte	0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01
     .byte	0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01
     .byte	0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01
     .byte	0x8F,0x57,0x03,0x03,0x03,0x06,0x03,0x03,0x03,0x03,0x03,0x06,0x03,0x03,0x03,0x03
     .byte	0x03,0x06,0x03,0x03,0x03,0x03,0x03,0x03,0x06,0x03,0x03,0x03,0x06,0x03,0x03,0x03
     .byte	0x06,0x03,0x06,0x03,0x8E,0x56,0x06,0x03,0x06,0x03,0x06,0x03,0x06,0x06,0x06,0x06
     .byte	0x03,0x06,0x8D,0x55,0x06,0x03,0x06,0x03,0x06,0x03,0x06,0x06,0x03,0x06,0x03,0x03
     .byte	0x06,0x03,0x03,0x06,0x03,0x03,0x8C,0x54,0x06,0x03,0x03,0x06,0x03,0x03,0x03,0x06
     .byte	0x03,0x03,0x06,0x03,0x06,0x03,0x06,0x03,0x06,0x06,0x8B,0x53,0x06,0x01,0x06,0x01
     .byte	0x06,0x06,0x06,0x06,0x01,0x06,0x01,0x01,0x06,0x01,0x01,0x01,0x8A,0x52,0x06,0x01
     .byte	0x01,0x01,0x06,0x01,0x01,0x01,0x06,0x01,0x01,0x01,0x06,0x06,0x89,0x5E,0x06,0x06
     .byte	0x06,0x03,0x06,0x03,0x03,0x03,0x06,0x03,0x03,0x06,0x08,0x08,0x51,0x06,0x06,0x01
     .byte	0x01,0x01,0x07,0x01,0x01,0x07,0x07,0x07,0x07,0x87,0x5D,0x07,0x02,0x07,0x02,0x07
     .byte	0x02,0x02,0x02,0x07,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x07,0x02,0x02,0x02
     .byte	0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02
     .byte	0x02,0x07,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x07,0x02,0x02,0x02,0x02,0x02
     .byte	0x02,0x02,0x02,0x02,0x07,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x51,0xC0,0x00,0x01
     .byte	0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01
     .byte	0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01
     .byte	0x8F,0x47,0x01,0x07,0x07,0x01,0x07,0x01,0x07,0x8F,0x46,0x07,0x07,0x07,0x07,0x07
     .byte	0x01,0x07,0x07,0x8F,0x45,0x07,0x07,0x07,0x07,0x07,0x07,0x01,0x07,0x8F,0x44,0x07
     .byte	0x07,0x07,0x07,0x07,0x02,0x07,0x07,0x07,0x8F,0x43,0x07,0x07,0x02,0x07,0x07,0x07
     .byte	0x07,0x07,0x07,0x07,0x02,0x07,0x07,0x07,0x07,0x02,0x07,0x02,0x07,0x07,0x8F,0x42
     .byte	0x07,0x07,0x07,0x02,0x07,0x07,0x07,0x07,0x07,0x02,0x07,0x07,0x07,0x07,0x07,0x07
     .byte	0x07,0x07,0x07,0x8F,0x41,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07
     .byte	0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x01
     .byte	0x07,0x07,0x07,0x01,0x07,0x07,0x07,0x07,0x01,0x07,0x01,0x07,0x01,0x07,0x01,0x07
     .byte	0x01,0x01,0x01,0x01,0x01,0x8F,0x40,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x06
     .byte	0x01,0x01,0x06,0x01,0x01,0x06,0x01,0x06,0x01,0x06,0x06,0x01,0x06,0x06,0x01,0x06
     .byte	0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x8D,0x6C,0x06,0x06,0x03,0x06,0x06,0x06,0x06
     .byte	0x06,0x03,0x06,0x03,0x06,0x03,0x06,0x03,0x03,0x06,0x03,0x03,0x03,0x03,0x06,0x03
     .byte	0x03,0x03,0x03,0x06,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03
     .byte	0x03,0x06,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03
     .byte	0x03,0x03,0x03,0x03,0x06,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03
     .byte	0x03,0x06,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03
     .byte	0xC0,0x03,0x03,0x03,0x03,0x03,0x01,0x01,0x40,0xC0,0x01,0x01,0x01,0x01,0x01,0x01
     .byte	0x01,0xC0,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01
     .byte	0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01
     .byte	0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01
     .byte	0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01
     .byte	0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01
     .byte	0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01
     .byte	0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01
     .byte	0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01
     .byte	0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01
     .byte	0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01
     .byte	0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01
     .byte	0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01
     .byte	0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01
     .byte	0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01
     .byte	0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x66,0x01,0xA6,0x01,0xEB,0x01,0xEA,0xC0
